; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\ -I..\ff8\src\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC1xx\Include -I..\..\..\..\Library\Device\Nuvoton\NUC1xx\Source -I..\..\..\..\Library\ -I..\..\..\..\Library\NUC1xx\Include -I..\..\..\..\Library\NUC1xx-LB_002\Include -IF:\Keil\ARM\RV31\INC -IF:\Keil\ARM\CMSIS\Include -IF:\Keil\ARM\INC\Nuvoton\NUC1xx -D__UVISION_VERSION=524 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.Delay||, CODE, READONLY, ALIGN=1

                  Delay PROC
;;;15     
;;;16     void Delay(uint32_t delayCnt)
000000  e001              B        |L1.6|
                  |L1.2|
;;;17     {
;;;18         while(delayCnt--)
;;;19         {
;;;20             __NOP();
000002  bf00              NOP      
;;;21             __NOP();
000004  bf00              NOP      
                  |L1.6|
000006  4601              MOV      r1,r0                 ;18
000008  1e40              SUBS     r0,r0,#1              ;18
00000a  2900              CMP      r1,#0                 ;18
00000c  d1f9              BNE      |L1.2|
;;;22         }
;;;23     }
00000e  4770              BX       lr
;;;24     
                          ENDP


                          AREA ||i.InitADC||, CODE, READONLY, ALIGN=2

                  InitADC PROC
;;;86     
;;;87     void InitADC(void)
000000  4829              LDR      r0,|L2.168|
;;;88     {
;;;89     	/* Step 1. GPIO initial */ 
;;;90     	GPIOA->OFFD|=0x00800000; 	//Disable digital input path
000002  6840              LDR      r0,[r0,#4]
000004  2101              MOVS     r1,#1
000006  05c9              LSLS     r1,r1,#23
000008  4308              ORRS     r0,r0,r1
00000a  4927              LDR      r1,|L2.168|
00000c  6048              STR      r0,[r1,#4]
;;;91     	SYS->GPAMFP.ADC7_SS21_AD6=1; 		//Set ADC function 
00000e  2005              MOVS     r0,#5
000010  0700              LSLS     r0,r0,#28
000012  6b00              LDR      r0,[r0,#0x30]
000014  2180              MOVS     r1,#0x80
000016  4388              BICS     r0,r0,r1
000018  3080              ADDS     r0,r0,#0x80
00001a  2105              MOVS     r1,#5
00001c  0709              LSLS     r1,r1,#28
00001e  6308              STR      r0,[r1,#0x30]
;;;92     				
;;;93     	/* Step 2. Enable and Select ADC clock source, and then enable ADC module */          
;;;94     	SYSCLK->CLKSEL1.ADC_S = 0;	//Select externl for ADC
000020  4822              LDR      r0,|L2.172|
000022  6940              LDR      r0,[r0,#0x14]
000024  210c              MOVS     r1,#0xc
000026  4388              BICS     r0,r0,r1
000028  4920              LDR      r1,|L2.172|
00002a  6148              STR      r0,[r1,#0x14]
;;;95     	SYSCLK->CLKDIV.ADC_N = 0;	//ADC clock source = 12Mhz/1 =12Mhz;
00002c  4608              MOV      r0,r1
00002e  6980              LDR      r0,[r0,#0x18]
000030  21ff              MOVS     r1,#0xff
000032  0409              LSLS     r1,r1,#16
000034  4388              BICS     r0,r0,r1
000036  491d              LDR      r1,|L2.172|
000038  6188              STR      r0,[r1,#0x18]
;;;96     	SYSCLK->APBCLK.ADC_EN = 1;	//Enable clock source
00003a  4608              MOV      r0,r1
00003c  6880              LDR      r0,[r0,#8]
00003e  04c9              LSLS     r1,r1,#19
000040  4388              BICS     r0,r0,r1
000042  1840              ADDS     r0,r0,r1
000044  4919              LDR      r1,|L2.172|
000046  6088              STR      r0,[r1,#8]
;;;97     	ADC->ADCR.ADEN = 1;			//Enable ADC module
000048  4819              LDR      r0,|L2.176|
00004a  6a00              LDR      r0,[r0,#0x20]
00004c  0840              LSRS     r0,r0,#1
00004e  0040              LSLS     r0,r0,#1
000050  1c40              ADDS     r0,r0,#1
000052  4917              LDR      r1,|L2.176|
000054  6208              STR      r0,[r1,#0x20]
;;;98     
;;;99     	/* Step 3. Select Operation mode */
;;;100    	ADC->ADCR.DIFFEN = 0;     	//single end input
000056  4608              MOV      r0,r1
000058  6a00              LDR      r0,[r0,#0x20]
00005a  1509              ASRS     r1,r1,#20
00005c  4388              BICS     r0,r0,r1
00005e  4914              LDR      r1,|L2.176|
000060  6208              STR      r0,[r1,#0x20]
;;;101    	ADC->ADCR.ADMD   = 0;     	//single mode
000062  4608              MOV      r0,r1
000064  6a00              LDR      r0,[r0,#0x20]
000066  210c              MOVS     r1,#0xc
000068  4388              BICS     r0,r0,r1
00006a  4911              LDR      r1,|L2.176|
00006c  6208              STR      r0,[r1,#0x20]
;;;102    		
;;;103    	/* Step 4. Select ADC channel */
;;;104    	ADC->ADCHER.CHEN = 0x80;
00006e  4608              MOV      r0,r1
000070  6a40              LDR      r0,[r0,#0x24]
000072  0a00              LSRS     r0,r0,#8
000074  0200              LSLS     r0,r0,#8
000076  3080              ADDS     r0,r0,#0x80
000078  6248              STR      r0,[r1,#0x24]
;;;105    	
;;;106    	/* Step 5. Enable ADC interrupt */
;;;107    	ADC->ADSR.ADF =1;     		//clear the A/D interrupt flags for safe 
00007a  4608              MOV      r0,r1
00007c  6b00              LDR      r0,[r0,#0x30]
00007e  0840              LSRS     r0,r0,#1
000080  0040              LSLS     r0,r0,#1
000082  1c40              ADDS     r0,r0,#1
000084  6308              STR      r0,[r1,#0x30]
;;;108    	ADC->ADCR.ADIE = 1;
000086  4608              MOV      r0,r1
000088  6a00              LDR      r0,[r0,#0x20]
00008a  2102              MOVS     r1,#2
00008c  4388              BICS     r0,r0,r1
00008e  1c80              ADDS     r0,r0,#2
000090  4907              LDR      r1,|L2.176|
000092  6208              STR      r0,[r1,#0x20]
;;;109    //	NVIC_EnableIRQ(ADC_IRQn);
;;;110    	
;;;111    	/* Step 6. Enable WDT module */
;;;112    	ADC->ADCR.ADST=1;
000094  4608              MOV      r0,r1
000096  6a00              LDR      r0,[r0,#0x20]
000098  2101              MOVS     r1,#1
00009a  02c9              LSLS     r1,r1,#11
00009c  4388              BICS     r0,r0,r1
00009e  1840              ADDS     r0,r0,r1
0000a0  4903              LDR      r1,|L2.176|
0000a2  6208              STR      r0,[r1,#0x20]
;;;113    }
0000a4  4770              BX       lr
;;;114    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L2.168|
                          DCD      0x50004000
                  |L2.172|
                          DCD      0x50000200
                  |L2.176|
                          DCD      0x400e0000

                          AREA ||i.get_fattime||, CODE, READONLY, ALIGN=1

                  get_fattime PROC
;;;47     
;;;48     unsigned long get_fattime (void)
000000  2000              MOVS     r0,#0
;;;49     {
;;;50     	unsigned long tmr;
;;;51     
;;;52         tmr=0x00000;
;;;53     
;;;54     	return tmr;
;;;55     }
000002  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;115    
;;;116    int32_t main(void)
000000  b086              SUB      sp,sp,#0x18
;;;117    {		
;;;118    		uint8_t dataout[2]="s";
000002  a031              ADR      r0,|L4.200|
000004  6800              LDR      r0,[r0,#0]
000006  9005              STR      r0,[sp,#0x14]
;;;119    		uint8_t dataout2[2]="h";
000008  a030              ADR      r0,|L4.204|
00000a  6800              LDR      r0,[r0,#0]
00000c  9004              STR      r0,[sp,#0x10]
;;;120        int i=0;    
00000e  2400              MOVS     r4,#0
;;;121        STR_UART_T sParam;
;;;122    
;;;123        UNLOCKREG();
000010  2059              MOVS     r0,#0x59
000012  492f              LDR      r1,|L4.208|
000014  6008              STR      r0,[r1,#0]
000016  2016              MOVS     r0,#0x16
000018  6008              STR      r0,[r1,#0]
00001a  2088              MOVS     r0,#0x88
00001c  6008              STR      r0,[r1,#0]
;;;124        /* Set UART Pin */
;;;125        DrvGPIO_InitFunction(E_FUNC_UART0);
00001e  2029              MOVS     r0,#0x29
000020  f7fffffe          BL       DrvGPIO_InitFunction
;;;126      
;;;127        /* UART Setting */
;;;128        sParam.u32BaudRate    = 115200;
000024  20e1              MOVS     r0,#0xe1
000026  0240              LSLS     r0,r0,#9
000028  9001              STR      r0,[sp,#4]
;;;129        sParam.u8cDataBits    = DRVUART_DATABITS_8;
00002a  2103              MOVS     r1,#3
00002c  4668              MOV      r0,sp
00002e  7201              STRB     r1,[r0,#8]
;;;130        sParam.u8cStopBits    = DRVUART_STOPBITS_1;
000030  2100              MOVS     r1,#0
000032  7241              STRB     r1,[r0,#9]
;;;131        sParam.u8cParity    = DRVUART_PARITY_NONE;
000034  7281              STRB     r1,[r0,#0xa]
;;;132        sParam.u8cRxTriggerLevel= DRVUART_FIFO_1BYTES;
000036  72c1              STRB     r1,[r0,#0xb]
;;;133        /* Select UART Clock Source From 12Mhz*/
;;;134        DrvSYS_SelectIPClockSource(E_SYS_UART_CLKSRC,0); 
000038  2006              MOVS     r0,#6
00003a  f7fffffe          BL       DrvSYS_SelectIPClockSource
;;;135    
;;;136        /* Set UART Configuration */
;;;137        DrvUART_Open(UART_PORT0,&sParam);
00003e  a901              ADD      r1,sp,#4
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       DrvUART_Open
;;;138    
;;;139        /* Enable 12M OSC */
;;;140        DrvSYS_SetOscCtrl(E_SYS_XTL12M, 1);
000046  2101              MOVS     r1,#1
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       DrvSYS_SetOscCtrl
;;;141    
;;;142        /* Enable PLL */
;;;143        DrvSYS_SetPLLMode(0);
00004e  2000              MOVS     r0,#0
000050  f7fffffe          BL       DrvSYS_SetPLLMode
;;;144        Delay(1000);
000054  207d              MOVS     r0,#0x7d
000056  00c0              LSLS     r0,r0,#3
000058  f7fffffe          BL       Delay
;;;145    
;;;146        DrvSYS_SelectHCLKSource(2);
00005c  2002              MOVS     r0,#2
00005e  f7fffffe          BL       DrvSYS_SelectHCLKSource
;;;147    
;;;148        printf("NUC100 USB MassStorage Start!\n");
000062  a01c              ADR      r0,|L4.212|
000064  f7fffffe          BL       __2printf
;;;149    #if 0
;;;150    u8FileBuff[0]=0x55;
;;;151    u8FileBuff[1]=0xaa;
;;;152    write_sdcard(0);
;;;153    u8FileBuff[0]=0x11;
;;;154    u8FileBuff[1]=0x22;
;;;155    write_sdcard(2);
;;;156    #endif
;;;157    InitADC();
000068  f7fffffe          BL       InitADC
;;;158    
;;;159    while(1)
00006c  e028              B        |L4.192|
                  |L4.110|
;;;160    	{
;;;161    		while(ADC->ADSR.ADF==0);
00006e  bf00              NOP      
                  |L4.112|
000070  4820              LDR      r0,|L4.244|
000072  6b00              LDR      r0,[r0,#0x30]
000074  07c0              LSLS     r0,r0,#31
000076  0fc0              LSRS     r0,r0,#31
000078  2800              CMP      r0,#0
00007a  d0f9              BEQ      |L4.112|
;;;162    		ADC->ADSR.ADF=1;
00007c  481d              LDR      r0,|L4.244|
00007e  6b00              LDR      r0,[r0,#0x30]
000080  0840              LSRS     r0,r0,#1
000082  0040              LSLS     r0,r0,#1
000084  1c40              ADDS     r0,r0,#1
000086  491b              LDR      r1,|L4.244|
000088  6308              STR      r0,[r1,#0x30]
;;;163    		u8FileBuff[0]=(ADC->ADDR[7].RSLT>>8)&0x0f;
00008a  4608              MOV      r0,r1
00008c  69c0              LDR      r0,[r0,#0x1c]
00008e  0500              LSLS     r0,r0,#20
000090  0f00              LSRS     r0,r0,#28
000092  4919              LDR      r1,|L4.248|
000094  7008              STRB     r0,[r1,#0]
;;;164    		u8FileBuff[1]=(ADC->ADDR[7].RSLT>>0)&0x0f;		
000096  4817              LDR      r0,|L4.244|
000098  69c0              LDR      r0,[r0,#0x1c]
00009a  0700              LSLS     r0,r0,#28
00009c  0f00              LSRS     r0,r0,#28
00009e  7048              STRB     r0,[r1,#1]
;;;165    		write_sdcard(i);
0000a0  4620              MOV      r0,r4
0000a2  f7fffffe          BL       write_sdcard
;;;166    		if(i>(10000*2)) break;
0000a6  4815              LDR      r0,|L4.252|
0000a8  4284              CMP      r4,r0
0000aa  dd00              BLE      |L4.174|
0000ac  e009              B        |L4.194|
                  |L4.174|
;;;167    		i=i+2;
0000ae  1ca4              ADDS     r4,r4,#2
;;;168    		ADC->ADCR.ADST=1;
0000b0  4810              LDR      r0,|L4.244|
0000b2  6a00              LDR      r0,[r0,#0x20]
0000b4  2101              MOVS     r1,#1
0000b6  02c9              LSLS     r1,r1,#11
0000b8  4388              BICS     r0,r0,r1
0000ba  1840              ADDS     r0,r0,r1
0000bc  490d              LDR      r1,|L4.244|
0000be  6208              STR      r0,[r1,#0x20]
                  |L4.192|
0000c0  e7d5              B        |L4.110|
                  |L4.194|
0000c2  bf00              NOP                            ;166
;;;169    	}
;;;170        while(1);
0000c4  bf00              NOP      
                  |L4.198|
0000c6  e7fe              B        |L4.198|
;;;171    }
;;;172    
                          ENDP

                  |L4.200|
0000c8  7300              DCB      "s",0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L4.204|
0000cc  6800              DCB      "h",0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L4.208|
                          DCD      0x50000100
                  |L4.212|
0000d4  4e554331          DCB      "NUC100 USB MassStorage Start!\n",0
0000d8  30302055
0000dc  5342204d
0000e0  61737353
0000e4  746f7261
0000e8  67652053
0000ec  74617274
0000f0  210a00  
0000f3  00                DCB      0
                  |L4.244|
                          DCD      0x400e0000
                  |L4.248|
                          DCD      u8FileBuff
                  |L4.252|
                          DCD      0x00004e20

                          AREA ||i.put_rc||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_u
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  put_rc PROC
;;;24     
;;;25     void put_rc (FRESULT rc)
000000  b570              PUSH     {r4-r6,lr}
;;;26     {
000002  4605              MOV      r5,r0
;;;27     	const TCHAR *p =
000004  4c09              LDR      r4,|L5.44|
;;;28     		_T("OK\0DISK_ERR\0INT_ERR\0NOT_READY\0NO_FILE\0NO_PATH\0INVALID_NAME\0")
;;;29     		_T("DENIED\0EXIST\0INVALID_OBJECT\0WRITE_PROTECTED\0INVALID_DRIVE\0")
;;;30     		_T("NOT_ENABLED\0NO_FILE_SYSTEM\0MKFS_ABORTED\0TIMEOUT\0LOCKED\0")
;;;31     		_T("NOT_ENOUGH_CORE\0TOO_MANY_OPEN_FILES\0");
;;;32     	//FRESULT i;
;;;33     	uint32_t i;
;;;34     	for (i = 0; (i != (UINT)rc) && *p; i++) {
000006  2600              MOVS     r6,#0
000008  e005              B        |L5.22|
                  |L5.10|
;;;35     		while(*p++) ;
00000a  bf00              NOP      
                  |L5.12|
00000c  7821              LDRB     r1,[r4,#0]
00000e  1c64              ADDS     r4,r4,#1
000010  2900              CMP      r1,#0
000012  d1fb              BNE      |L5.12|
000014  1c76              ADDS     r6,r6,#1              ;34
                  |L5.22|
000016  42ae              CMP      r6,r5                 ;34
000018  d002              BEQ      |L5.32|
00001a  7820              LDRB     r0,[r4,#0]            ;34
00001c  2800              CMP      r0,#0                 ;34
00001e  d1f4              BNE      |L5.10|
                  |L5.32|
;;;36     	}
;;;37     	printf(_T("rc=%u FR_%s\n"), (UINT)rc, p);
000020  4622              MOV      r2,r4
000022  4629              MOV      r1,r5
000024  a002              ADR      r0,|L5.48|
000026  f7fffffe          BL       __2printf
;;;38     }
00002a  bd70              POP      {r4-r6,pc}
;;;39     	
                          ENDP

                  |L5.44|
                          DCD      ||.constdata||
                  |L5.48|
000030  72633d25          DCB      "rc=%u FR_%s\n",0
000034  75204652
000038  5f25730a
00003c  00      
00003d  00                DCB      0
00003e  00                DCB      0
00003f  00                DCB      0

                          AREA ||i.write_sdcard||, CODE, READONLY, ALIGN=2

                  write_sdcard PROC
;;;58     int8_t i8FileName[13]="test.dat";
;;;59     void write_sdcard(int count)
000000  b570              PUSH     {r4-r6,lr}
;;;60     {
000002  b0ff              SUB      sp,sp,#0x1fc
000004  b0ff              SUB      sp,sp,#0x1fc
000006  b09a              SUB      sp,sp,#0x68
000008  4604              MOV      r4,r0
;;;61     volatile UINT Timer = 0;		/* Performance timer (1kHz increment) */
00000a  2100              MOVS     r1,#0
00000c  a8ff              ADD      r0,sp,#0x3fc
00000e  6601              STR      r1,[r0,#0x60]
;;;62     
;;;63     //FILINFO Finfo;
;;;64     FATFS FatFs[_DRIVES];		/* File system object for logical drive */
;;;65     
;;;66     
;;;67       FRESULT res;		
;;;68     	//FATFS *fs;				/* Pointer to file system object */	
;;;69     FIL file1;				/* File objects */	
;;;70     	uint32_t u32FileBuffPointer=2;	
000010  2102              MOVS     r1,#2
000012  9100              STR      r1,[sp,#0]
;;;71     	disk_initialize(0);
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       disk_initialize
;;;72     
;;;73     	res	=f_mount(0, &FatFs[0]);	
00001a  a98a              ADD      r1,sp,#0x228
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       f_mount
000022  4605              MOV      r5,r0
;;;74     	if(res)
000024  2d00              CMP      r5,#0
000026  d005              BEQ      |L6.52|
;;;75     	{
;;;76     		put_rc(res);
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       put_rc
;;;77     		printf("Don't mount file system\n");
00002e  a00e              ADR      r0,|L6.104|
000030  f7fffffe          BL       __2printf
                  |L6.52|
;;;78     	}	 
;;;79     		
;;;80        put_rc(f_open(&file1, (TCHAR*)i8FileName, FA_WRITE));
000034  2202              MOVS     r2,#2
000036  4913              LDR      r1,|L6.132|
000038  a801              ADD      r0,sp,#4
00003a  f7fffffe          BL       f_open
00003e  4606              MOV      r6,r0
000040  f7fffffe          BL       put_rc
;;;81        f_lseek(&file1, count);
000044  4621              MOV      r1,r4
000046  a801              ADD      r0,sp,#4
000048  f7fffffe          BL       f_lseek
;;;82        f_write(&file1, u8FileBuff, u32FileBuffPointer, &u32FileBuffPointer);
00004c  466b              MOV      r3,sp
00004e  490e              LDR      r1,|L6.136|
000050  a801              ADD      r0,sp,#4
000052  9a00              LDR      r2,[sp,#0]
000054  f7fffffe          BL       f_write
;;;83        f_close(&file1);
000058  a801              ADD      r0,sp,#4
00005a  f7fffffe          BL       f_close
;;;84     }
00005e  b07f              ADD      sp,sp,#0x1fc
000060  b07f              ADD      sp,sp,#0x1fc
000062  b01a              ADD      sp,sp,#0x68
000064  bd70              POP      {r4-r6,pc}
;;;85     
                          ENDP

000066  0000              DCW      0x0000
                  |L6.104|
000068  446f6e27          DCB      "Don't mount file system\n",0
00006c  74206d6f
000070  756e7420
000074  66696c65
000078  20737973
00007c  74656d0a
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L6.132|
                          DCD      i8FileName
                  |L6.136|
                          DCD      u8FileBuff

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4f4b0044          DCB      0x4f,0x4b,0x00,0x44
000004  49534b5f          DCB      0x49,0x53,0x4b,0x5f
000008  45525200          DCB      0x45,0x52,0x52,0x00
00000c  494e545f          DCB      0x49,0x4e,0x54,0x5f
000010  45525200          DCB      0x45,0x52,0x52,0x00
000014  4e4f545f          DCB      0x4e,0x4f,0x54,0x5f
000018  52454144          DCB      0x52,0x45,0x41,0x44
00001c  59004e4f          DCB      0x59,0x00,0x4e,0x4f
000020  5f46494c          DCB      0x5f,0x46,0x49,0x4c
000024  45004e4f          DCB      0x45,0x00,0x4e,0x4f
000028  5f504154          DCB      0x5f,0x50,0x41,0x54
00002c  4800494e          DCB      0x48,0x00,0x49,0x4e
000030  56414c49          DCB      0x56,0x41,0x4c,0x49
000034  445f4e41          DCB      0x44,0x5f,0x4e,0x41
000038  4d450044          DCB      0x4d,0x45,0x00,0x44
00003c  454e4945          DCB      0x45,0x4e,0x49,0x45
000040  44004558          DCB      0x44,0x00,0x45,0x58
000044  49535400          DCB      0x49,0x53,0x54,0x00
000048  494e5641          DCB      0x49,0x4e,0x56,0x41
00004c  4c49445f          DCB      0x4c,0x49,0x44,0x5f
000050  4f424a45          DCB      0x4f,0x42,0x4a,0x45
000054  43540057          DCB      0x43,0x54,0x00,0x57
000058  52495445          DCB      0x52,0x49,0x54,0x45
00005c  5f50524f          DCB      0x5f,0x50,0x52,0x4f
000060  54454354          DCB      0x54,0x45,0x43,0x54
000064  45440049          DCB      0x45,0x44,0x00,0x49
000068  4e56414c          DCB      0x4e,0x56,0x41,0x4c
00006c  49445f44          DCB      0x49,0x44,0x5f,0x44
000070  52495645          DCB      0x52,0x49,0x56,0x45
000074  004e4f54          DCB      0x00,0x4e,0x4f,0x54
000078  5f454e41          DCB      0x5f,0x45,0x4e,0x41
00007c  424c4544          DCB      0x42,0x4c,0x45,0x44
000080  004e4f5f          DCB      0x00,0x4e,0x4f,0x5f
000084  46494c45          DCB      0x46,0x49,0x4c,0x45
000088  5f535953          DCB      0x5f,0x53,0x59,0x53
00008c  54454d00          DCB      0x54,0x45,0x4d,0x00
000090  4d4b4653          DCB      0x4d,0x4b,0x46,0x53
000094  5f41424f          DCB      0x5f,0x41,0x42,0x4f
000098  52544544          DCB      0x52,0x54,0x45,0x44
00009c  0054494d          DCB      0x00,0x54,0x49,0x4d
0000a0  454f5554          DCB      0x45,0x4f,0x55,0x54
0000a4  004c4f43          DCB      0x00,0x4c,0x4f,0x43
0000a8  4b454400          DCB      0x4b,0x45,0x44,0x00
0000ac  4e4f545f          DCB      0x4e,0x4f,0x54,0x5f
0000b0  454e4f55          DCB      0x45,0x4e,0x4f,0x55
0000b4  47485f43          DCB      0x47,0x48,0x5f,0x43
0000b8  4f524500          DCB      0x4f,0x52,0x45,0x00
0000bc  544f4f5f          DCB      0x54,0x4f,0x4f,0x5f
0000c0  4d414e59          DCB      0x4d,0x41,0x4e,0x59
0000c4  5f4f5045          DCB      0x5f,0x4f,0x50,0x45
0000c8  4e5f4649          DCB      0x4e,0x5f,0x46,0x49
0000cc  4c455300          DCB      0x4c,0x45,0x53,0x00
0000d0  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=0

                  u8FileBuff
000000  0000              DCB      0x00,0x00
                  i8FileName
000002  7465              DCB      0x74,0x65
000004  73742e64          DCB      0x73,0x74,0x2e,0x64
000008  61740000          DCB      0x61,0x74,0x00,0x00
00000c  000000            DCB      0x00,0x00,0x00

                  __ARM_use_no_argv EQU 0
