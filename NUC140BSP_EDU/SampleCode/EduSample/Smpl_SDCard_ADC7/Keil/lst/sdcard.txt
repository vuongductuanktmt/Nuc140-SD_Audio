; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\sdcard.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sdcard.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\ -I..\ff8\src\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC1xx\Include -I..\..\..\..\Library\Device\Nuvoton\NUC1xx\Source -I..\..\..\..\Library\ -I..\..\..\..\Library\NUC1xx\Include -I..\..\..\..\Library\NUC1xx-LB_002\Include -IF:\Keil\ARM\RV31\INC -IF:\Keil\ARM\CMSIS\Include -IF:\Keil\ARM\INC\Nuvoton\NUC1xx -D__UVISION_VERSION=524 --omf_browse=.\obj\sdcard.crf ..\..\..\..\Library\NUC1xx-LB_002\Source\SDCard.c]
                          THUMB

                          AREA ||i.DrvSDCARD_Close||, CODE, READONLY, ALIGN=1

                  DrvSDCARD_Close PROC
;;;664    /*---------------------------------------------------------------------------------------------------------*/
;;;665    void DrvSDCARD_Close(void)
000000  b510              PUSH     {r4,lr}
;;;666    {
;;;667    	DrvSPI_Close(eDRVSPI_PORT1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       DrvSPI_Close
;;;668    }
000008  bd10              POP      {r4,pc}
;;;669    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP


                          AREA ||i.DrvSDCARD_GetCardSize||, CODE, READONLY, ALIGN=2

                  DrvSDCARD_GetCardSize PROC
;;;682    /*---------------------------------------------------------------------------------------------------------*/
;;;683    uint32_t DrvSDCARD_GetCardSize(uint32_t* pu32TotSecCnt)
000000  4601              MOV      r1,r0
;;;684    {
;;;685    	if (LogicSector == 0)
000002  4805              LDR      r0,|L2.24|
000004  6800              LDR      r0,[r0,#0]  ; LogicSector
000006  2800              CMP      r0,#0
000008  d100              BNE      |L2.12|
                  |L2.10|
;;;686    		return FALSE;
;;;687    	else 
;;;688    		*pu32TotSecCnt = LogicSector;
;;;689    
;;;690    	return TRUE;
;;;691    }
00000a  4770              BX       lr
                  |L2.12|
00000c  4802              LDR      r0,|L2.24|
00000e  6800              LDR      r0,[r0,#0]            ;688  ; LogicSector
000010  6008              STR      r0,[r1,#0]            ;688
000012  2001              MOVS     r0,#1                 ;690
000014  e7f9              B        |L2.10|
;;;692    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      LogicSector

                          AREA ||i.DrvSDCARD_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvSDCARD_GetVersion PROC
;;;723    /*---------------------------------------------------------------------------------------------------------*/
;;;724    uint32_t DrvSDCARD_GetVersion(void)
000000  4800              LDR      r0,|L3.4|
;;;725    {
;;;726    	return (DRVSDCARD_MAJOR_NUM << 16) | (DRVSDCARD_MINOR_NUM << 8) | DRVSDCARD_BUILD_NUM;
;;;727    }
000002  4770              BX       lr
;;;728    
                          ENDP

                  |L3.4|
                          DCD      0x00010001

                          AREA ||i.DrvSDCARD_Open||, CODE, READONLY, ALIGN=2

                  DrvSDCARD_Open PROC
;;;623    /*---------------------------------------------------------------------------------------------------------*/
;;;624    uint32_t DrvSDCARD_Open(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;625    {
;;;626    	uint32_t Temp[2];
;;;627    	Temp[0]=0xFFFFFFFF;
000002  2000              MOVS     r0,#0
000004  43c0              MVNS     r0,r0
000006  9000              STR      r0,[sp,#0]
;;;628    	Temp[1]=Temp[0];
000008  9800              LDR      r0,[sp,#0]
00000a  9001              STR      r0,[sp,#4]
;;;629        DrvSYS_SetIPClock(E_SYS_SPI1_CLK,1);
00000c  2101              MOVS     r1,#1
00000e  200d              MOVS     r0,#0xd
000010  f7fffffe          BL       DrvSYS_SetIPClock
;;;630        DrvGPIO_InitFunction(E_FUNC_SPI1); // enable SPI funztion and pin 
000014  200b              MOVS     r0,#0xb
000016  f7fffffe          BL       DrvGPIO_InitFunction
;;;631        
;;;632    	DrvSPI_Open(eDRVSPI_PORT1,eDRVSPI_MASTER,eDRVSPI_TYPE1,8);
00001a  2308              MOVS     r3,#8
00001c  2201              MOVS     r2,#1
00001e  2100              MOVS     r1,#0
000020  4610              MOV      r0,r2
000022  f7fffffe          BL       DrvSPI_Open
;;;633    	DrvSPI_DisableAutoSS(eDRVSPI_PORT1);
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       DrvSPI_DisableAutoSS
;;;634    	DrvSPI_SetSlaveSelectActiveLevel(eDRVSPI_PORT1, eDRVSPI_ACTIVE_LOW_FALLING);
00002c  2100              MOVS     r1,#0
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       DrvSPI_SetSlaveSelectActiveLevel
;;;635    	DrvSPI_SetEndian(eDRVSPI_PORT1, eDRVSPI_MSB_FIRST);
000034  2101              MOVS     r1,#1
000036  4608              MOV      r0,r1
000038  f7fffffe          BL       DrvSPI_SetEndian
;;;636    	DrvSPI_SetTxRegister(eDRVSPI_PORT1,Temp,2);
00003c  2202              MOVS     r2,#2
00003e  4669              MOV      r1,sp
000040  2001              MOVS     r0,#1
000042  f7fffffe          BL       DrvSPI_SetTxRegister
;;;637    	DrvSPI_SetClockFreq(eDRVSPI_PORT1,300000,300000);
000046  4a0c              LDR      r2,|L4.120|
000048  4611              MOV      r1,r2
00004a  2001              MOVS     r0,#1
00004c  f7fffffe          BL       DrvSPI_SetClockFreq
;;;638        MMC_FLASH_Init();
000050  f7fffffe          BL       MMC_FLASH_Init
;;;639        DrvSYS_Delay(1000);
000054  207d              MOVS     r0,#0x7d
000056  00c0              LSLS     r0,r0,#3
000058  f7fffffe          BL       DrvSYS_Delay
;;;640    	DrvSPI_SetClockFreq(eDRVSPI_PORT1,12000000,12000000);
00005c  4a07              LDR      r2,|L4.124|
00005e  4611              MOV      r1,r2
000060  2001              MOVS     r0,#1
000062  f7fffffe          BL       DrvSPI_SetClockFreq
;;;641    
;;;642    	if (Is_Initialized)
000066  4806              LDR      r0,|L4.128|
000068  7800              LDRB     r0,[r0,#0]  ; Is_Initialized
00006a  2800              CMP      r0,#0
00006c  d001              BEQ      |L4.114|
;;;643    	{
;;;644    		DBG_PRINTF("SDCARD INIT OK\n\n");
;;;645    		return E_SUCCESS;
00006e  2000              MOVS     r0,#0
                  |L4.112|
;;;646    	}
;;;647    	else
;;;648    		return E_DRVSDCARD_INITIAL_FAIL;
;;;649    }
000070  bd1c              POP      {r2-r4,pc}
                  |L4.114|
000072  4804              LDR      r0,|L4.132|
000074  e7fc              B        |L4.112|
;;;650    
                          ENDP

000076  0000              DCW      0x0000
                  |L4.120|
                          DCD      0x000493e0
                  |L4.124|
                          DCD      0x00b71b00
                  |L4.128|
                          DCD      Is_Initialized
                  |L4.132|
                          DCD      0xffff9301

                          AREA ||i.GenerateCRC||, CODE, READONLY, ALIGN=1

                  GenerateCRC PROC
;;;152    /*---------------------------------------------------------------------------------------------------------*/
;;;153    static uint32_t GenerateCRC(uint32_t u32Data, uint32_t u32GenPoly, uint32_t u32Accum)
000000  b518              PUSH     {r3,r4,lr}
;;;154    {
000002  4603              MOV      r3,r0
;;;155    	volatile uint8_t i;
;;;156    
;;;157    	u32Data <<= 8;
000004  021b              LSLS     r3,r3,#8
;;;158    	for (i=8; i>0; i--)
000006  2008              MOVS     r0,#8
000008  9000              STR      r0,[sp,#0]
00000a  e011              B        |L5.48|
                  |L5.12|
;;;159    	{
;;;160    		if ((u32Data ^ u32Accum) & 0x8000)
00000c  4618              MOV      r0,r3
00000e  4050              EORS     r0,r0,r2
000010  2401              MOVS     r4,#1
000012  03e4              LSLS     r4,r4,#15
000014  4020              ANDS     r0,r0,r4
000016  2800              CMP      r0,#0
000018  d003              BEQ      |L5.34|
;;;161    			u32Accum = (u32Accum << 1) ^ u32GenPoly;
00001a  0050              LSLS     r0,r2,#1
00001c  4048              EORS     r0,r0,r1
00001e  4602              MOV      r2,r0
000020  e000              B        |L5.36|
                  |L5.34|
;;;162    		else
;;;163    			u32Accum <<= 1;
000022  0052              LSLS     r2,r2,#1
                  |L5.36|
;;;164    		u32Data <<= 1;
000024  005b              LSLS     r3,r3,#1
000026  4668              MOV      r0,sp                 ;158
000028  7800              LDRB     r0,[r0,#0]            ;158
00002a  1e40              SUBS     r0,r0,#1              ;158
00002c  b2c4              UXTB     r4,r0                 ;158
00002e  9400              STR      r4,[sp,#0]            ;158
                  |L5.48|
000030  4668              MOV      r0,sp                 ;158
000032  7800              LDRB     r0,[r0,#0]            ;158
000034  2800              CMP      r0,#0                 ;158
000036  dce9              BGT      |L5.12|
;;;165    	}
;;;166    	return u32Accum;
000038  4610              MOV      r0,r2
;;;167    }  
00003a  bd18              POP      {r3,r4,pc}
;;;168    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP


                          AREA ||i.GetLogicSector||, CODE, READONLY, ALIGN=2

                  GetLogicSector PROC
;;;704    /*---------------------------------------------------------------------------------------------------------*/
;;;705    uint32_t GetLogicSector(void)
000000  4801              LDR      r0,|L6.8|
;;;706    {
;;;707    	return LogicSector;
000002  6800              LDR      r0,[r0,#0]  ; LogicSector
;;;708    }
000004  4770              BX       lr
;;;709    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      LogicSector

                          AREA ||i.MMC_Command_Exec||, CODE, READONLY, ALIGN=2

                  MMC_Command_Exec PROC
;;;208    /*---------------------------------------------------------------------------------------------------------*/
;;;209    uint32_t MMC_Command_Exec (uint8_t nCmd, uint32_t nArg,uint8_t *pchar, uint32_t *response)
000000  b5ff              PUSH     {r0-r7,lr}
;;;210    {
000002  b087              SUB      sp,sp,#0x1c
000004  4607              MOV      r7,r0
000006  4616              MOV      r6,r2
;;;211      	uint8_t	loopguard;
;;;212      	COMMAND current_command;      			// Local space for the command table 
;;;213      	UINT32	long_arg;               		// Local space for argument
;;;214      	static uint32_t current_blklen = 512;
;;;215      	uint32_t old_blklen = 512;     			
000008  2001              MOVS     r0,#1
00000a  0240              LSLS     r0,r0,#9
00000c  9003              STR      r0,[sp,#0xc]
;;;216      	int32_t counter = 0;     				// Byte counter for multi-byte fields;
00000e  2400              MOVS     r4,#0
;;;217      	UINT16 card_response;           			// Variable for storing card response;
;;;218      	uint8_t data_resp;      				// Variable for storing data response;
;;;219      	UINT16 dummy_CRC;      					// Dummy variable for storing CRC field;
;;;220    
;;;221      	card_response.i = 0;						  
000010  2100              MOVS     r1,#0
000012  9102              STR      r1,[sp,#8]
;;;222                                         
;;;223      	current_command = command_list[nCmd];// Retrieve desired command table entry
000014  2006              MOVS     r0,#6
000016  4378              MULS     r0,r7,r0
000018  49f9              LDR      r1,|L7.1024|
00001a  5c09              LDRB     r1,[r1,r0]
00001c  4668              MOV      r0,sp
00001e  7501              STRB     r1,[r0,#0x14]
000020  2006              MOVS     r0,#6
000022  4378              MULS     r0,r7,r0
000024  49f6              LDR      r1,|L7.1024|
000026  1840              ADDS     r0,r0,r1
000028  7841              LDRB     r1,[r0,#1]
00002a  4668              MOV      r0,sp
00002c  7541              STRB     r1,[r0,#0x15]
00002e  2006              MOVS     r0,#6
000030  4378              MULS     r0,r7,r0
000032  49f3              LDR      r1,|L7.1024|
000034  1840              ADDS     r0,r0,r1
000036  7881              LDRB     r1,[r0,#2]
000038  4668              MOV      r0,sp
00003a  7581              STRB     r1,[r0,#0x16]
00003c  2006              MOVS     r0,#6
00003e  4378              MULS     r0,r7,r0
000040  49ef              LDR      r1,|L7.1024|
000042  1840              ADDS     r0,r0,r1
000044  78c1              LDRB     r1,[r0,#3]
000046  4668              MOV      r0,sp
000048  75c1              STRB     r1,[r0,#0x17]
00004a  2006              MOVS     r0,#6
00004c  4378              MULS     r0,r7,r0
00004e  49ec              LDR      r1,|L7.1024|
000050  1840              ADDS     r0,r0,r1
000052  7901              LDRB     r1,[r0,#4]
000054  4668              MOV      r0,sp
000056  7601              STRB     r1,[r0,#0x18]
000058  2006              MOVS     r0,#6
00005a  4378              MULS     r0,r7,r0
00005c  49e8              LDR      r1,|L7.1024|
00005e  1840              ADDS     r0,r0,r1
000060  7941              LDRB     r1,[r0,#5]
000062  4668              MOV      r0,sp
000064  7641              STRB     r1,[r0,#0x19]
;;;224    											// from code space;
;;;225    	if(current_command.command_byte & 0x80)	// Detect ACMD
000066  7d00              LDRB     r0,[r0,#0x14]
000068  2180              MOVS     r1,#0x80
00006a  4008              ANDS     r0,r0,r1
00006c  2800              CMP      r0,#0
00006e  d009              BEQ      |L7.132|
;;;226    	{
;;;227    		if(MMC_Command_Exec(APP_CMD,EMPTY,EMPTY,response)==FALSE)//Send APP_CMD
000070  2200              MOVS     r2,#0
000072  4611              MOV      r1,r2
000074  2019              MOVS     r0,#0x19
000076  9b0a              LDR      r3,[sp,#0x28]
000078  f7fffffe          BL       MMC_Command_Exec
00007c  2800              CMP      r0,#0
00007e  d101              BNE      |L7.132|
                  |L7.128|
;;;228    			return FALSE;
;;;229    	}
;;;230    
;;;231    
;;;232      	DrvSPI_SetSS(eDRVSPI_PORT1, eDRVSPI_SS0);	// CS = 0
;;;233      	SingleWrite(0xFF);
;;;234      	SingleWrite((current_command.command_byte | 0x40)&0x7f);
;;;235    	DBG_PRINTF("CMD:%d,",current_command.command_byte&0x7f);
;;;236    
;;;237      	long_arg.l = nArg;              	// Make argument byte addressable;
;;;238                                          		// If current command changes block
;;;239                                          		// length, update block length variable
;;;240                                          		// to keep track;
;;;241    		                                    // Command byte = 16 means that a set
;;;242    		                                    // block length command is taking place
;;;243    		                                    // and block length variable must be
;;;244    		                                    // set;
;;;245      	if(current_command.command_byte == 16) 
;;;246    	{current_blklen = nArg;} 
;;;247                                           // Command byte = 9 or 10 means that a
;;;248                                           // 16-byte register value is being read
;;;249                                           // from the card, block length must be
;;;250                                           // set to 16 bytes, and restored at the
;;;251                                           // end of the transfer;
;;;252      	if((current_command.command_byte == 9)||(current_command.command_byte == 10)) 
;;;253      	{
;;;254        	old_blklen = current_blklen;     // Command is a GET_CSD or GET_CID,
;;;255        	current_blklen = 16;             // set block length to 16-bytes;
;;;256      	}
;;;257                                           // If an argument is required, transmit
;;;258                                           // one, otherwise transmit 4 bytes of
;;;259                                           // 0x00;
;;;260      	if(current_command.arg_required == YES)
;;;261      	{
;;;262    		dummy_CRC.i = GenerateCRC((current_command.command_byte | 0x40), 0x1200, 0);
;;;263        	for(counter=3;counter>=0;counter--) 
;;;264    		{
;;;265    			SingleWrite(long_arg.b[counter]);
;;;266    			dummy_CRC.i = GenerateCRC(long_arg.b[counter], 0x1200, dummy_CRC.i);
;;;267    
;;;268    		}
;;;269    		dummy_CRC.i = (dummy_CRC.i >> 8)| 0x01;
;;;270    		SingleWrite(dummy_CRC.b[0]);
;;;271      	} else 
;;;272    	{
;;;273        	counter = 0;
;;;274        	while(counter <= 3) 
;;;275    		{
;;;276        		SingleWrite(0x00);
;;;277    			counter++;
;;;278    		}
;;;279    		SingleWrite(current_command.CRC);
;;;280      	}
;;;281    	
;;;282    											// The command table entry will indicate
;;;283                                           		// what type of response to expect for
;;;284                                           		// a given command;  The following 
;;;285                                           		// conditional handles the MMC response;
;;;286    	if(current_command.response == R1)  	// Read the R1 response from the card;
;;;287    	{
;;;288      		loopguard=0;
;;;289        	do{
;;;290    			card_response.b[0] = SingleWrite(0xFF);
;;;291          		if(!++loopguard) break;
;;;292        	}while((card_response.b[0] & BUSY_BIT));
;;;293    		DBG_PRINTF("R1:0x%x, counter:%d\n",card_response.b[0],loopguard);
;;;294    		if(!loopguard){BACK_FROM_ERROR;}
;;;295    		*response=card_response.b[0];
;;;296        }                                     
;;;297        else if(current_command.response == R1b)// Read the R1b response; 
;;;298    	{
;;;299        	loopguard = 0;	
;;;300          	do {
;;;301    			card_response.b[0] =  SingleWrite(0xFF);
;;;302    			if(!++loopguard) break;
;;;303          	}while((card_response.b[0] & BUSY_BIT));
;;;304    		while((SingleWrite(0xFF)&0xFF) == 0x00);
;;;305    	}
;;;306    	else if(current_command.response == R2) 
;;;307    	{
;;;308        	loopguard=0;
;;;309          	do{
;;;310    		    card_response.b[0] = SingleWrite(0xFF);
;;;311            	if(!++loopguard) break;
;;;312          	}while((card_response.b[0] & BUSY_BIT));
;;;313    	    card_response.b[1] = SingleWrite(0xFF);
;;;314    		DBG_PRINTF("R2:0x%x, counter:%d\n",card_response.i,loopguard);
;;;315    		if(!loopguard) { BACK_FROM_ERROR; }
;;;316    		*response=card_response.i;		
;;;317        }else if(current_command.response == R3)  
;;;318    	{                               // Read R3 response;
;;;319        	loopguard=0;
;;;320          	do {
;;;321            	card_response.b[0] = SingleWrite(0xFF);
;;;322    		    if(!++loopguard) break;
;;;323          	} while((card_response.b[0] & BUSY_BIT));
;;;324      		DBG_PRINTF("R3:0x%x, counter:%d\n",card_response.b[0],loopguard);
;;;325      	  	if(!loopguard) { BACK_FROM_ERROR; }
;;;326          	counter = 0;
;;;327          	while(counter <= 3)              // Read next three bytes and store them
;;;328          	{                                // in local memory;  These bytes make up
;;;329            	counter++;                    // the Operating Conditions Register
;;;330    	      	*pchar++ = SingleWrite(0xFF);
;;;331    	    }
;;;332    		*response=card_response.b[0];
;;;333        }else  
;;;334    	{                               // Read R7 response;
;;;335        	loopguard=0;
;;;336          	do {
;;;337            	card_response.b[0] = SingleWrite(0xFF);
;;;338    		    if(!++loopguard) break;
;;;339          	} while((card_response.b[0] & BUSY_BIT));
;;;340      		DBG_PRINTF("R7:0x%x, counter:%d\n",card_response.b[0],loopguard);
;;;341      	  	if(!loopguard) { BACK_FROM_ERROR; }
;;;342          	counter = 0;
;;;343          	while(counter <= 3)              // Read next three bytes and store them
;;;344          	{                                // in local memory;  These bytes make up
;;;345            	counter++;                    // the Operating Conditions Register
;;;346    	      	*pchar++ = SingleWrite(0xFF);
;;;347    	    }
;;;348    		*response=card_response.b[0];
;;;349        }
;;;350    
;;;351    
;;;352    	switch(current_command.trans_type)  // This conditional handles all data 
;;;353        {                                   // operations;  The command entry
;;;354                                           // determines what type, if any, data
;;;355                                           // operations need to occur;
;;;356    		case RDB:                         // Read data from the MMC;
;;;357      			loopguard = 0;
;;;358    
;;;359    	     	while((SingleWrite(0xFF)&0xFF)!=START_SBR) 
;;;360    			{
;;;361        	  		if(!++loopguard) {BACK_FROM_ERROR;}
;;;362    				DrvSYS_Delay(1);
;;;363    	      	}		
;;;364              	counter = 0;                  	// Reset byte counter;
;;;365                                           		// Read <current_blklen> bytes;
;;;366    
;;;367    			SPI1->TX[0] = 0xFFFFFFFF;
;;;368    			if(pchar)
;;;369    			{
;;;370    				/*Set pchar+counter is a multiple of 4*/
;;;371    				while(((uint32_t)pchar+counter)&0x03)
;;;372    				{
;;;373    					SPI1->CNTRL.GO_BUSY = 1;
;;;374    					while(SPI1->CNTRL.GO_BUSY);
;;;375    					*(pchar+counter++)=SPI1->RX[0];
;;;376    				}
;;;377    				/*Read data by word*/
;;;378    				SPI1->CNTRL.TX_BIT_LEN=0; 	
;;;379    				SPI1->CNTRL.REORDER=2;
;;;380    				SPI1->CNTRL.TX_NUM=1;				
;;;381    				for (; counter<current_blklen-7; )
;;;382    				{
;;;383    
;;;384    					SPI1->CNTRL.GO_BUSY = 1;
;;;385    					while(SPI1->CNTRL.GO_BUSY);
;;;386    					*((uint32_t*)(pchar+counter))=SPI1->RX[0];
;;;387    					counter+=4;
;;;388    					*((uint32_t*)(pchar+counter))=SPI1->RX[1];
;;;389    					counter+=4;				
;;;390    				}
;;;391    				SPI1->CNTRL.TX_NUM=0;
;;;392    				SPI1->CNTRL.REORDER=0;
;;;393    				SPI1->CNTRL.TX_BIT_LEN=8;
;;;394    				/*Read data by byte*/
;;;395    				for (; counter<current_blklen; counter++)
;;;396    				{
;;;397    					SPI1->CNTRL.GO_BUSY = 1;
;;;398    					while(SPI1->CNTRL.GO_BUSY);
;;;399    					*(pchar+counter)=SPI1->RX[0];				
;;;400    				}
;;;401    
;;;402    			}else
;;;403    			{
;;;404    				for (; counter<current_blklen; counter++)
;;;405    				{ 
;;;406    					SPI1->CNTRL.GO_BUSY = 1;
;;;407    					while(SPI1->CNTRL.GO_BUSY);									
;;;408    				}
;;;409    			}
;;;410               	dummy_CRC.b[1] = SingleWrite(0xFF);	// After all data is read, read the two
;;;411               	dummy_CRC.b[0] = SingleWrite(0xFF);	// CRC bytes;  These bytes are not used
;;;412                                   					// in this mode, but the placeholders 
;;;413                       								// must be read anyway;			      
;;;414              	break;
;;;415    		case RD:                         // Read data from the MMC;
;;;416      			loopguard = 0;
;;;417    
;;;418    	     	while((SingleWrite(0xFF)&0xFF)!=START_SBR) 
;;;419    			{
;;;420        	  		if(!++loopguard) {BACK_FROM_ERROR;}
;;;421    	      	}		
;;;422              	counter = 0;                  	// Reset byte counter;
;;;423                                           		// Read <current_blklen> bytes;
;;;424    			if(pchar)
;;;425    			{
;;;426    				for (counter=0; counter<current_blklen; counter++)
;;;427    				{ 
;;;428    					SPI1->TX[0] = 0xFF;
;;;429    					SPI1->CNTRL.GO_BUSY = 1;
;;;430    					while(SPI1->CNTRL.GO_BUSY);
;;;431    					*(pchar+counter)=SPI1->RX[0];										
;;;432    				}
;;;433    			}else
;;;434    			{
;;;435    				for (counter=0; counter<current_blklen; counter++)
;;;436    				{ 
;;;437    					SPI1->TX[0] = 0xFF;
;;;438    					SPI1->CNTRL.GO_BUSY = 1;
;;;439    					while(SPI1->CNTRL.GO_BUSY);									
;;;440    				}
;;;441    			}
;;;442               	dummy_CRC.b[1] = SingleWrite(0xFF);	// After all data is read, read the two
;;;443               	dummy_CRC.b[0] = SingleWrite(0xFF);	// CRC bytes;  These bytes are not used
;;;444                                   					// in this mode, but the placeholders 
;;;445                       								// must be read anyway;			      
;;;446              	break;
;;;447    
;;;448    		case WR: 			
;;;449    			SingleWrite(0xFF);
;;;450    			SingleWrite(START_SBW);
;;;451              
;;;452    			for (counter=0; counter<current_blklen; counter++)
;;;453    			{
;;;454    				SPI1->TX[0] = *(pchar+counter);
;;;455    				SPI1->CNTRL.GO_BUSY = 1;
;;;456    				dummy_CRC.i = GenerateCRC(*(pchar+counter), 0x1021, dummy_CRC.i);				
;;;457    				while(SPI1->CNTRL.GO_BUSY);
;;;458    			}
;;;459    			SingleWrite(dummy_CRC.b[1]);
;;;460    			SingleWrite(dummy_CRC.b[0]);
;;;461    	
;;;462            	loopguard = 0;
;;;463    	        do                            // Read Data Response from card;
;;;464    	        {  
;;;465    	          	data_resp = SingleWrite(0xFF);
;;;466    	          	if(!++loopguard) break;
;;;467    	        }while((data_resp & DATA_RESP_MASK) != 0x01);	// When bit 0 of the MMC response
;;;468    	                                       					// is clear, a valid data response
;;;469    	                                       					// has been received;
;;;470    	        
;;;471    	        if(!loopguard) { BACK_FROM_ERROR; }
;;;472    
;;;473    
;;;474    	        while((SingleWrite(0xFF)&0xFF)!=0xFF);//Wait for Busy
;;;475    			SingleWrite(0xFF);	        
;;;476    	        break;
;;;477    		default: break;
;;;478    	}
;;;479        DrvSPI_ClrSS(eDRVSPI_PORT1, eDRVSPI_SS0);	// CS = 1
;;;480        if((current_command.command_byte == 9)||(current_command.command_byte == 10)) {
;;;481        	current_blklen = old_blklen;    
;;;482    	}
;;;483    	DBG_PRINTF("True\n");
;;;484        return TRUE;
;;;485    }
000080  b00b              ADD      sp,sp,#0x2c
000082  bdf0              POP      {r4-r7,pc}
                  |L7.132|
000084  2101              MOVS     r1,#1                 ;232
000086  4608              MOV      r0,r1                 ;232
000088  f7fffffe          BL       DrvSPI_SetSS
00008c  20ff              MOVS     r0,#0xff              ;233
00008e  f7fffffe          BL       SingleWrite
000092  4669              MOV      r1,sp                 ;234
000094  7d09              LDRB     r1,[r1,#0x14]         ;234
000096  2240              MOVS     r2,#0x40              ;234
000098  4311              ORRS     r1,r1,r2              ;234
00009a  0648              LSLS     r0,r1,#25             ;234
00009c  0e40              LSRS     r0,r0,#25             ;234
00009e  f7fffffe          BL       SingleWrite
0000a2  9808              LDR      r0,[sp,#0x20]         ;237
0000a4  9004              STR      r0,[sp,#0x10]         ;237
0000a6  4669              MOV      r1,sp                 ;245
0000a8  7d08              LDRB     r0,[r1,#0x14]         ;245
0000aa  2810              CMP      r0,#0x10              ;245
0000ac  d102              BNE      |L7.180|
0000ae  49d5              LDR      r1,|L7.1028|
0000b0  9808              LDR      r0,[sp,#0x20]         ;246
0000b2  6008              STR      r0,[r1,#0]            ;246  ; current_blklen
                  |L7.180|
0000b4  4668              MOV      r0,sp                 ;252
0000b6  7d00              LDRB     r0,[r0,#0x14]         ;252
0000b8  2809              CMP      r0,#9                 ;252
0000ba  d003              BEQ      |L7.196|
0000bc  4668              MOV      r0,sp                 ;252
0000be  7d00              LDRB     r0,[r0,#0x14]         ;252
0000c0  280a              CMP      r0,#0xa               ;252
0000c2  d105              BNE      |L7.208|
                  |L7.196|
0000c4  48cf              LDR      r0,|L7.1028|
0000c6  6800              LDR      r0,[r0,#0]            ;254  ; current_blklen
0000c8  9003              STR      r0,[sp,#0xc]          ;254
0000ca  2010              MOVS     r0,#0x10              ;255
0000cc  49cd              LDR      r1,|L7.1028|
0000ce  6008              STR      r0,[r1,#0]            ;255  ; current_blklen
                  |L7.208|
0000d0  4668              MOV      r0,sp                 ;260
0000d2  7d40              LDRB     r0,[r0,#0x15]         ;260
0000d4  2801              CMP      r0,#1                 ;260
0000d6  d129              BNE      |L7.300|
0000d8  4669              MOV      r1,sp                 ;262
0000da  7d09              LDRB     r1,[r1,#0x14]         ;262
0000dc  2240              MOVS     r2,#0x40              ;262
0000de  4311              ORRS     r1,r1,r2              ;262
0000e0  4608              MOV      r0,r1                 ;262
0000e2  2200              MOVS     r2,#0                 ;262
0000e4  2109              MOVS     r1,#9                 ;262
0000e6  0249              LSLS     r1,r1,#9              ;262
0000e8  f7fffffe          BL       GenerateCRC
0000ec  b280              UXTH     r0,r0                 ;262
0000ee  9000              STR      r0,[sp,#0]            ;262
0000f0  2403              MOVS     r4,#3                 ;263
0000f2  e00e              B        |L7.274|
                  |L7.244|
0000f4  a904              ADD      r1,sp,#0x10           ;265
0000f6  5d08              LDRB     r0,[r1,r4]            ;265
0000f8  f7fffffe          BL       SingleWrite
0000fc  4669              MOV      r1,sp                 ;266
0000fe  880a              LDRH     r2,[r1,#0]            ;266
000100  a904              ADD      r1,sp,#0x10           ;266
000102  5d08              LDRB     r0,[r1,r4]            ;266
000104  2109              MOVS     r1,#9                 ;266
000106  0249              LSLS     r1,r1,#9              ;266
000108  f7fffffe          BL       GenerateCRC
00010c  b280              UXTH     r0,r0                 ;266
00010e  9000              STR      r0,[sp,#0]            ;266
000110  1e64              SUBS     r4,r4,#1              ;263
                  |L7.274|
000112  2c00              CMP      r4,#0                 ;263
000114  daee              BGE      |L7.244|
000116  4668              MOV      r0,sp                 ;269
000118  8800              LDRH     r0,[r0,#0]            ;269
00011a  1201              ASRS     r1,r0,#8              ;269
00011c  2001              MOVS     r0,#1                 ;269
00011e  4301              ORRS     r1,r1,r0              ;269
000120  9100              STR      r1,[sp,#0]            ;269
000122  4669              MOV      r1,sp                 ;270
000124  7808              LDRB     r0,[r1,#0]            ;270
000126  f7fffffe          BL       SingleWrite
00012a  e00b              B        |L7.324|
                  |L7.300|
00012c  2400              MOVS     r4,#0                 ;273
00012e  e003              B        |L7.312|
                  |L7.304|
000130  2000              MOVS     r0,#0                 ;276
000132  f7fffffe          BL       SingleWrite
000136  1c64              ADDS     r4,r4,#1              ;277
                  |L7.312|
000138  2c03              CMP      r4,#3                 ;274
00013a  ddf9              BLE      |L7.304|
00013c  4669              MOV      r1,sp                 ;279
00013e  7d88              LDRB     r0,[r1,#0x16]         ;279
000140  f7fffffe          BL       SingleWrite
                  |L7.324|
000144  4668              MOV      r0,sp                 ;286
000146  7e00              LDRB     r0,[r0,#0x18]         ;286
000148  2800              CMP      r0,#0                 ;286
00014a  d122              BNE      |L7.402|
00014c  2500              MOVS     r5,#0                 ;288
00014e  bf00              NOP                            ;289
                  |L7.336|
000150  20ff              MOVS     r0,#0xff              ;290
000152  f7fffffe          BL       SingleWrite
000156  4669              MOV      r1,sp                 ;290
000158  7208              STRB     r0,[r1,#8]            ;290
00015a  1c68              ADDS     r0,r5,#1              ;291
00015c  b2c0              UXTB     r0,r0                 ;291
00015e  1e05              SUBS     r5,r0,#0              ;291
000160  d100              BNE      |L7.356|
000162  e005              B        |L7.368|
                  |L7.356|
000164  4668              MOV      r0,sp                 ;292
000166  7a00              LDRB     r0,[r0,#8]            ;292
000168  2180              MOVS     r1,#0x80              ;292
00016a  4008              ANDS     r0,r0,r1              ;292
00016c  2800              CMP      r0,#0                 ;292
00016e  d1ef              BNE      |L7.336|
                  |L7.368|
000170  bf00              NOP                            ;291
000172  2d00              CMP      r5,#0                 ;294
000174  d108              BNE      |L7.392|
000176  20ff              MOVS     r0,#0xff              ;294
000178  f7fffffe          BL       SingleWrite
00017c  2101              MOVS     r1,#1                 ;294
00017e  4608              MOV      r0,r1                 ;294
000180  f7fffffe          BL       DrvSPI_ClrSS
000184  2000              MOVS     r0,#0                 ;294
000186  e77b              B        |L7.128|
                  |L7.392|
000188  4668              MOV      r0,sp                 ;295
00018a  7a01              LDRB     r1,[r0,#8]            ;295
00018c  980a              LDR      r0,[sp,#0x28]         ;295
00018e  6001              STR      r1,[r0,#0]            ;295
000190  e0a7              B        |L7.738|
                  |L7.402|
000192  4668              MOV      r0,sp                 ;297
000194  7e00              LDRB     r0,[r0,#0x18]         ;297
000196  2801              CMP      r0,#1                 ;297
000198  d11a              BNE      |L7.464|
00019a  2500              MOVS     r5,#0                 ;299
00019c  bf00              NOP                            ;300
                  |L7.414|
00019e  20ff              MOVS     r0,#0xff              ;301
0001a0  f7fffffe          BL       SingleWrite
0001a4  4669              MOV      r1,sp                 ;301
0001a6  7208              STRB     r0,[r1,#8]            ;301
0001a8  1c68              ADDS     r0,r5,#1              ;302
0001aa  b2c0              UXTB     r0,r0                 ;302
0001ac  1e05              SUBS     r5,r0,#0              ;302
0001ae  d100              BNE      |L7.434|
0001b0  e005              B        |L7.446|
                  |L7.434|
0001b2  4668              MOV      r0,sp                 ;303
0001b4  7a00              LDRB     r0,[r0,#8]            ;303
0001b6  2180              MOVS     r1,#0x80              ;303
0001b8  4008              ANDS     r0,r0,r1              ;303
0001ba  2800              CMP      r0,#0                 ;303
0001bc  d1ef              BNE      |L7.414|
                  |L7.446|
0001be  bf00              NOP                            ;302
0001c0  bf00              NOP                            ;304
                  |L7.450|
0001c2  20ff              MOVS     r0,#0xff              ;304
0001c4  f7fffffe          BL       SingleWrite
0001c8  b2c0              UXTB     r0,r0                 ;304
0001ca  2800              CMP      r0,#0                 ;304
0001cc  d0f9              BEQ      |L7.450|
0001ce  e088              B        |L7.738|
                  |L7.464|
0001d0  4668              MOV      r0,sp                 ;306
0001d2  7e00              LDRB     r0,[r0,#0x18]         ;306
0001d4  2802              CMP      r0,#2                 ;306
0001d6  d127              BNE      |L7.552|
0001d8  2500              MOVS     r5,#0                 ;308
0001da  bf00              NOP                            ;309
                  |L7.476|
0001dc  20ff              MOVS     r0,#0xff              ;310
0001de  f7fffffe          BL       SingleWrite
0001e2  4669              MOV      r1,sp                 ;310
0001e4  7208              STRB     r0,[r1,#8]            ;310
0001e6  1c68              ADDS     r0,r5,#1              ;311
0001e8  b2c0              UXTB     r0,r0                 ;311
0001ea  1e05              SUBS     r5,r0,#0              ;311
0001ec  d100              BNE      |L7.496|
0001ee  e005              B        |L7.508|
                  |L7.496|
0001f0  4668              MOV      r0,sp                 ;312
0001f2  7a00              LDRB     r0,[r0,#8]            ;312
0001f4  2180              MOVS     r1,#0x80              ;312
0001f6  4008              ANDS     r0,r0,r1              ;312
0001f8  2800              CMP      r0,#0                 ;312
0001fa  d1ef              BNE      |L7.476|
                  |L7.508|
0001fc  bf00              NOP                            ;311
0001fe  20ff              MOVS     r0,#0xff              ;313
000200  f7fffffe          BL       SingleWrite
000204  4669              MOV      r1,sp                 ;313
000206  7248              STRB     r0,[r1,#9]            ;313
000208  2d00              CMP      r5,#0                 ;315
00020a  d108              BNE      |L7.542|
00020c  20ff              MOVS     r0,#0xff              ;315
00020e  f7fffffe          BL       SingleWrite
000212  2101              MOVS     r1,#1                 ;315
000214  4608              MOV      r0,r1                 ;315
000216  f7fffffe          BL       DrvSPI_ClrSS
00021a  2000              MOVS     r0,#0                 ;315
00021c  e730              B        |L7.128|
                  |L7.542|
00021e  4668              MOV      r0,sp                 ;316
000220  8901              LDRH     r1,[r0,#8]            ;316
000222  980a              LDR      r0,[sp,#0x28]         ;316
000224  6001              STR      r1,[r0,#0]            ;316
000226  e05c              B        |L7.738|
                  |L7.552|
000228  4668              MOV      r0,sp                 ;317
00022a  7e00              LDRB     r0,[r0,#0x18]         ;317
00022c  2803              CMP      r0,#3                 ;317
00022e  d12c              BNE      |L7.650|
000230  2500              MOVS     r5,#0                 ;319
000232  bf00              NOP                            ;320
                  |L7.564|
000234  20ff              MOVS     r0,#0xff              ;321
000236  f7fffffe          BL       SingleWrite
00023a  4669              MOV      r1,sp                 ;321
00023c  7208              STRB     r0,[r1,#8]            ;321
00023e  1c68              ADDS     r0,r5,#1              ;322
000240  b2c0              UXTB     r0,r0                 ;322
000242  1e05              SUBS     r5,r0,#0              ;322
000244  d100              BNE      |L7.584|
000246  e005              B        |L7.596|
                  |L7.584|
000248  4668              MOV      r0,sp                 ;323
00024a  7a00              LDRB     r0,[r0,#8]            ;323
00024c  2180              MOVS     r1,#0x80              ;323
00024e  4008              ANDS     r0,r0,r1              ;323
000250  2800              CMP      r0,#0                 ;323
000252  d1ef              BNE      |L7.564|
                  |L7.596|
000254  bf00              NOP                            ;322
000256  2d00              CMP      r5,#0                 ;325
000258  d108              BNE      |L7.620|
00025a  20ff              MOVS     r0,#0xff              ;325
00025c  f7fffffe          BL       SingleWrite
000260  2101              MOVS     r1,#1                 ;325
000262  4608              MOV      r0,r1                 ;325
000264  f7fffffe          BL       DrvSPI_ClrSS
000268  2000              MOVS     r0,#0                 ;325
00026a  e709              B        |L7.128|
                  |L7.620|
00026c  2400              MOVS     r4,#0                 ;326
00026e  e005              B        |L7.636|
                  |L7.624|
000270  1c64              ADDS     r4,r4,#1              ;329
000272  20ff              MOVS     r0,#0xff              ;330
000274  f7fffffe          BL       SingleWrite
000278  7030              STRB     r0,[r6,#0]            ;330
00027a  1c76              ADDS     r6,r6,#1              ;330
                  |L7.636|
00027c  2c03              CMP      r4,#3                 ;327
00027e  ddf7              BLE      |L7.624|
000280  4668              MOV      r0,sp                 ;332
000282  7a01              LDRB     r1,[r0,#8]            ;332
000284  980a              LDR      r0,[sp,#0x28]         ;332
000286  6001              STR      r1,[r0,#0]            ;332
000288  e02b              B        |L7.738|
                  |L7.650|
00028a  2500              MOVS     r5,#0                 ;335
00028c  bf00              NOP                            ;336
                  |L7.654|
00028e  20ff              MOVS     r0,#0xff              ;337
000290  f7fffffe          BL       SingleWrite
000294  4669              MOV      r1,sp                 ;337
000296  7208              STRB     r0,[r1,#8]            ;337
000298  1c68              ADDS     r0,r5,#1              ;338
00029a  b2c0              UXTB     r0,r0                 ;338
00029c  1e05              SUBS     r5,r0,#0              ;338
00029e  d100              BNE      |L7.674|
0002a0  e005              B        |L7.686|
                  |L7.674|
0002a2  4668              MOV      r0,sp                 ;339
0002a4  7a00              LDRB     r0,[r0,#8]            ;339
0002a6  2180              MOVS     r1,#0x80              ;339
0002a8  4008              ANDS     r0,r0,r1              ;339
0002aa  2800              CMP      r0,#0                 ;339
0002ac  d1ef              BNE      |L7.654|
                  |L7.686|
0002ae  bf00              NOP                            ;338
0002b0  2d00              CMP      r5,#0                 ;341
0002b2  d108              BNE      |L7.710|
0002b4  20ff              MOVS     r0,#0xff              ;341
0002b6  f7fffffe          BL       SingleWrite
0002ba  2101              MOVS     r1,#1                 ;341
0002bc  4608              MOV      r0,r1                 ;341
0002be  f7fffffe          BL       DrvSPI_ClrSS
0002c2  2000              MOVS     r0,#0                 ;341
0002c4  e6dc              B        |L7.128|
                  |L7.710|
0002c6  2400              MOVS     r4,#0                 ;342
0002c8  e005              B        |L7.726|
                  |L7.714|
0002ca  1c64              ADDS     r4,r4,#1              ;345
0002cc  20ff              MOVS     r0,#0xff              ;346
0002ce  f7fffffe          BL       SingleWrite
0002d2  7030              STRB     r0,[r6,#0]            ;346
0002d4  1c76              ADDS     r6,r6,#1              ;346
                  |L7.726|
0002d6  2c03              CMP      r4,#3                 ;343
0002d8  ddf7              BLE      |L7.714|
0002da  4668              MOV      r0,sp                 ;348
0002dc  7a01              LDRB     r1,[r0,#8]            ;348
0002de  980a              LDR      r0,[sp,#0x28]         ;348
0002e0  6001              STR      r1,[r0,#0]            ;348
                  |L7.738|
0002e2  4668              MOV      r0,sp                 ;352
0002e4  7dc0              LDRB     r0,[r0,#0x17]         ;352
0002e6  2801              CMP      r0,#1                 ;352
0002e8  d07e              BEQ      |L7.1000|
0002ea  2802              CMP      r0,#2                 ;352
0002ec  d07d              BEQ      |L7.1002|
0002ee  2803              CMP      r0,#3                 ;352
0002f0  d17c              BNE      |L7.1004|
0002f2  2500              MOVS     r5,#0                 ;357
0002f4  e00f              B        |L7.790|
                  |L7.758|
0002f6  1c68              ADDS     r0,r5,#1              ;361
0002f8  b2c0              UXTB     r0,r0                 ;361
0002fa  1e05              SUBS     r5,r0,#0              ;361
0002fc  d108              BNE      |L7.784|
0002fe  20ff              MOVS     r0,#0xff              ;361
000300  f7fffffe          BL       SingleWrite
000304  2101              MOVS     r1,#1                 ;361
000306  4608              MOV      r0,r1                 ;361
000308  f7fffffe          BL       DrvSPI_ClrSS
00030c  2000              MOVS     r0,#0                 ;361
00030e  e6b7              B        |L7.128|
                  |L7.784|
000310  2001              MOVS     r0,#1                 ;362
000312  f7fffffe          BL       DrvSYS_Delay
                  |L7.790|
000316  20ff              MOVS     r0,#0xff              ;359
000318  f7fffffe          BL       SingleWrite
00031c  b2c0              UXTB     r0,r0                 ;359
00031e  28fe              CMP      r0,#0xfe              ;359
000320  d1e9              BNE      |L7.758|
000322  2400              MOVS     r4,#0                 ;364
000324  1e60              SUBS     r0,r4,#1              ;367
000326  4938              LDR      r1,|L7.1032|
000328  6208              STR      r0,[r1,#0x20]         ;367
00032a  2e00              CMP      r6,#0                 ;368
00032c  d067              BEQ      |L7.1022|
00032e  e012              B        |L7.854|
                  |L7.816|
000330  4835              LDR      r0,|L7.1032|
000332  6800              LDR      r0,[r0,#0]            ;373
000334  0840              LSRS     r0,r0,#1              ;373
000336  0040              LSLS     r0,r0,#1              ;373
000338  1c40              ADDS     r0,r0,#1              ;373
00033a  4933              LDR      r1,|L7.1032|
00033c  6008              STR      r0,[r1,#0]            ;373
00033e  bf00              NOP                            ;374
                  |L7.832|
000340  4831              LDR      r0,|L7.1032|
000342  6800              LDR      r0,[r0,#0]            ;374
000344  07c0              LSLS     r0,r0,#31             ;374
000346  0fc0              LSRS     r0,r0,#31             ;374
000348  2800              CMP      r0,#0                 ;374
00034a  d1f9              BNE      |L7.832|
00034c  482e              LDR      r0,|L7.1032|
00034e  6900              LDR      r0,[r0,#0x10]         ;375
000350  4621              MOV      r1,r4                 ;375
000352  1c64              ADDS     r4,r4,#1              ;375
000354  5470              STRB     r0,[r6,r1]            ;375
                  |L7.854|
000356  1930              ADDS     r0,r6,r4              ;371
000358  0780              LSLS     r0,r0,#30             ;371
00035a  0f80              LSRS     r0,r0,#30             ;371
00035c  2800              CMP      r0,#0                 ;371
00035e  d1e7              BNE      |L7.816|
000360  4829              LDR      r0,|L7.1032|
000362  6800              LDR      r0,[r0,#0]            ;378
000364  21f8              MOVS     r1,#0xf8              ;378
000366  4388              BICS     r0,r0,r1              ;378
000368  4927              LDR      r1,|L7.1032|
00036a  6008              STR      r0,[r1,#0]            ;378
00036c  4608              MOV      r0,r1                 ;379
00036e  6800              LDR      r0,[r0,#0]            ;379
000370  2103              MOVS     r1,#3                 ;379
000372  04c9              LSLS     r1,r1,#19             ;379
000374  4388              BICS     r0,r0,r1              ;379
000376  2101              MOVS     r1,#1                 ;379
000378  0509              LSLS     r1,r1,#20             ;379
00037a  1840              ADDS     r0,r0,r1              ;379
00037c  4922              LDR      r1,|L7.1032|
00037e  6008              STR      r0,[r1,#0]            ;379
000380  4608              MOV      r0,r1                 ;380
000382  6800              LDR      r0,[r0,#0]            ;380
000384  2103              MOVS     r1,#3                 ;380
000386  0209              LSLS     r1,r1,#8              ;380
000388  4388              BICS     r0,r0,r1              ;380
00038a  30ff              ADDS     r0,r0,#0xff           ;380
00038c  3001              ADDS     r0,#1                 ;380
00038e  491e              LDR      r1,|L7.1032|
000390  6008              STR      r0,[r1,#0]            ;380
000392  e015              B        |L7.960|
                  |L7.916|
000394  481c              LDR      r0,|L7.1032|
000396  6800              LDR      r0,[r0,#0]            ;384
000398  0840              LSRS     r0,r0,#1              ;384
00039a  0040              LSLS     r0,r0,#1              ;384
00039c  1c40              ADDS     r0,r0,#1              ;384
00039e  491a              LDR      r1,|L7.1032|
0003a0  6008              STR      r0,[r1,#0]            ;384
0003a2  bf00              NOP                            ;385
                  |L7.932|
0003a4  4818              LDR      r0,|L7.1032|
0003a6  6800              LDR      r0,[r0,#0]            ;385
0003a8  07c0              LSLS     r0,r0,#31             ;385
0003aa  0fc0              LSRS     r0,r0,#31             ;385
0003ac  2800              CMP      r0,#0                 ;385
0003ae  d1f9              BNE      |L7.932|
0003b0  4815              LDR      r0,|L7.1032|
0003b2  6900              LDR      r0,[r0,#0x10]         ;386
0003b4  5130              STR      r0,[r6,r4]            ;386
0003b6  1d24              ADDS     r4,r4,#4              ;387
0003b8  4813              LDR      r0,|L7.1032|
0003ba  6940              LDR      r0,[r0,#0x14]         ;388
0003bc  5130              STR      r0,[r6,r4]            ;388
0003be  1d24              ADDS     r4,r4,#4              ;389
                  |L7.960|
0003c0  4810              LDR      r0,|L7.1028|
0003c2  6800              LDR      r0,[r0,#0]            ;381  ; current_blklen
0003c4  1fc0              SUBS     r0,r0,#7              ;381
0003c6  42a0              CMP      r0,r4                 ;381
0003c8  d8e4              BHI      |L7.916|
0003ca  480f              LDR      r0,|L7.1032|
0003cc  6800              LDR      r0,[r0,#0]            ;391
0003ce  2103              MOVS     r1,#3                 ;391
0003d0  0209              LSLS     r1,r1,#8              ;391
0003d2  4388              BICS     r0,r0,r1              ;391
0003d4  490c              LDR      r1,|L7.1032|
0003d6  6008              STR      r0,[r1,#0]            ;391
0003d8  4608              MOV      r0,r1                 ;392
0003da  6800              LDR      r0,[r0,#0]            ;392
0003dc  2103              MOVS     r1,#3                 ;392
0003de  04c9              LSLS     r1,r1,#19             ;392
0003e0  4388              BICS     r0,r0,r1              ;392
0003e2  4909              LDR      r1,|L7.1032|
0003e4  6008              STR      r0,[r1,#0]            ;392
0003e6  e002              B        |L7.1006|
                  |L7.1000|
0003e8  e048              B        |L7.1148|
                  |L7.1002|
0003ea  e09e              B        |L7.1322|
                  |L7.1004|
0003ec  e0f1              B        |L7.1490|
                  |L7.1006|
0003ee  4608              MOV      r0,r1                 ;393
0003f0  6800              LDR      r0,[r0,#0]            ;393
0003f2  21f8              MOVS     r1,#0xf8              ;393
0003f4  4388              BICS     r0,r0,r1              ;393
0003f6  3040              ADDS     r0,r0,#0x40           ;393
0003f8  4903              LDR      r1,|L7.1032|
0003fa  6008              STR      r0,[r1,#0]            ;393
0003fc  e018              B        |L7.1072|
                  |L7.1022|
0003fe  e01c              B        |L7.1082|
                  |L7.1024|
                          DCD      command_list
                  |L7.1028|
                          DCD      current_blklen
                  |L7.1032|
                          DCD      0x40034000
                  |L7.1036|
00040c  487a              LDR      r0,|L7.1528|
00040e  6800              LDR      r0,[r0,#0]            ;397
000410  0840              LSRS     r0,r0,#1              ;397
000412  0040              LSLS     r0,r0,#1              ;397
000414  1c40              ADDS     r0,r0,#1              ;397
000416  4978              LDR      r1,|L7.1528|
000418  6008              STR      r0,[r1,#0]            ;397
00041a  bf00              NOP                            ;398
                  |L7.1052|
00041c  4876              LDR      r0,|L7.1528|
00041e  6800              LDR      r0,[r0,#0]            ;398
000420  07c0              LSLS     r0,r0,#31             ;398
000422  0fc0              LSRS     r0,r0,#31             ;398
000424  2800              CMP      r0,#0                 ;398
000426  d1f9              BNE      |L7.1052|
000428  4873              LDR      r0,|L7.1528|
00042a  6900              LDR      r0,[r0,#0x10]         ;399
00042c  5530              STRB     r0,[r6,r4]            ;399
00042e  1c64              ADDS     r4,r4,#1              ;395
                  |L7.1072|
000430  4872              LDR      r0,|L7.1532|
000432  6800              LDR      r0,[r0,#0]            ;395  ; current_blklen
000434  4284              CMP      r4,r0                 ;395
000436  d3e9              BCC      |L7.1036|
000438  e013              B        |L7.1122|
                  |L7.1082|
00043a  e00e              B        |L7.1114|
                  |L7.1084|
00043c  486e              LDR      r0,|L7.1528|
00043e  6800              LDR      r0,[r0,#0]            ;406
000440  0840              LSRS     r0,r0,#1              ;406
000442  0040              LSLS     r0,r0,#1              ;406
000444  1c40              ADDS     r0,r0,#1              ;406
000446  496c              LDR      r1,|L7.1528|
000448  6008              STR      r0,[r1,#0]            ;406
00044a  bf00              NOP                            ;407
                  |L7.1100|
00044c  486a              LDR      r0,|L7.1528|
00044e  6800              LDR      r0,[r0,#0]            ;407
000450  07c0              LSLS     r0,r0,#31             ;407
000452  0fc0              LSRS     r0,r0,#31             ;407
000454  2800              CMP      r0,#0                 ;407
000456  d1f9              BNE      |L7.1100|
000458  1c64              ADDS     r4,r4,#1              ;404
                  |L7.1114|
00045a  4868              LDR      r0,|L7.1532|
00045c  6800              LDR      r0,[r0,#0]            ;404  ; current_blklen
00045e  4284              CMP      r4,r0                 ;404
000460  d3ec              BCC      |L7.1084|
                  |L7.1122|
000462  20ff              MOVS     r0,#0xff              ;410
000464  f7fffffe          BL       SingleWrite
000468  b2c1              UXTB     r1,r0                 ;410
00046a  4668              MOV      r0,sp                 ;410
00046c  7041              STRB     r1,[r0,#1]            ;410
00046e  20ff              MOVS     r0,#0xff              ;411
000470  f7fffffe          BL       SingleWrite
000474  b2c1              UXTB     r1,r0                 ;411
000476  4668              MOV      r0,sp                 ;411
000478  7001              STRB     r1,[r0,#0]            ;411
00047a  e0ab              B        |L7.1492|
                  |L7.1148|
00047c  2500              MOVS     r5,#0                 ;416
00047e  e00c              B        |L7.1178|
                  |L7.1152|
000480  1c68              ADDS     r0,r5,#1              ;420
000482  b2c0              UXTB     r0,r0                 ;420
000484  1e05              SUBS     r5,r0,#0              ;420
000486  d108              BNE      |L7.1178|
000488  20ff              MOVS     r0,#0xff              ;420
00048a  f7fffffe          BL       SingleWrite
00048e  2101              MOVS     r1,#1                 ;420
000490  4608              MOV      r0,r1                 ;420
000492  f7fffffe          BL       DrvSPI_ClrSS
000496  2000              MOVS     r0,#0                 ;420
000498  e5f2              B        |L7.128|
                  |L7.1178|
00049a  20ff              MOVS     r0,#0xff              ;418
00049c  f7fffffe          BL       SingleWrite
0004a0  b2c0              UXTB     r0,r0                 ;418
0004a2  28fe              CMP      r0,#0xfe              ;418
0004a4  d1ec              BNE      |L7.1152|
0004a6  2400              MOVS     r4,#0                 ;422
0004a8  2e00              CMP      r6,#0                 ;424
0004aa  d01a              BEQ      |L7.1250|
0004ac  bf00              NOP                            ;426
0004ae  e013              B        |L7.1240|
                  |L7.1200|
0004b0  20ff              MOVS     r0,#0xff              ;428
0004b2  4951              LDR      r1,|L7.1528|
0004b4  6208              STR      r0,[r1,#0x20]         ;428
0004b6  4608              MOV      r0,r1                 ;429
0004b8  6800              LDR      r0,[r0,#0]            ;429
0004ba  0840              LSRS     r0,r0,#1              ;429
0004bc  0040              LSLS     r0,r0,#1              ;429
0004be  1c40              ADDS     r0,r0,#1              ;429
0004c0  6008              STR      r0,[r1,#0]            ;429
0004c2  bf00              NOP                            ;430
                  |L7.1220|
0004c4  484c              LDR      r0,|L7.1528|
0004c6  6800              LDR      r0,[r0,#0]            ;430
0004c8  07c0              LSLS     r0,r0,#31             ;430
0004ca  0fc0              LSRS     r0,r0,#31             ;430
0004cc  2800              CMP      r0,#0                 ;430
0004ce  d1f9              BNE      |L7.1220|
0004d0  4849              LDR      r0,|L7.1528|
0004d2  6900              LDR      r0,[r0,#0x10]         ;431
0004d4  5530              STRB     r0,[r6,r4]            ;431
0004d6  1c64              ADDS     r4,r4,#1              ;426
                  |L7.1240|
0004d8  4848              LDR      r0,|L7.1532|
0004da  6800              LDR      r0,[r0,#0]            ;426  ; current_blklen
0004dc  4284              CMP      r4,r0                 ;426
0004de  d3e7              BCC      |L7.1200|
0004e0  e016              B        |L7.1296|
                  |L7.1250|
0004e2  2400              MOVS     r4,#0                 ;435
0004e4  e010              B        |L7.1288|
                  |L7.1254|
0004e6  20ff              MOVS     r0,#0xff              ;437
0004e8  4943              LDR      r1,|L7.1528|
0004ea  6208              STR      r0,[r1,#0x20]         ;437
0004ec  4608              MOV      r0,r1                 ;438
0004ee  6800              LDR      r0,[r0,#0]            ;438
0004f0  0840              LSRS     r0,r0,#1              ;438
0004f2  0040              LSLS     r0,r0,#1              ;438
0004f4  1c40              ADDS     r0,r0,#1              ;438
0004f6  6008              STR      r0,[r1,#0]            ;438
0004f8  bf00              NOP                            ;439
                  |L7.1274|
0004fa  483f              LDR      r0,|L7.1528|
0004fc  6800              LDR      r0,[r0,#0]            ;439
0004fe  07c0              LSLS     r0,r0,#31             ;439
000500  0fc0              LSRS     r0,r0,#31             ;439
000502  2800              CMP      r0,#0                 ;439
000504  d1f9              BNE      |L7.1274|
000506  1c64              ADDS     r4,r4,#1              ;435
                  |L7.1288|
000508  483c              LDR      r0,|L7.1532|
00050a  6800              LDR      r0,[r0,#0]            ;435  ; current_blklen
00050c  4284              CMP      r4,r0                 ;435
00050e  d3ea              BCC      |L7.1254|
                  |L7.1296|
000510  20ff              MOVS     r0,#0xff              ;442
000512  f7fffffe          BL       SingleWrite
000516  b2c1              UXTB     r1,r0                 ;442
000518  4668              MOV      r0,sp                 ;442
00051a  7041              STRB     r1,[r0,#1]            ;442
00051c  20ff              MOVS     r0,#0xff              ;443
00051e  f7fffffe          BL       SingleWrite
000522  b2c1              UXTB     r1,r0                 ;443
000524  4668              MOV      r0,sp                 ;443
000526  7001              STRB     r1,[r0,#0]            ;443
000528  e054              B        |L7.1492|
                  |L7.1322|
00052a  20ff              MOVS     r0,#0xff              ;449
00052c  f7fffffe          BL       SingleWrite
000530  20fe              MOVS     r0,#0xfe              ;450
000532  f7fffffe          BL       SingleWrite
000536  2400              MOVS     r4,#0                 ;452
000538  e018              B        |L7.1388|
                  |L7.1338|
00053a  5d30              LDRB     r0,[r6,r4]            ;454
00053c  492e              LDR      r1,|L7.1528|
00053e  6208              STR      r0,[r1,#0x20]         ;454
000540  4608              MOV      r0,r1                 ;455
000542  6800              LDR      r0,[r0,#0]            ;455
000544  0840              LSRS     r0,r0,#1              ;455
000546  0040              LSLS     r0,r0,#1              ;455
000548  1c40              ADDS     r0,r0,#1              ;455
00054a  6008              STR      r0,[r1,#0]            ;455
00054c  4669              MOV      r1,sp                 ;456
00054e  880a              LDRH     r2,[r1,#0]            ;456
000550  5d30              LDRB     r0,[r6,r4]            ;456
000552  492b              LDR      r1,|L7.1536|
000554  f7fffffe          BL       GenerateCRC
000558  b280              UXTH     r0,r0                 ;456
00055a  9000              STR      r0,[sp,#0]            ;456
00055c  bf00              NOP                            ;457
                  |L7.1374|
00055e  4826              LDR      r0,|L7.1528|
000560  6800              LDR      r0,[r0,#0]            ;457
000562  07c0              LSLS     r0,r0,#31             ;457
000564  0fc0              LSRS     r0,r0,#31             ;457
000566  2800              CMP      r0,#0                 ;457
000568  d1f9              BNE      |L7.1374|
00056a  1c64              ADDS     r4,r4,#1              ;452
                  |L7.1388|
00056c  4823              LDR      r0,|L7.1532|
00056e  6800              LDR      r0,[r0,#0]            ;452  ; current_blklen
000570  4284              CMP      r4,r0                 ;452
000572  d3e2              BCC      |L7.1338|
000574  4669              MOV      r1,sp                 ;459
000576  7848              LDRB     r0,[r1,#1]            ;459
000578  f7fffffe          BL       SingleWrite
00057c  4669              MOV      r1,sp                 ;460
00057e  7808              LDRB     r0,[r1,#0]            ;460
000580  f7fffffe          BL       SingleWrite
000584  2500              MOVS     r5,#0                 ;462
000586  bf00              NOP                            ;463
                  |L7.1416|
000588  20ff              MOVS     r0,#0xff              ;465
00058a  f7fffffe          BL       SingleWrite
00058e  b2c0              UXTB     r0,r0                 ;465
000590  9001              STR      r0,[sp,#4]            ;465
000592  1c68              ADDS     r0,r5,#1              ;466
000594  b2c0              UXTB     r0,r0                 ;466
000596  1e05              SUBS     r5,r0,#0              ;466
000598  d100              BNE      |L7.1436|
00059a  e004              B        |L7.1446|
                  |L7.1436|
00059c  2111              MOVS     r1,#0x11              ;467
00059e  9801              LDR      r0,[sp,#4]            ;467
0005a0  4008              ANDS     r0,r0,r1              ;467
0005a2  2801              CMP      r0,#1                 ;467
0005a4  d1f0              BNE      |L7.1416|
                  |L7.1446|
0005a6  bf00              NOP                            ;466
0005a8  2d00              CMP      r5,#0                 ;471
0005aa  d108              BNE      |L7.1470|
0005ac  20ff              MOVS     r0,#0xff              ;471
0005ae  f7fffffe          BL       SingleWrite
0005b2  2101              MOVS     r1,#1                 ;471
0005b4  4608              MOV      r0,r1                 ;471
0005b6  f7fffffe          BL       DrvSPI_ClrSS
0005ba  2000              MOVS     r0,#0                 ;471
0005bc  e560              B        |L7.128|
                  |L7.1470|
0005be  bf00              NOP                            ;474
                  |L7.1472|
0005c0  20ff              MOVS     r0,#0xff              ;474
0005c2  f7fffffe          BL       SingleWrite
0005c6  b2c0              UXTB     r0,r0                 ;474
0005c8  28ff              CMP      r0,#0xff              ;474
0005ca  d1f9              BNE      |L7.1472|
0005cc  f7fffffe          BL       SingleWrite
0005d0  e000              B        |L7.1492|
                  |L7.1490|
0005d2  bf00              NOP                            ;477
                  |L7.1492|
0005d4  bf00              NOP                            ;414
0005d6  2101              MOVS     r1,#1                 ;479
0005d8  4608              MOV      r0,r1                 ;479
0005da  f7fffffe          BL       DrvSPI_ClrSS
0005de  4668              MOV      r0,sp                 ;480
0005e0  7d00              LDRB     r0,[r0,#0x14]         ;480
0005e2  2809              CMP      r0,#9                 ;480
0005e4  d003              BEQ      |L7.1518|
0005e6  4668              MOV      r0,sp                 ;480
0005e8  7d00              LDRB     r0,[r0,#0x14]         ;480
0005ea  280a              CMP      r0,#0xa               ;480
0005ec  d102              BNE      |L7.1524|
                  |L7.1518|
0005ee  4903              LDR      r1,|L7.1532|
0005f0  9803              LDR      r0,[sp,#0xc]          ;481
0005f2  6008              STR      r0,[r1,#0]            ;481  ; current_blklen
                  |L7.1524|
0005f4  2001              MOVS     r0,#1                 ;484
0005f6  e543              B        |L7.128|
;;;486    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP

                  |L7.1528|
                          DCD      0x40034000
                  |L7.1532|
                          DCD      current_blklen
                  |L7.1536|
                          DCD      0x00001021

                          AREA ||i.MMC_FLASH_Init||, CODE, READONLY, ALIGN=2

                  MMC_FLASH_Init PROC
;;;498    /*---------------------------------------------------------------------------------------------------------*/
;;;499    void MMC_FLASH_Init(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;500    {
000002  b087              SUB      sp,sp,#0x1c
;;;501    	uint32_t response;
;;;502    	uint8_t loopguard;
;;;503      	uint32_t i;
;;;504      	uint8_t counter = 0;    		
000004  2000              MOVS     r0,#0
000006  9005              STR      r0,[sp,#0x14]
;;;505      	uint8_t pchar[16];         		// Data pointer for storing MMC 
;;;506      	uint32_t c_size,bl_len;
;;;507      	uint8_t c_mult;
;;;508    
;;;509    
;;;510    	Is_Initialized = 0;
000008  4995              LDR      r1,|L8.608|
00000a  7008              STRB     r0,[r1,#0]
;;;511    
;;;512    
;;;513    	DrvSPI_ClrSS(eDRVSPI_PORT1, eDRVSPI_SS0);	// CS = 1
00000c  2101              MOVS     r1,#1
00000e  4608              MOV      r0,r1
000010  f7fffffe          BL       DrvSPI_ClrSS
;;;514    	DrvSYS_Delay(1000);
000014  207d              MOVS     r0,#0x7d
000016  00c0              LSLS     r0,r0,#3
000018  f7fffffe          BL       DrvSYS_Delay
;;;515    	//--------------------------------------------------------
;;;516    	//	Send 74 SD clcok in SD mode for Toshiba SD Card
;;;517    	//--------------------------------------------------------	
;;;518      	for(counter = 0; counter < 10; counter++) {
00001c  2000              MOVS     r0,#0
00001e  9005              STR      r0,[sp,#0x14]
000020  e006              B        |L8.48|
                  |L8.34|
;;;519        	SingleWrite(0xFF);
000022  20ff              MOVS     r0,#0xff
000024  f7fffffe          BL       SingleWrite
000028  9805              LDR      r0,[sp,#0x14]         ;518
00002a  1c40              ADDS     r0,r0,#1              ;518
00002c  b2c0              UXTB     r0,r0                 ;518
00002e  9005              STR      r0,[sp,#0x14]         ;518
                  |L8.48|
000030  9805              LDR      r0,[sp,#0x14]         ;518
000032  280a              CMP      r0,#0xa               ;518
000034  dbf5              BLT      |L8.34|
;;;520      	}
;;;521    	DrvSYS_Delay(1000);
000036  207d              MOVS     r0,#0x7d
000038  00c0              LSLS     r0,r0,#3
00003a  f7fffffe          BL       DrvSYS_Delay
;;;522    
;;;523      	DrvSPI_SetSS(eDRVSPI_PORT1, eDRVSPI_SS0);  // CS = 0		
00003e  2101              MOVS     r1,#1
000040  4608              MOV      r0,r1
000042  f7fffffe          BL       DrvSPI_SetSS
;;;524    	while(MMC_Command_Exec(GO_IDLE_STATE,EMPTY,EMPTY,&response)==FALSE);
000046  bf00              NOP      
                  |L8.72|
000048  ab06              ADD      r3,sp,#0x18
00004a  2200              MOVS     r2,#0
00004c  4611              MOV      r1,r2
00004e  4610              MOV      r0,r2
000050  f7fffffe          BL       MMC_Command_Exec
000054  2800              CMP      r0,#0
000056  d0f7              BEQ      |L8.72|
;;;525      	if(response!=0x01)
000058  9806              LDR      r0,[sp,#0x18]
00005a  2801              CMP      r0,#1
00005c  d001              BEQ      |L8.98|
                  |L8.94|
;;;526    		return;
;;;527    
;;;528    	if(MMC_Command_Exec(SEND_IF_COND,0x15A,pchar,&response) && response==1)
;;;529    	{/* SDC ver 2.00 */
;;;530    		if (pchar[2] == 0x01 && pchar[3] == 0x5A) 
;;;531    		{	/* The card can work at vdd range of 2.7-3.6V */
;;;532    			loopguard=0;
;;;533    			do
;;;534    			{
;;;535    				MMC_Command_Exec(SD_SEND_OP_COND,0x40000000,EMPTY,&response);//Enable HCS(OCR[30])
;;;536    				if(!++loopguard) break;
;;;537    				DrvSYS_Delay(50);
;;;538    			}while(response!=0);
;;;539    			if(!loopguard) return;
;;;540    
;;;541    			MMC_Command_Exec(READ_OCR,EMPTY,pchar,&response);
;;;542    			SDtype=(pchar[0]&0x40)?SDv2|SDBlock:SDv2;
;;;543    			DBG_PRINTF("SDv2\n");
;;;544    		}
;;;545    	}else
;;;546    	{/* SDv1 or MMCv3 */
;;;547    		 MMC_Command_Exec(SD_SEND_OP_COND,0x00,EMPTY,&response);
;;;548    		if (response <= 1) 
;;;549    		{
;;;550    			loopguard=0;
;;;551    			do
;;;552    			{
;;;553    				MMC_Command_Exec(SD_SEND_OP_COND,0x00,EMPTY,&response);
;;;554    				if(!++loopguard) break;
;;;555    				DrvSYS_Delay(50);
;;;556    			}while(response!=0);
;;;557    			if(!loopguard) return;
;;;558    			SDtype=SDv1;	/* SDv1 */
;;;559    			DBG_PRINTF("SDv1\n");
;;;560    		} else 
;;;561    		{
;;;562    			loopguard=0;
;;;563    			do
;;;564    			{
;;;565    				MMC_Command_Exec(SEND_OP_COND,0x00,EMPTY,&response);
;;;566    				if(!++loopguard) break;
;;;567    				DrvSYS_Delay(50);
;;;568    			}while(response!=0);
;;;569    			if(!loopguard) return;
;;;570    			SDtype=MMCv3;	/* MMCv3 */
;;;571    			DBG_PRINTF("MMCv3\n");
;;;572    		}
;;;573    		MMC_Command_Exec(SET_BLOCKLEN,(uint32_t)PHYSICAL_BLOCK_SIZE,EMPTY,&response);
;;;574    	}
;;;575    	if(MMC_Command_Exec(SEND_CSD,EMPTY,pchar,&response)==FALSE)
;;;576    		return;
;;;577    
;;;578      	if(response==0) 
;;;579    	{
;;;580        	DBG_PRINTF("Change speed:");
;;;581        	for(i=0;i<16;i++) {	DBG_PRINTF("0x%X ",pchar[i]);}
;;;582    
;;;583      	} else {
;;;584        	DBG_PRINTF("CARD STATUS 0x%X:\n",response);
;;;585      		for(i=0;i<16;i++) {	DBG_PRINTF("0x%X ",pchar[i]);}
;;;586        	LogicSector=0;
;;;587        	return;
;;;588      	}
;;;589    
;;;590     	if(SDtype&SDBlock)// Determine the number of MMC sectors;
;;;591    	{
;;;592    		bl_len = 1 << (pchar[5] & 0x0f) ;
;;;593    		c_size = ((pchar[7] & 0x3F) << 16) |(pchar[8] << 8) | (pchar[9]);
;;;594    		LogicSector=c_size*((512*1024)/bl_len);
;;;595    	}else
;;;596    	{
;;;597    	  	bl_len = 1 << (pchar[5] & 0x0f) ;
;;;598      		c_size = ((pchar[6] & 0x03) << 10) |(pchar[7] << 2) | ((pchar[8] &0xc0) >> 6);
;;;599      		c_mult = (((pchar[9] & 0x03) << 1) | ((pchar[10] & 0x80) >> 7));
;;;600    		LogicSector=(c_size+1)*(1 << (c_mult+2))*(bl_len/512);
;;;601      	}                                     
;;;602    		DBG_PRINTF("\nLogicSector:%d, PHYSICAL_SIZE:%dMB\n",LogicSector,(LogicSector/2/1024));
;;;603    
;;;604      	loopguard = 0;
;;;605      	while((MMC_Command_Exec(READ_SINGLE_BLOCK,0,0,&response)==FALSE)) {
;;;606        	if(!++loopguard) break;
;;;607      	} 
;;;608      	Is_Initialized = 1;
;;;609    }					  
00005e  b007              ADD      sp,sp,#0x1c
000060  bdf0              POP      {r4-r7,pc}
                  |L8.98|
000062  ab06              ADD      r3,sp,#0x18           ;528
000064  aa01              ADD      r2,sp,#4              ;528
000066  21ff              MOVS     r1,#0xff              ;528
000068  315b              ADDS     r1,r1,#0x5b           ;528
00006a  2002              MOVS     r0,#2                 ;528
00006c  f7fffffe          BL       MMC_Command_Exec
000070  2800              CMP      r0,#0                 ;528
000072  d034              BEQ      |L8.222|
000074  9806              LDR      r0,[sp,#0x18]         ;528
000076  2801              CMP      r0,#1                 ;528
000078  d131              BNE      |L8.222|
00007a  4668              MOV      r0,sp                 ;530
00007c  7980              LDRB     r0,[r0,#6]            ;530
00007e  2801              CMP      r0,#1                 ;530
000080  d172              BNE      |L8.360|
000082  4668              MOV      r0,sp                 ;530
000084  79c0              LDRB     r0,[r0,#7]            ;530
000086  285a              CMP      r0,#0x5a              ;530
000088  d16e              BNE      |L8.360|
00008a  2400              MOVS     r4,#0                 ;532
00008c  bf00              NOP                            ;533
                  |L8.142|
00008e  ab06              ADD      r3,sp,#0x18           ;535
000090  2200              MOVS     r2,#0                 ;535
000092  2101              MOVS     r1,#1                 ;535
000094  0789              LSLS     r1,r1,#30             ;535
000096  201e              MOVS     r0,#0x1e              ;535
000098  f7fffffe          BL       MMC_Command_Exec
00009c  1c60              ADDS     r0,r4,#1              ;536
00009e  b2c0              UXTB     r0,r0                 ;536
0000a0  1e04              SUBS     r4,r0,#0              ;536
0000a2  d100              BNE      |L8.166|
0000a4  e005              B        |L8.178|
                  |L8.166|
0000a6  2032              MOVS     r0,#0x32              ;537
0000a8  f7fffffe          BL       DrvSYS_Delay
0000ac  9806              LDR      r0,[sp,#0x18]         ;538
0000ae  2800              CMP      r0,#0                 ;538
0000b0  d1ed              BNE      |L8.142|
                  |L8.178|
0000b2  bf00              NOP                            ;536
0000b4  2c00              CMP      r4,#0                 ;539
0000b6  d100              BNE      |L8.186|
0000b8  e7d1              B        |L8.94|
                  |L8.186|
0000ba  ab06              ADD      r3,sp,#0x18           ;541
0000bc  aa01              ADD      r2,sp,#4              ;541
0000be  2100              MOVS     r1,#0                 ;541
0000c0  201a              MOVS     r0,#0x1a              ;541
0000c2  f7fffffe          BL       MMC_Command_Exec
0000c6  4668              MOV      r0,sp                 ;542
0000c8  7900              LDRB     r0,[r0,#4]            ;542
0000ca  2140              MOVS     r1,#0x40              ;542
0000cc  4008              ANDS     r0,r0,r1              ;542
0000ce  2800              CMP      r0,#0                 ;542
0000d0  d001              BEQ      |L8.214|
0000d2  2014              MOVS     r0,#0x14              ;542
0000d4  e000              B        |L8.216|
                  |L8.214|
0000d6  2004              MOVS     r0,#4                 ;542
                  |L8.216|
0000d8  4962              LDR      r1,|L8.612|
0000da  7008              STRB     r0,[r1,#0]            ;542
0000dc  e044              B        |L8.360|
                  |L8.222|
0000de  ab06              ADD      r3,sp,#0x18           ;547
0000e0  2200              MOVS     r2,#0                 ;547
0000e2  4611              MOV      r1,r2                 ;547
0000e4  201e              MOVS     r0,#0x1e              ;547
0000e6  f7fffffe          BL       MMC_Command_Exec
0000ea  9806              LDR      r0,[sp,#0x18]         ;548
0000ec  2801              CMP      r0,#1                 ;548
0000ee  d81a              BHI      |L8.294|
0000f0  2400              MOVS     r4,#0                 ;550
0000f2  bf00              NOP                            ;551
                  |L8.244|
0000f4  ab06              ADD      r3,sp,#0x18           ;553
0000f6  2200              MOVS     r2,#0                 ;553
0000f8  4611              MOV      r1,r2                 ;553
0000fa  201e              MOVS     r0,#0x1e              ;553
0000fc  f7fffffe          BL       MMC_Command_Exec
000100  1c60              ADDS     r0,r4,#1              ;554
000102  b2c0              UXTB     r0,r0                 ;554
000104  1e04              SUBS     r4,r0,#0              ;554
000106  d100              BNE      |L8.266|
000108  e005              B        |L8.278|
                  |L8.266|
00010a  2032              MOVS     r0,#0x32              ;555
00010c  f7fffffe          BL       DrvSYS_Delay
000110  9806              LDR      r0,[sp,#0x18]         ;556
000112  2800              CMP      r0,#0                 ;556
000114  d1ee              BNE      |L8.244|
                  |L8.278|
000116  bf00              NOP                            ;554
000118  2c00              CMP      r4,#0                 ;557
00011a  d100              BNE      |L8.286|
00011c  e79f              B        |L8.94|
                  |L8.286|
00011e  2002              MOVS     r0,#2                 ;558
000120  4950              LDR      r1,|L8.612|
000122  7008              STRB     r0,[r1,#0]            ;558
000124  e019              B        |L8.346|
                  |L8.294|
000126  2400              MOVS     r4,#0                 ;562
000128  bf00              NOP                            ;563
                  |L8.298|
00012a  ab06              ADD      r3,sp,#0x18           ;565
00012c  2200              MOVS     r2,#0                 ;565
00012e  4611              MOV      r1,r2                 ;565
000130  2001              MOVS     r0,#1                 ;565
000132  f7fffffe          BL       MMC_Command_Exec
000136  1c60              ADDS     r0,r4,#1              ;566
000138  b2c0              UXTB     r0,r0                 ;566
00013a  1e04              SUBS     r4,r0,#0              ;566
00013c  d100              BNE      |L8.320|
00013e  e005              B        |L8.332|
                  |L8.320|
000140  2032              MOVS     r0,#0x32              ;567
000142  f7fffffe          BL       DrvSYS_Delay
000146  9806              LDR      r0,[sp,#0x18]         ;568
000148  2800              CMP      r0,#0                 ;568
00014a  d1ee              BNE      |L8.298|
                  |L8.332|
00014c  bf00              NOP                            ;566
00014e  2c00              CMP      r4,#0                 ;569
000150  d100              BNE      |L8.340|
000152  e784              B        |L8.94|
                  |L8.340|
000154  2008              MOVS     r0,#8                 ;570
000156  4943              LDR      r1,|L8.612|
000158  7008              STRB     r0,[r1,#0]            ;570
                  |L8.346|
00015a  ab06              ADD      r3,sp,#0x18           ;573
00015c  2200              MOVS     r2,#0                 ;573
00015e  2101              MOVS     r1,#1                 ;573
000160  0249              LSLS     r1,r1,#9              ;573
000162  2007              MOVS     r0,#7                 ;573
000164  f7fffffe          BL       MMC_Command_Exec
                  |L8.360|
000168  ab06              ADD      r3,sp,#0x18           ;575
00016a  aa01              ADD      r2,sp,#4              ;575
00016c  2100              MOVS     r1,#0                 ;575
00016e  2003              MOVS     r0,#3                 ;575
000170  f7fffffe          BL       MMC_Command_Exec
000174  2800              CMP      r0,#0                 ;575
000176  d100              BNE      |L8.378|
000178  e771              B        |L8.94|
                  |L8.378|
00017a  9806              LDR      r0,[sp,#0x18]         ;578
00017c  2800              CMP      r0,#0                 ;578
00017e  d105              BNE      |L8.396|
000180  2500              MOVS     r5,#0                 ;581
000182  e000              B        |L8.390|
                  |L8.388|
000184  1c6d              ADDS     r5,r5,#1              ;581
                  |L8.390|
000186  2d10              CMP      r5,#0x10              ;581
000188  d3fc              BCC      |L8.388|
00018a  e008              B        |L8.414|
                  |L8.396|
00018c  2500              MOVS     r5,#0                 ;585
00018e  e000              B        |L8.402|
                  |L8.400|
000190  1c6d              ADDS     r5,r5,#1              ;585
                  |L8.402|
000192  2d10              CMP      r5,#0x10              ;585
000194  d3fc              BCC      |L8.400|
000196  2000              MOVS     r0,#0                 ;586
000198  4933              LDR      r1,|L8.616|
00019a  6008              STR      r0,[r1,#0]            ;586  ; LogicSector
00019c  e75f              B        |L8.94|
                  |L8.414|
00019e  4931              LDR      r1,|L8.612|
0001a0  2000              MOVS     r0,#0                 ;590
0001a2  5608              LDRSB    r0,[r1,r0]            ;590  ; SDtype
0001a4  2110              MOVS     r1,#0x10              ;590
0001a6  4008              ANDS     r0,r0,r1              ;590
0001a8  2800              CMP      r0,#0                 ;590
0001aa  d01a              BEQ      |L8.482|
0001ac  4668              MOV      r0,sp                 ;592
0001ae  7a40              LDRB     r0,[r0,#9]            ;592
0001b0  0701              LSLS     r1,r0,#28             ;592
0001b2  0f09              LSRS     r1,r1,#28             ;592
0001b4  2701              MOVS     r7,#1                 ;592
0001b6  408f              LSLS     r7,r7,r1              ;592
0001b8  4668              MOV      r0,sp                 ;593
0001ba  7ac0              LDRB     r0,[r0,#0xb]          ;593
0001bc  0680              LSLS     r0,r0,#26             ;593
0001be  0a81              LSRS     r1,r0,#10             ;593
0001c0  4668              MOV      r0,sp                 ;593
0001c2  7b00              LDRB     r0,[r0,#0xc]          ;593
0001c4  0200              LSLS     r0,r0,#8              ;593
0001c6  4308              ORRS     r0,r0,r1              ;593
0001c8  4669              MOV      r1,sp                 ;593
0001ca  7b49              LDRB     r1,[r1,#0xd]          ;593
0001cc  4606              MOV      r6,r0                 ;593
0001ce  430e              ORRS     r6,r6,r1              ;593
0001d0  4639              MOV      r1,r7                 ;594
0001d2  2001              MOVS     r0,#1                 ;594
0001d4  04c0              LSLS     r0,r0,#19             ;594
0001d6  f7fffffe          BL       __aeabi_uidivmod
0001da  4370              MULS     r0,r6,r0              ;594
0001dc  4922              LDR      r1,|L8.616|
0001de  6008              STR      r0,[r1,#0]            ;594  ; LogicSector
0001e0  e028              B        |L8.564|
                  |L8.482|
0001e2  4668              MOV      r0,sp                 ;597
0001e4  7a40              LDRB     r0,[r0,#9]            ;597
0001e6  0701              LSLS     r1,r0,#28             ;597
0001e8  0f09              LSRS     r1,r1,#28             ;597
0001ea  2701              MOVS     r7,#1                 ;597
0001ec  408f              LSLS     r7,r7,r1              ;597
0001ee  4668              MOV      r0,sp                 ;598
0001f0  7a80              LDRB     r0,[r0,#0xa]          ;598
0001f2  0780              LSLS     r0,r0,#30             ;598
0001f4  0d01              LSRS     r1,r0,#20             ;598
0001f6  4668              MOV      r0,sp                 ;598
0001f8  7ac0              LDRB     r0,[r0,#0xb]          ;598
0001fa  0080              LSLS     r0,r0,#2              ;598
0001fc  4308              ORRS     r0,r0,r1              ;598
0001fe  4669              MOV      r1,sp                 ;598
000200  7b09              LDRB     r1,[r1,#0xc]          ;598
000202  22c0              MOVS     r2,#0xc0              ;598
000204  4011              ANDS     r1,r1,r2              ;598
000206  1189              ASRS     r1,r1,#6              ;598
000208  4606              MOV      r6,r0                 ;598
00020a  430e              ORRS     r6,r6,r1              ;598
00020c  4669              MOV      r1,sp                 ;599
00020e  7b48              LDRB     r0,[r1,#0xd]          ;599
000210  0780              LSLS     r0,r0,#30             ;599
000212  0f40              LSRS     r0,r0,#29             ;599
000214  7b89              LDRB     r1,[r1,#0xe]          ;599
000216  2280              MOVS     r2,#0x80              ;599
000218  4011              ANDS     r1,r1,r2              ;599
00021a  11c9              ASRS     r1,r1,#7              ;599
00021c  4308              ORRS     r0,r0,r1              ;599
00021e  9000              STR      r0,[sp,#0]            ;599
000220  9800              LDR      r0,[sp,#0]            ;600
000222  1c81              ADDS     r1,r0,#2              ;600
000224  2001              MOVS     r0,#1                 ;600
000226  4088              LSLS     r0,r0,r1              ;600
000228  1c71              ADDS     r1,r6,#1              ;600
00022a  4348              MULS     r0,r1,r0              ;600
00022c  0a79              LSRS     r1,r7,#9              ;600
00022e  4348              MULS     r0,r1,r0              ;600
000230  490d              LDR      r1,|L8.616|
000232  6008              STR      r0,[r1,#0]            ;600  ; LogicSector
                  |L8.564|
000234  2400              MOVS     r4,#0                 ;604
000236  e004              B        |L8.578|
                  |L8.568|
000238  1c60              ADDS     r0,r4,#1              ;606
00023a  b2c0              UXTB     r0,r0                 ;606
00023c  1e04              SUBS     r4,r0,#0              ;606
00023e  d100              BNE      |L8.578|
000240  e007              B        |L8.594|
                  |L8.578|
000242  ab06              ADD      r3,sp,#0x18           ;605
000244  2200              MOVS     r2,#0                 ;605
000246  4611              MOV      r1,r2                 ;605
000248  2008              MOVS     r0,#8                 ;605
00024a  f7fffffe          BL       MMC_Command_Exec
00024e  2800              CMP      r0,#0                 ;605
000250  d0f2              BEQ      |L8.568|
                  |L8.594|
000252  bf00              NOP                            ;606
000254  2001              MOVS     r0,#1                 ;608
000256  4902              LDR      r1,|L8.608|
000258  7008              STRB     r0,[r1,#0]            ;608
00025a  bf00              NOP      
00025c  e6ff              B        |L8.94|
;;;610    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP

00025e  0000              DCW      0x0000
                  |L8.608|
                          DCD      Is_Initialized
                  |L8.612|
                          DCD      SDtype
                  |L8.616|
                          DCD      LogicSector

                          AREA ||i.SingleWrite||, CODE, READONLY, ALIGN=1

                  SingleWrite PROC
;;;180    /*---------------------------------------------------------------------------------------------------------*/
;;;181    static uint32_t SingleWrite(uint32_t u32Data)
000000  b538              PUSH     {r3-r5,lr}
;;;182    {
000002  4604              MOV      r4,r0
;;;183    	uint32_t SPIdata=u32Data;
000004  9400              STR      r4,[sp,#0]
;;;184    	DrvSPI_BurstTransfer(eDRVSPI_PORT1,1,2);
000006  2202              MOVS     r2,#2
000008  2101              MOVS     r1,#1
00000a  4608              MOV      r0,r1
00000c  f7fffffe          BL       DrvSPI_BurstTransfer
;;;185    	DrvSPI_SingleWrite(eDRVSPI_PORT1,&SPIdata);
000010  4669              MOV      r1,sp
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       DrvSPI_SingleWrite
;;;186        while (DrvSPI_IsBusy(eDRVSPI_PORT1));
000018  bf00              NOP      
                  |L9.26|
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       DrvSPI_IsBusy
000020  2800              CMP      r0,#0
000022  d1fa              BNE      |L9.26|
;;;187    	DrvSPI_DumpRxRegister(eDRVSPI_PORT1,&SPIdata,1);
000024  2201              MOVS     r2,#1
000026  4669              MOV      r1,sp
000028  4610              MOV      r0,r2
00002a  f7fffffe          BL       DrvSPI_DumpRxRegister
;;;188    	return SPIdata;
00002e  9800              LDR      r0,[sp,#0]
;;;189    }
000030  bd38              POP      {r3-r5,pc}
;;;190    
                          ENDP


                          AREA ||i.SpiRead||, CODE, READONLY, ALIGN=2

                  SpiRead PROC
;;;744    /*---------------------------------------------------------------------------------------------------------*/
;;;745    void SpiRead(uint32_t addr, uint32_t size, uint8_t* buffer)
000000  b5f8              PUSH     {r3-r7,lr}
;;;746    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;747        /* This is low level read function of USB Mass Storage */
;;;748    	uint32_t response;
;;;749    	if(SDtype&SDBlock)
000008  491a              LDR      r1,|L10.116|
00000a  2000              MOVS     r0,#0
00000c  5608              LDRSB    r0,[r1,r0]  ; SDtype
00000e  2110              MOVS     r1,#0x10
000010  4008              ANDS     r0,r0,r1
000012  2800              CMP      r0,#0
000014  d015              BEQ      |L10.66|
;;;750    	{
;;;751    
;;;752    		while(size >= PHYSICAL_BLOCK_SIZE)
000016  e00f              B        |L10.56|
                  |L10.24|
;;;753    		{
;;;754    			while(MMC_Command_Exec(READ_SINGLE_BLOCK,addr,buffer,&response)==FALSE);
000018  bf00              NOP      
                  |L10.26|
00001a  466b              MOV      r3,sp
00001c  4632              MOV      r2,r6
00001e  4621              MOV      r1,r4
000020  2008              MOVS     r0,#8
000022  f7fffffe          BL       MMC_Command_Exec
000026  2800              CMP      r0,#0
000028  d0f7              BEQ      |L10.26|
;;;755    			addr   ++;
00002a  1c64              ADDS     r4,r4,#1
;;;756    			buffer += PHYSICAL_BLOCK_SIZE;
00002c  36ff              ADDS     r6,r6,#0xff
00002e  36ff              ADDS     r6,r6,#0xff
000030  3602              ADDS     r6,#2
;;;757    			size  -= PHYSICAL_BLOCK_SIZE;
000032  3dff              SUBS     r5,r5,#0xff
000034  3dff              SUBS     r5,r5,#0xff
000036  3d02              SUBS     r5,#2
                  |L10.56|
000038  2001              MOVS     r0,#1                 ;752
00003a  0240              LSLS     r0,r0,#9              ;752
00003c  4285              CMP      r5,r0                 ;752
00003e  d2eb              BCS      |L10.24|
000040  e017              B        |L10.114|
                  |L10.66|
;;;758    		}
;;;759    
;;;760    	}else
;;;761    	{
;;;762    		addr*=PHYSICAL_BLOCK_SIZE;
000042  0264              LSLS     r4,r4,#9
;;;763    		while(size >= PHYSICAL_BLOCK_SIZE)
000044  e011              B        |L10.106|
                  |L10.70|
;;;764    		{
;;;765    			while(MMC_Command_Exec(READ_SINGLE_BLOCK,addr,buffer,&response)==FALSE);
000046  bf00              NOP      
                  |L10.72|
000048  466b              MOV      r3,sp
00004a  4632              MOV      r2,r6
00004c  4621              MOV      r1,r4
00004e  2008              MOVS     r0,#8
000050  f7fffffe          BL       MMC_Command_Exec
000054  2800              CMP      r0,#0
000056  d0f7              BEQ      |L10.72|
;;;766    			addr   += PHYSICAL_BLOCK_SIZE;
000058  34ff              ADDS     r4,r4,#0xff
00005a  34ff              ADDS     r4,r4,#0xff
00005c  3402              ADDS     r4,#2
;;;767    			buffer += PHYSICAL_BLOCK_SIZE;
00005e  36ff              ADDS     r6,r6,#0xff
000060  36ff              ADDS     r6,r6,#0xff
000062  3602              ADDS     r6,#2
;;;768    			size  -= PHYSICAL_BLOCK_SIZE;
000064  3dff              SUBS     r5,r5,#0xff
000066  3dff              SUBS     r5,r5,#0xff
000068  3d02              SUBS     r5,#2
                  |L10.106|
00006a  2001              MOVS     r0,#1                 ;763
00006c  0240              LSLS     r0,r0,#9              ;763
00006e  4285              CMP      r5,r0                 ;763
000070  d2e9              BCS      |L10.70|
                  |L10.114|
;;;769    		}
;;;770    	}
;;;771    }
000072  bdf8              POP      {r3-r7,pc}
;;;772    
                          ENDP

                  |L10.116|
                          DCD      SDtype

                          AREA ||i.SpiWrite||, CODE, READONLY, ALIGN=2

                  SpiWrite PROC
;;;788    /*---------------------------------------------------------------------------------------------------------*/
;;;789    void SpiWrite(uint32_t addr, uint32_t size, uint8_t* buffer)
000000  b5f8              PUSH     {r3-r7,lr}
;;;790    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;791    	uint32_t response;
;;;792    	if(SDtype&SDBlock)
000008  491a              LDR      r1,|L11.116|
00000a  2000              MOVS     r0,#0
00000c  5608              LDRSB    r0,[r1,r0]  ; SDtype
00000e  2110              MOVS     r1,#0x10
000010  4008              ANDS     r0,r0,r1
000012  2800              CMP      r0,#0
000014  d015              BEQ      |L11.66|
;;;793    	{
;;;794    		while(size >= PHYSICAL_BLOCK_SIZE)
000016  e00f              B        |L11.56|
                  |L11.24|
;;;795    		{
;;;796    			while(MMC_Command_Exec(WRITE_BLOCK,addr,buffer,&response)==FALSE);
000018  bf00              NOP      
                  |L11.26|
00001a  466b              MOV      r3,sp
00001c  4632              MOV      r2,r6
00001e  4621              MOV      r1,r4
000020  200b              MOVS     r0,#0xb
000022  f7fffffe          BL       MMC_Command_Exec
000026  2800              CMP      r0,#0
000028  d0f7              BEQ      |L11.26|
;;;797    			addr   ++;
00002a  1c64              ADDS     r4,r4,#1
;;;798    			buffer += PHYSICAL_BLOCK_SIZE;
00002c  36ff              ADDS     r6,r6,#0xff
00002e  36ff              ADDS     r6,r6,#0xff
000030  3602              ADDS     r6,#2
;;;799    			size  -= PHYSICAL_BLOCK_SIZE;
000032  3dff              SUBS     r5,r5,#0xff
000034  3dff              SUBS     r5,r5,#0xff
000036  3d02              SUBS     r5,#2
                  |L11.56|
000038  2001              MOVS     r0,#1                 ;794
00003a  0240              LSLS     r0,r0,#9              ;794
00003c  4285              CMP      r5,r0                 ;794
00003e  d2eb              BCS      |L11.24|
000040  e017              B        |L11.114|
                  |L11.66|
;;;800    		}
;;;801    	}else
;;;802    	{
;;;803    		addr*=PHYSICAL_BLOCK_SIZE;
000042  0264              LSLS     r4,r4,#9
;;;804    		while(size >= PHYSICAL_BLOCK_SIZE)
000044  e011              B        |L11.106|
                  |L11.70|
;;;805    		{
;;;806    			while(MMC_Command_Exec(WRITE_BLOCK,addr,buffer,&response)==FALSE);
000046  bf00              NOP      
                  |L11.72|
000048  466b              MOV      r3,sp
00004a  4632              MOV      r2,r6
00004c  4621              MOV      r1,r4
00004e  200b              MOVS     r0,#0xb
000050  f7fffffe          BL       MMC_Command_Exec
000054  2800              CMP      r0,#0
000056  d0f7              BEQ      |L11.72|
;;;807    			addr   += (PHYSICAL_BLOCK_SIZE);
000058  34ff              ADDS     r4,r4,#0xff
00005a  34ff              ADDS     r4,r4,#0xff
00005c  3402              ADDS     r4,#2
;;;808    			buffer += PHYSICAL_BLOCK_SIZE;
00005e  36ff              ADDS     r6,r6,#0xff
000060  36ff              ADDS     r6,r6,#0xff
000062  3602              ADDS     r6,#2
;;;809    			size  -= PHYSICAL_BLOCK_SIZE;
000064  3dff              SUBS     r5,r5,#0xff
000066  3dff              SUBS     r5,r5,#0xff
000068  3d02              SUBS     r5,#2
                  |L11.106|
00006a  2001              MOVS     r0,#1                 ;804
00006c  0240              LSLS     r0,r0,#9              ;804
00006e  4285              CMP      r5,r0                 ;804
000070  d2e9              BCS      |L11.70|
                  |L11.114|
;;;810    		}
;;;811    	}
;;;812    }
000072  bdf8              POP      {r3-r7,pc}
;;;813    
                          ENDP

                  |L11.116|
                          DCD      SDtype

                          AREA ||.data||, DATA, ALIGN=2

                  command_list
000000  00009500          DCB      0x00,0x00,0x95,0x00
000004  00000100          DCB      0x00,0x00,0x01,0x00
000008  ff000000          DCB      0xff,0x00,0x00,0x00
00000c  0801ff00          DCB      0x08,0x01,0xff,0x00
000010  04000900          DCB      0x04,0x00,0x09,0x00
000014  ff010000          DCB      0xff,0x01,0x00,0x00
000018  0a00ff01          DCB      0x0a,0x00,0xff,0x01
00001c  00000c00          DCB      0x00,0x00,0x0c,0x00
000020  ff000100          DCB      0xff,0x00,0x01,0x00
000024  0d00ff00          DCB      0x0d,0x00,0xff,0x00
000028  02001001          DCB      0x02,0x00,0x10,0x01
00002c  ff000000          DCB      0xff,0x00,0x00,0x00
000030  1101ff03          DCB      0x11,0x01,0xff,0x03
000034  00001201          DCB      0x00,0x00,0x12,0x01
000038  ff010001          DCB      0xff,0x01,0x00,0x01
00003c  1700ff00          DCB      0x17,0x00,0xff,0x00
000040  00001801          DCB      0x00,0x00,0x18,0x01
000044  ff020000          DCB      0xff,0x02,0x00,0x00
000048  1901ff02          DCB      0x19,0x01,0xff,0x02
00004c  00011b00          DCB      0x00,0x01,0x1b,0x00
000050  ff000000          DCB      0xff,0x00,0x00,0x00
000054  1c01ff00          DCB      0x1c,0x01,0xff,0x00
000058  01001d01          DCB      0x01,0x00,0x1d,0x01
00005c  ff000100          DCB      0xff,0x00,0x01,0x00
000060  1e01ff00          DCB      0x1e,0x01,0xff,0x00
000064  00002001          DCB      0x00,0x00,0x20,0x01
000068  ff000000          DCB      0xff,0x00,0x00,0x00
00006c  2101ff00          DCB      0x21,0x01,0xff,0x00
000070  00002201          DCB      0x00,0x00,0x22,0x01
000074  ff000000          DCB      0xff,0x00,0x00,0x00
000078  2301ff00          DCB      0x23,0x01,0xff,0x00
00007c  00002401          DCB      0x00,0x00,0x24,0x01
000080  ff000000          DCB      0xff,0x00,0x00,0x00
000084  2501ff00          DCB      0x25,0x01,0xff,0x00
000088  00002601          DCB      0x00,0x00,0x26,0x01
00008c  ff000100          DCB      0xff,0x00,0x01,0x00
000090  2a01ff00          DCB      0x2a,0x01,0xff,0x00
000094  00003700          DCB      0x00,0x00,0x37,0x00
000098  ff000000          DCB      0xff,0x00,0x00,0x00
00009c  3a00ff00          DCB      0x3a,0x00,0xff,0x00
0000a0  03003b01          DCB      0x03,0x00,0x3b,0x01
0000a4  ff000000          DCB      0xff,0x00,0x00,0x00
0000a8  8d00ff00          DCB      0x8d,0x00,0xff,0x00
0000ac  02009701          DCB      0x02,0x00,0x97,0x01
0000b0  ff000000          DCB      0xff,0x00,0x00,0x00
0000b4  a901ff00          DCB      0xa9,0x01,0xff,0x00
0000b8  0000              DCB      0x00,0x00
                  Is_Initialized
0000ba  00                DCB      0x00
                  SDtype
0000bb  00                DCB      0x00
                  LogicSector
                          DCD      0x00000000
                  current_blklen
                          DCD      0x00000200
