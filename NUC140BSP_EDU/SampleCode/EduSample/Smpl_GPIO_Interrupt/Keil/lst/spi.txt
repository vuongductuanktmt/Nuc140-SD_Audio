; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\spi.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\spi.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC1xx\Include -I..\..\..\..\Library\Device\Nuvoton\NUC1xx\Source -I..\..\..\..\Library\ -I..\..\..\..\Library\NUC1xx\Include -I..\..\..\..\Library\NUC1xx-LB_002\Include -IF:\Keil\ARM\RV31\INC -IF:\Keil\ARM\CMSIS\Include -IF:\Keil\ARM\INC\ST\STM32F10x -D__UVISION_VERSION=524 --omf_browse=.\obj\spi.crf ..\..\..\..\Library\NUC1xx\Source\SPI.c]
                          THUMB

                          AREA ||i.DrvSPI_3WireAbort||, CODE, READONLY, ALIGN=2

                  DrvSPI_3WireAbort PROC
;;;1401   /*---------------------------------------------------------------------------------------------------------*/
;;;1402   void DrvSPI_3WireAbort(E_DRVSPI_PORT eSpiPort)
000000  0081              LSLS     r1,r0,#2
;;;1403   {
;;;1404       SPI_PORT[eSpiPort]->CNTRL2.SLV_ABORT = 1;
000002  4a06              LDR      r2,|L1.28|
000004  5851              LDR      r1,[r2,r1]
000006  6bc9              LDR      r1,[r1,#0x3c]
000008  2201              MOVS     r2,#1
00000a  0252              LSLS     r2,r2,#9
00000c  4391              BICS     r1,r1,r2
00000e  1889              ADDS     r1,r1,r2
000010  0082              LSLS     r2,r0,#2
000012  4b02              LDR      r3,|L1.28|
000014  589a              LDR      r2,[r3,r2]
000016  63d1              STR      r1,[r2,#0x3c]
;;;1405   }
000018  4770              BX       lr
;;;1406   
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_BurstRead||, CODE, READONLY, ALIGN=2

                  DrvSPI_BurstRead PROC
;;;1149   /*---------------------------------------------------------------------------------------------------------*/
;;;1150   uint8_t DrvSPI_BurstRead(E_DRVSPI_PORT eSpiPort, uint32_t *pu32Buf)
000000  b510              PUSH     {r4,lr}
;;;1151   {
000002  4602              MOV      r2,r0
;;;1152       if(SPI_PORT[eSpiPort]->CNTRL.GO_BUSY==1)
000004  0090              LSLS     r0,r2,#2
000006  4b0f              LDR      r3,|L2.68|
000008  5818              LDR      r0,[r3,r0]
00000a  6800              LDR      r0,[r0,#0]
00000c  07c0              LSLS     r0,r0,#31
00000e  0fc0              LSRS     r0,r0,#31
000010  2800              CMP      r0,#0
000012  d001              BEQ      |L2.24|
;;;1153           return FALSE;
000014  2000              MOVS     r0,#0
                  |L2.22|
;;;1154   
;;;1155       pu32Buf[0] = SPI_PORT[eSpiPort]->RX[0];
;;;1156       pu32Buf[1] = SPI_PORT[eSpiPort]->RX[1];
;;;1157       SPI_PORT[eSpiPort]->CNTRL.GO_BUSY = 1;
;;;1158   
;;;1159       return TRUE;
;;;1160   }
000016  bd10              POP      {r4,pc}
                  |L2.24|
000018  0090              LSLS     r0,r2,#2              ;1155
00001a  4b0a              LDR      r3,|L2.68|
00001c  5818              LDR      r0,[r3,r0]            ;1155
00001e  6900              LDR      r0,[r0,#0x10]         ;1155
000020  6008              STR      r0,[r1,#0]            ;1155
000022  0090              LSLS     r0,r2,#2              ;1156
000024  5818              LDR      r0,[r3,r0]            ;1156
000026  6940              LDR      r0,[r0,#0x14]         ;1156
000028  6048              STR      r0,[r1,#4]            ;1156
00002a  0090              LSLS     r0,r2,#2              ;1157
00002c  5818              LDR      r0,[r3,r0]            ;1157
00002e  6800              LDR      r0,[r0,#0]            ;1157
000030  0840              LSRS     r0,r0,#1              ;1157
000032  0040              LSLS     r0,r0,#1              ;1157
000034  1c40              ADDS     r0,r0,#1              ;1157
000036  0093              LSLS     r3,r2,#2              ;1157
000038  4c02              LDR      r4,|L2.68|
00003a  58e3              LDR      r3,[r4,r3]            ;1157
00003c  6018              STR      r0,[r3,#0]            ;1157
00003e  2001              MOVS     r0,#1                 ;1159
000040  e7e9              B        |L2.22|
;;;1161   
                          ENDP

000042  0000              DCW      0x0000
                  |L2.68|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_BurstTransfer||, CODE, READONLY, ALIGN=2

                  DrvSPI_BurstTransfer PROC
;;;813    /*---------------------------------------------------------------------------------------------------------*/
;;;814    int32_t DrvSPI_BurstTransfer(E_DRVSPI_PORT eSpiPort, int32_t i32BurstCnt, int32_t i32Interval)
000000  b530              PUSH     {r4,r5,lr}
;;;815    {
000002  4603              MOV      r3,r0
;;;816    
;;;817        if((i32BurstCnt < 1) || (i32BurstCnt > 2))
000004  2901              CMP      r1,#1
000006  db01              BLT      |L3.12|
000008  2902              CMP      r1,#2
00000a  dd01              BLE      |L3.16|
                  |L3.12|
;;;818        {
;;;819            return E_DRVSPI_ERR_BURST_CNT;
00000c  4816              LDR      r0,|L3.104|
                  |L3.14|
;;;820        }
;;;821        
;;;822        if((i32Interval < 2) || (i32Interval > 17))
;;;823        {
;;;824            return E_DRVSPI_ERR_SUSPEND_INTERVAL;
;;;825        }
;;;826    
;;;827        SPI_PORT[eSpiPort]->CNTRL.TX_NUM = i32BurstCnt-1;
;;;828        SPI_PORT[eSpiPort]->CNTRL.SP_CYCLE = i32Interval-2;
;;;829    
;;;830        return E_SUCCESS;
;;;831    }
00000e  bd30              POP      {r4,r5,pc}
                  |L3.16|
000010  2a02              CMP      r2,#2                 ;822
000012  db01              BLT      |L3.24|
000014  2a11              CMP      r2,#0x11              ;822
000016  dd02              BLE      |L3.30|
                  |L3.24|
000018  4813              LDR      r0,|L3.104|
00001a  1c40              ADDS     r0,r0,#1              ;824
00001c  e7f7              B        |L3.14|
                  |L3.30|
00001e  0098              LSLS     r0,r3,#2              ;827
000020  4c12              LDR      r4,|L3.108|
000022  5820              LDR      r0,[r4,r0]            ;827
000024  6800              LDR      r0,[r0,#0]            ;827
000026  2403              MOVS     r4,#3                 ;827
000028  0224              LSLS     r4,r4,#8              ;827
00002a  43a0              BICS     r0,r0,r4              ;827
00002c  1e4c              SUBS     r4,r1,#1              ;827
00002e  0224              LSLS     r4,r4,#8              ;827
000030  2503              MOVS     r5,#3                 ;827
000032  022d              LSLS     r5,r5,#8              ;827
000034  402c              ANDS     r4,r4,r5              ;827
000036  4320              ORRS     r0,r0,r4              ;827
000038  009c              LSLS     r4,r3,#2              ;827
00003a  4d0c              LDR      r5,|L3.108|
00003c  592c              LDR      r4,[r5,r4]            ;827
00003e  6020              STR      r0,[r4,#0]            ;827
000040  0098              LSLS     r0,r3,#2              ;828
000042  462c              MOV      r4,r5                 ;828
000044  5820              LDR      r0,[r4,r0]            ;828
000046  6800              LDR      r0,[r0,#0]            ;828
000048  240f              MOVS     r4,#0xf               ;828
00004a  0324              LSLS     r4,r4,#12             ;828
00004c  43a0              BICS     r0,r0,r4              ;828
00004e  1e94              SUBS     r4,r2,#2              ;828
000050  0324              LSLS     r4,r4,#12             ;828
000052  250f              MOVS     r5,#0xf               ;828
000054  032d              LSLS     r5,r5,#12             ;828
000056  402c              ANDS     r4,r4,r5              ;828
000058  4320              ORRS     r0,r0,r4              ;828
00005a  009c              LSLS     r4,r3,#2              ;828
00005c  4d03              LDR      r5,|L3.108|
00005e  592c              LDR      r4,[r5,r4]            ;828
000060  6020              STR      r0,[r4,#0]            ;828
000062  2000              MOVS     r0,#0                 ;830
000064  e7d3              B        |L3.14|
;;;832    
                          ENDP

000066  0000              DCW      0x0000
                  |L3.104|
                          DCD      0xffff9400
                  |L3.108|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_BurstWrite||, CODE, READONLY, ALIGN=2

                  DrvSPI_BurstWrite PROC
;;;1175   /*---------------------------------------------------------------------------------------------------------*/
;;;1176   uint8_t DrvSPI_BurstWrite(E_DRVSPI_PORT eSpiPort, uint32_t *pu32Buf)
000000  b510              PUSH     {r4,lr}
;;;1177   {
000002  4602              MOV      r2,r0
;;;1178       if(SPI_PORT[eSpiPort]->CNTRL.GO_BUSY==1)
000004  0090              LSLS     r0,r2,#2
000006  4b0f              LDR      r3,|L4.68|
000008  5818              LDR      r0,[r3,r0]
00000a  6800              LDR      r0,[r0,#0]
00000c  07c0              LSLS     r0,r0,#31
00000e  0fc0              LSRS     r0,r0,#31
000010  2800              CMP      r0,#0
000012  d001              BEQ      |L4.24|
;;;1179           return FALSE;
000014  2000              MOVS     r0,#0
                  |L4.22|
;;;1180   
;;;1181       SPI_PORT[eSpiPort]->TX[0] = pu32Buf[0];
;;;1182       SPI_PORT[eSpiPort]->TX[1] = pu32Buf[1];
;;;1183       SPI_PORT[eSpiPort]->CNTRL.GO_BUSY = 1;
;;;1184   
;;;1185       return TRUE;
;;;1186   }
000016  bd10              POP      {r4,pc}
                  |L4.24|
000018  0093              LSLS     r3,r2,#2              ;1181
00001a  4c0a              LDR      r4,|L4.68|
00001c  58e3              LDR      r3,[r4,r3]            ;1181
00001e  6808              LDR      r0,[r1,#0]            ;1181
000020  6218              STR      r0,[r3,#0x20]         ;1181
000022  0090              LSLS     r0,r2,#2              ;1182
000024  5820              LDR      r0,[r4,r0]            ;1182
000026  684b              LDR      r3,[r1,#4]            ;1182
000028  6243              STR      r3,[r0,#0x24]         ;1182
00002a  0090              LSLS     r0,r2,#2              ;1183
00002c  4623              MOV      r3,r4                 ;1183
00002e  5818              LDR      r0,[r3,r0]            ;1183
000030  6800              LDR      r0,[r0,#0]            ;1183
000032  0840              LSRS     r0,r0,#1              ;1183
000034  0040              LSLS     r0,r0,#1              ;1183
000036  1c40              ADDS     r0,r0,#1              ;1183
000038  0093              LSLS     r3,r2,#2              ;1183
00003a  58e3              LDR      r3,[r4,r3]            ;1183
00003c  6018              STR      r0,[r3,#0]            ;1183
00003e  2001              MOVS     r0,#1                 ;1185
000040  e7e9              B        |L4.22|
;;;1187   
                          ENDP

000042  0000              DCW      0x0000
                  |L4.68|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_Close||, CODE, READONLY, ALIGN=2

                  DrvSPI_Close PROC
;;;437    /*---------------------------------------------------------------------------------------------------------*/
;;;438    void DrvSPI_Close(E_DRVSPI_PORT eSpiPort)
000000  b570              PUSH     {r4-r6,lr}
;;;439    {
000002  4604              MOV      r4,r0
;;;440        int32_t i32TimeOut;
;;;441        
;;;442        g_sSpiHandler[eSpiPort].bInUse = FALSE;
000004  2100              MOVS     r1,#0
000006  2014              MOVS     r0,#0x14
000008  4360              MULS     r0,r4,r0
00000a  4a4b              LDR      r2,|L5.312|
00000c  5411              STRB     r1,[r2,r0]
;;;443        g_sSpiHandler[eSpiPort].pfnOneTransDoneCallBack = NULL;
00000e  2014              MOVS     r0,#0x14
000010  4360              MULS     r0,r4,r0
000012  1880              ADDS     r0,r0,r2
000014  6041              STR      r1,[r0,#4]
;;;444        g_sSpiHandler[eSpiPort].u32OneTransDoneUserData = 0;
000016  2014              MOVS     r0,#0x14
000018  4360              MULS     r0,r4,r0
00001a  1880              ADDS     r0,r0,r2
00001c  6081              STR      r1,[r0,#8]
;;;445        g_sSpiHandler[eSpiPort].pfn3WireStartCallBack = NULL;
00001e  2014              MOVS     r0,#0x14
000020  4360              MULS     r0,r4,r0
000022  1880              ADDS     r0,r0,r2
000024  60c1              STR      r1,[r0,#0xc]
;;;446        g_sSpiHandler[eSpiPort].u32ThreeWireStartUserData = 0;
000026  2014              MOVS     r0,#0x14
000028  4360              MULS     r0,r4,r0
00002a  1880              ADDS     r0,r0,r2
00002c  6101              STR      r1,[r0,#0x10]
;;;447    
;;;448        /* Check SPI state */
;;;449        i32TimeOut = 0x10000;
00002e  2501              MOVS     r5,#1
000030  042d              LSLS     r5,r5,#16
;;;450        while(SPI_PORT[eSpiPort]->CNTRL.GO_BUSY == 1)
000032  e004              B        |L5.62|
                  |L5.52|
;;;451        {
;;;452            if(i32TimeOut-- <= 0)
000034  4628              MOV      r0,r5
000036  1e6d              SUBS     r5,r5,#1
000038  2800              CMP      r0,#0
00003a  dc00              BGT      |L5.62|
;;;453                break;
00003c  e007              B        |L5.78|
                  |L5.62|
00003e  00a0              LSLS     r0,r4,#2              ;450
000040  493e              LDR      r1,|L5.316|
000042  5808              LDR      r0,[r1,r0]            ;450
000044  6800              LDR      r0,[r0,#0]            ;450
000046  07c0              LSLS     r0,r0,#31             ;450
000048  0fc0              LSRS     r0,r0,#31             ;450
00004a  2800              CMP      r0,#0                 ;450
00004c  d1f2              BNE      |L5.52|
                  |L5.78|
00004e  bf00              NOP      
;;;454        }
;;;455       
;;;456       if(eSpiPort == eDRVSPI_PORT0)
000050  2c00              CMP      r4,#0
000052  d11c              BNE      |L5.142|
;;;457        {
;;;458            NVIC_DisableIRQ(SPI0_IRQn);
000054  200e              MOVS     r0,#0xe
000056  f7fffffe          BL       NVIC_DisableIRQ
;;;459            SYS->IPRSTC2.SPI0_RST=1;
00005a  2005              MOVS     r0,#5
00005c  0700              LSLS     r0,r0,#28
00005e  68c0              LDR      r0,[r0,#0xc]
000060  2101              MOVS     r1,#1
000062  0309              LSLS     r1,r1,#12
000064  4388              BICS     r0,r0,r1
000066  1840              ADDS     r0,r0,r1
000068  2105              MOVS     r1,#5
00006a  0709              LSLS     r1,r1,#28
00006c  60c8              STR      r0,[r1,#0xc]
;;;460            SYS->IPRSTC2.SPI0_RST=0;
00006e  4608              MOV      r0,r1
000070  68c0              LDR      r0,[r0,#0xc]
000072  2101              MOVS     r1,#1
000074  0309              LSLS     r1,r1,#12
000076  4388              BICS     r0,r0,r1
000078  2105              MOVS     r1,#5
00007a  0709              LSLS     r1,r1,#28
00007c  60c8              STR      r0,[r1,#0xc]
;;;461            SYSCLK->APBCLK.SPI0_EN=0;
00007e  4830              LDR      r0,|L5.320|
000080  6880              LDR      r0,[r0,#8]
000082  2101              MOVS     r1,#1
000084  0309              LSLS     r1,r1,#12
000086  4388              BICS     r0,r0,r1
000088  492d              LDR      r1,|L5.320|
00008a  6088              STR      r0,[r1,#8]
00008c  e053              B        |L5.310|
                  |L5.142|
;;;462        }
;;;463        else if(eSpiPort == eDRVSPI_PORT1)
00008e  2c01              CMP      r4,#1
000090  d119              BNE      |L5.198|
;;;464        {
;;;465            NVIC_DisableIRQ(SPI1_IRQn);
000092  200f              MOVS     r0,#0xf
000094  f7fffffe          BL       NVIC_DisableIRQ
;;;466            SYS->IPRSTC2.SPI1_RST=1;
000098  2005              MOVS     r0,#5
00009a  0700              LSLS     r0,r0,#28
00009c  68c0              LDR      r0,[r0,#0xc]
00009e  0361              LSLS     r1,r4,#13
0000a0  4388              BICS     r0,r0,r1
0000a2  1840              ADDS     r0,r0,r1
0000a4  2105              MOVS     r1,#5
0000a6  0709              LSLS     r1,r1,#28
0000a8  60c8              STR      r0,[r1,#0xc]
;;;467            SYS->IPRSTC2.SPI1_RST=0;
0000aa  4608              MOV      r0,r1
0000ac  68c0              LDR      r0,[r0,#0xc]
0000ae  0361              LSLS     r1,r4,#13
0000b0  4388              BICS     r0,r0,r1
0000b2  2105              MOVS     r1,#5
0000b4  0709              LSLS     r1,r1,#28
0000b6  60c8              STR      r0,[r1,#0xc]
;;;468            SYSCLK->APBCLK.SPI1_EN=0;
0000b8  4821              LDR      r0,|L5.320|
0000ba  6880              LDR      r0,[r0,#8]
0000bc  0361              LSLS     r1,r4,#13
0000be  4388              BICS     r0,r0,r1
0000c0  491f              LDR      r1,|L5.320|
0000c2  6088              STR      r0,[r1,#8]
0000c4  e037              B        |L5.310|
                  |L5.198|
;;;469        }
;;;470        else if(eSpiPort == eDRVSPI_PORT2)
0000c6  2c02              CMP      r4,#2
0000c8  d119              BNE      |L5.254|
;;;471        {
;;;472            NVIC_DisableIRQ(SPI2_IRQn);
0000ca  2010              MOVS     r0,#0x10
0000cc  f7fffffe          BL       NVIC_DisableIRQ
;;;473            SYS->IPRSTC2.SPI2_RST=1;
0000d0  2005              MOVS     r0,#5
0000d2  0700              LSLS     r0,r0,#28
0000d4  68c0              LDR      r0,[r0,#0xc]
0000d6  0361              LSLS     r1,r4,#13
0000d8  4388              BICS     r0,r0,r1
0000da  1840              ADDS     r0,r0,r1
0000dc  2105              MOVS     r1,#5
0000de  0709              LSLS     r1,r1,#28
0000e0  60c8              STR      r0,[r1,#0xc]
;;;474            SYS->IPRSTC2.SPI2_RST=0;
0000e2  4608              MOV      r0,r1
0000e4  68c0              LDR      r0,[r0,#0xc]
0000e6  0361              LSLS     r1,r4,#13
0000e8  4388              BICS     r0,r0,r1
0000ea  2105              MOVS     r1,#5
0000ec  0709              LSLS     r1,r1,#28
0000ee  60c8              STR      r0,[r1,#0xc]
;;;475            SYSCLK->APBCLK.SPI2_EN=0;
0000f0  4813              LDR      r0,|L5.320|
0000f2  6880              LDR      r0,[r0,#8]
0000f4  0361              LSLS     r1,r4,#13
0000f6  4388              BICS     r0,r0,r1
0000f8  4911              LDR      r1,|L5.320|
0000fa  6088              STR      r0,[r1,#8]
0000fc  e01b              B        |L5.310|
                  |L5.254|
;;;476        }
;;;477        else
;;;478        {
;;;479            NVIC_DisableIRQ(SPI3_IRQn);
0000fe  2011              MOVS     r0,#0x11
000100  f7fffffe          BL       NVIC_DisableIRQ
;;;480            SYS->IPRSTC2.SPI3_RST=1;
000104  2005              MOVS     r0,#5
000106  0700              LSLS     r0,r0,#28
000108  68c0              LDR      r0,[r0,#0xc]
00010a  2101              MOVS     r1,#1
00010c  03c9              LSLS     r1,r1,#15
00010e  4388              BICS     r0,r0,r1
000110  1840              ADDS     r0,r0,r1
000112  2105              MOVS     r1,#5
000114  0709              LSLS     r1,r1,#28
000116  60c8              STR      r0,[r1,#0xc]
;;;481            SYS->IPRSTC2.SPI3_RST=0;
000118  4608              MOV      r0,r1
00011a  68c0              LDR      r0,[r0,#0xc]
00011c  2101              MOVS     r1,#1
00011e  03c9              LSLS     r1,r1,#15
000120  4388              BICS     r0,r0,r1
000122  2105              MOVS     r1,#5
000124  0709              LSLS     r1,r1,#28
000126  60c8              STR      r0,[r1,#0xc]
;;;482            SYSCLK->APBCLK.SPI3_EN=0;
000128  4805              LDR      r0,|L5.320|
00012a  6880              LDR      r0,[r0,#8]
00012c  2101              MOVS     r1,#1
00012e  03c9              LSLS     r1,r1,#15
000130  4388              BICS     r0,r0,r1
000132  4903              LDR      r1,|L5.320|
000134  6088              STR      r0,[r1,#8]
                  |L5.310|
;;;483        }
;;;484       
;;;485    }
000136  bd70              POP      {r4-r6,pc}
;;;486    
                          ENDP

                  |L5.312|
                          DCD      g_sSpiHandler
                  |L5.316|
                          DCD      SPI_PORT
                  |L5.320|
                          DCD      0x50000200

                          AREA ||i.DrvSPI_Clr3WireStartIntFlag||, CODE, READONLY, ALIGN=2

                  DrvSPI_Clr3WireStartIntFlag PROC
;;;1524   /*---------------------------------------------------------------------------------------------------------*/
;;;1525   void DrvSPI_Clr3WireStartIntFlag(E_DRVSPI_PORT eSpiPort)
000000  0081              LSLS     r1,r0,#2
;;;1526   {
;;;1527       SPI_PORT[eSpiPort]->CNTRL2.SLV_START_INTSTS = 1;
000002  4a06              LDR      r2,|L6.28|
000004  5851              LDR      r1,[r2,r1]
000006  6bc9              LDR      r1,[r1,#0x3c]
000008  2201              MOVS     r2,#1
00000a  02d2              LSLS     r2,r2,#11
00000c  4391              BICS     r1,r1,r2
00000e  1889              ADDS     r1,r1,r2
000010  0082              LSLS     r2,r0,#2
000012  4b02              LDR      r3,|L6.28|
000014  589a              LDR      r2,[r3,r2]
000016  63d1              STR      r1,[r2,#0x3c]
;;;1528   }
000018  4770              BX       lr
;;;1529   
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_ClrGo||, CODE, READONLY, ALIGN=2

                  DrvSPI_ClrGo PROC
;;;1274   /*---------------------------------------------------------------------------------------------------------*/
;;;1275   void DrvSPI_ClrGo(E_DRVSPI_PORT eSpiPort)
000000  0081              LSLS     r1,r0,#2
;;;1276   {
;;;1277       SPI_PORT[eSpiPort]->CNTRL.GO_BUSY = 0;
000002  4a05              LDR      r2,|L7.24|
000004  5851              LDR      r1,[r2,r1]
000006  6809              LDR      r1,[r1,#0]
000008  0849              LSRS     r1,r1,#1
00000a  0049              LSLS     r1,r1,#1
00000c  0082              LSLS     r2,r0,#2
00000e  4b02              LDR      r3,|L7.24|
000010  589a              LDR      r2,[r3,r2]
000012  6011              STR      r1,[r2,#0]
;;;1278   }
000014  4770              BX       lr
;;;1279   
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_ClrIntFlag||, CODE, READONLY, ALIGN=2

                  DrvSPI_ClrIntFlag PROC
;;;1082   /*---------------------------------------------------------------------------------------------------------*/
;;;1083   void DrvSPI_ClrIntFlag(E_DRVSPI_PORT eSpiPort)
000000  0081              LSLS     r1,r0,#2
;;;1084   {
;;;1085       SPI_PORT[eSpiPort]->CNTRL.IF = 1;
000002  4a06              LDR      r2,|L8.28|
000004  5851              LDR      r1,[r2,r1]
000006  6809              LDR      r1,[r1,#0]
000008  2201              MOVS     r2,#1
00000a  0412              LSLS     r2,r2,#16
00000c  4391              BICS     r1,r1,r2
00000e  1889              ADDS     r1,r1,r2
000010  0082              LSLS     r2,r0,#2
000012  4b02              LDR      r3,|L8.28|
000014  589a              LDR      r2,[r3,r2]
000016  6011              STR      r1,[r2,#0]
;;;1086   }
000018  4770              BX       lr
;;;1087   
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_ClrSS||, CODE, READONLY, ALIGN=2

                  DrvSPI_ClrSS PROC
;;;770    /*---------------------------------------------------------------------------------------------------------*/
;;;771    void DrvSPI_ClrSS(E_DRVSPI_PORT eSpiPort, E_DRVSPI_SLAVE_SEL eSlaveSel)
000000  b530              PUSH     {r4,r5,lr}
;;;772    {
000002  460a              MOV      r2,r1
;;;773        uint32_t u32Reg;
;;;774        
;;;775        u32Reg = SPI_PORT[eSpiPort]->SSR.SSR;
000004  0083              LSLS     r3,r0,#2
000006  4c09              LDR      r4,|L9.44|
000008  58e3              LDR      r3,[r4,r3]
00000a  689b              LDR      r3,[r3,#8]
00000c  0799              LSLS     r1,r3,#30
00000e  0f89              LSRS     r1,r1,#30
;;;776        u32Reg = u32Reg & (~eSlaveSel);
000010  460b              MOV      r3,r1
000012  4393              BICS     r3,r3,r2
000014  4619              MOV      r1,r3
;;;777        SPI_PORT[eSpiPort]->SSR.SSR = u32Reg;
000016  0083              LSLS     r3,r0,#2
000018  58e3              LDR      r3,[r4,r3]
00001a  689b              LDR      r3,[r3,#8]
00001c  089b              LSRS     r3,r3,#2
00001e  009b              LSLS     r3,r3,#2
000020  430b              ORRS     r3,r3,r1
000022  0084              LSLS     r4,r0,#2
000024  4d01              LDR      r5,|L9.44|
000026  592c              LDR      r4,[r5,r4]
000028  60a3              STR      r3,[r4,#8]
;;;778    }
00002a  bd30              POP      {r4,r5,pc}
;;;779    
                          ENDP

                  |L9.44|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_Disable3Wire||, CODE, READONLY, ALIGN=2

                  DrvSPI_Disable3Wire PROC
;;;1381   /*---------------------------------------------------------------------------------------------------------*/
;;;1382   void DrvSPI_Disable3Wire(E_DRVSPI_PORT eSpiPort)
000000  0081              LSLS     r1,r0,#2
;;;1383   {
;;;1384       SPI_PORT[eSpiPort]->CNTRL2.NOSLVSEL = 0;
000002  4a05              LDR      r2,|L10.24|
000004  5851              LDR      r1,[r2,r1]
000006  6bc9              LDR      r1,[r1,#0x3c]
000008  22ff              MOVS     r2,#0xff
00000a  3201              ADDS     r2,#1
00000c  4391              BICS     r1,r1,r2
00000e  0082              LSLS     r2,r0,#2
000010  4b01              LDR      r3,|L10.24|
000012  589a              LDR      r2,[r3,r2]
000014  63d1              STR      r1,[r2,#0x3c]
;;;1385   }
000016  4770              BX       lr
;;;1386   
                          ENDP

                  |L10.24|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_Disable3WireStartInt||, CODE, READONLY, ALIGN=2

                  DrvSPI_Disable3WireStartInt PROC
;;;1467   /*---------------------------------------------------------------------------------------------------------*/
;;;1468   void DrvSPI_Disable3WireStartInt(E_DRVSPI_PORT eSpiPort)
000000  b510              PUSH     {r4,lr}
;;;1469   {
000002  4604              MOV      r4,r0
;;;1470       g_sSpiHandler[eSpiPort].pfn3WireStartCallBack = NULL;
000004  2100              MOVS     r1,#0
000006  2014              MOVS     r0,#0x14
000008  4360              MULS     r0,r4,r0
00000a  4a14              LDR      r2,|L11.92|
00000c  1880              ADDS     r0,r0,r2
00000e  60c1              STR      r1,[r0,#0xc]
;;;1471       g_sSpiHandler[eSpiPort].u32ThreeWireStartUserData = 0;
000010  2014              MOVS     r0,#0x14
000012  4360              MULS     r0,r4,r0
000014  1880              ADDS     r0,r0,r2
000016  6101              STR      r1,[r0,#0x10]
;;;1472       
;;;1473       SPI_PORT[eSpiPort]->CNTRL2.SSTA_INTEN = 0;
000018  00a0              LSLS     r0,r4,#2
00001a  4911              LDR      r1,|L11.96|
00001c  5808              LDR      r0,[r1,r0]
00001e  6bc0              LDR      r0,[r0,#0x3c]
000020  2101              MOVS     r1,#1
000022  0289              LSLS     r1,r1,#10
000024  4388              BICS     r0,r0,r1
000026  00a1              LSLS     r1,r4,#2
000028  4a0d              LDR      r2,|L11.96|
00002a  5851              LDR      r1,[r2,r1]
00002c  63c8              STR      r0,[r1,#0x3c]
;;;1474   
;;;1475       if(eSpiPort == eDRVSPI_PORT0)
00002e  2c00              CMP      r4,#0
000030  d103              BNE      |L11.58|
;;;1476       {
;;;1477           NVIC_DisableIRQ(SPI0_IRQn);
000032  200e              MOVS     r0,#0xe
000034  f7fffffe          BL       NVIC_DisableIRQ
000038  e00e              B        |L11.88|
                  |L11.58|
;;;1478       }
;;;1479       else if(eSpiPort == eDRVSPI_PORT1)
00003a  2c01              CMP      r4,#1
00003c  d103              BNE      |L11.70|
;;;1480       {
;;;1481           NVIC_DisableIRQ(SPI1_IRQn);
00003e  200f              MOVS     r0,#0xf
000040  f7fffffe          BL       NVIC_DisableIRQ
000044  e008              B        |L11.88|
                  |L11.70|
;;;1482       }
;;;1483       else if(eSpiPort == eDRVSPI_PORT2)
000046  2c02              CMP      r4,#2
000048  d103              BNE      |L11.82|
;;;1484       {
;;;1485           NVIC_DisableIRQ(SPI2_IRQn);
00004a  2010              MOVS     r0,#0x10
00004c  f7fffffe          BL       NVIC_DisableIRQ
000050  e002              B        |L11.88|
                  |L11.82|
;;;1486       }
;;;1487       else
;;;1488       {
;;;1489           NVIC_DisableIRQ(SPI3_IRQn);
000052  2011              MOVS     r0,#0x11
000054  f7fffffe          BL       NVIC_DisableIRQ
                  |L11.88|
;;;1490       }
;;;1491   }
000058  bd10              POP      {r4,pc}
;;;1492   
                          ENDP

00005a  0000              DCW      0x0000
                  |L11.92|
                          DCD      g_sSpiHandler
                  |L11.96|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_DisableAutoSS||, CODE, READONLY, ALIGN=2

                  DrvSPI_DisableAutoSS PROC
;;;728    /*---------------------------------------------------------------------------------------------------------*/
;;;729    void DrvSPI_DisableAutoSS(E_DRVSPI_PORT eSpiPort)
000000  0081              LSLS     r1,r0,#2
;;;730    {
;;;731        SPI_PORT[eSpiPort]->SSR.AUTOSS = 0;
000002  4a09              LDR      r2,|L12.40|
000004  5851              LDR      r1,[r2,r1]
000006  6889              LDR      r1,[r1,#8]
000008  2208              MOVS     r2,#8
00000a  4391              BICS     r1,r1,r2
00000c  0082              LSLS     r2,r0,#2
00000e  4b06              LDR      r3,|L12.40|
000010  589a              LDR      r2,[r3,r2]
000012  6091              STR      r1,[r2,#8]
;;;732        SPI_PORT[eSpiPort]->SSR.SSR = eDRVSPI_NONE;
000014  0081              LSLS     r1,r0,#2
000016  461a              MOV      r2,r3
000018  5851              LDR      r1,[r2,r1]
00001a  6889              LDR      r1,[r1,#8]
00001c  0889              LSRS     r1,r1,#2
00001e  0089              LSLS     r1,r1,#2
000020  0082              LSLS     r2,r0,#2
000022  589a              LDR      r2,[r3,r2]
000024  6091              STR      r1,[r2,#8]
;;;733    }
000026  4770              BX       lr
;;;734    
                          ENDP

                  |L12.40|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_DisableDivOne||, CODE, READONLY, ALIGN=2

                  DrvSPI_DisableDivOne PROC
;;;1345   /*---------------------------------------------------------------------------------------------------------*/
;;;1346   void DrvSPI_DisableDivOne(E_DRVSPI_PORT eSpiPort)
000000  0081              LSLS     r1,r0,#2
;;;1347   {
;;;1348       SPI_PORT[eSpiPort]->CNTRL2.DIV_ONE = 0;
000002  4a05              LDR      r2,|L13.24|
000004  5851              LDR      r1,[r2,r1]
000006  6bc9              LDR      r1,[r1,#0x3c]
000008  0849              LSRS     r1,r1,#1
00000a  0049              LSLS     r1,r1,#1
00000c  0082              LSLS     r2,r0,#2
00000e  4b02              LDR      r3,|L13.24|
000010  589a              LDR      r2,[r3,r2]
000012  63d1              STR      r1,[r2,#0x3c]
;;;1349   }
000014  4770              BX       lr
;;;1350   
                          ENDP

000016  0000              DCW      0x0000
                  |L13.24|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvSPI_DisableInt PROC
;;;1027   /*---------------------------------------------------------------------------------------------------------*/
;;;1028   void DrvSPI_DisableInt(E_DRVSPI_PORT eSpiPort)
000000  b510              PUSH     {r4,lr}
;;;1029   {
000002  4604              MOV      r4,r0
;;;1030       g_sSpiHandler[eSpiPort].pfnOneTransDoneCallBack = NULL;
000004  2100              MOVS     r1,#0
000006  2014              MOVS     r0,#0x14
000008  4360              MULS     r0,r4,r0
00000a  4a14              LDR      r2,|L14.92|
00000c  1880              ADDS     r0,r0,r2
00000e  6041              STR      r1,[r0,#4]
;;;1031       g_sSpiHandler[eSpiPort].u32OneTransDoneUserData = 0;
000010  2014              MOVS     r0,#0x14
000012  4360              MULS     r0,r4,r0
000014  1880              ADDS     r0,r0,r2
000016  6081              STR      r1,[r0,#8]
;;;1032       
;;;1033       SPI_PORT[eSpiPort]->CNTRL.IE = 0;
000018  00a0              LSLS     r0,r4,#2
00001a  4911              LDR      r1,|L14.96|
00001c  5808              LDR      r0,[r1,r0]
00001e  6800              LDR      r0,[r0,#0]
000020  2101              MOVS     r1,#1
000022  0449              LSLS     r1,r1,#17
000024  4388              BICS     r0,r0,r1
000026  00a1              LSLS     r1,r4,#2
000028  4a0d              LDR      r2,|L14.96|
00002a  5851              LDR      r1,[r2,r1]
00002c  6008              STR      r0,[r1,#0]
;;;1034   
;;;1035       if(eSpiPort == eDRVSPI_PORT0)
00002e  2c00              CMP      r4,#0
000030  d103              BNE      |L14.58|
;;;1036       {
;;;1037           NVIC_DisableIRQ(SPI0_IRQn);
000032  200e              MOVS     r0,#0xe
000034  f7fffffe          BL       NVIC_DisableIRQ
000038  e00e              B        |L14.88|
                  |L14.58|
;;;1038       }
;;;1039       else if(eSpiPort == eDRVSPI_PORT1)
00003a  2c01              CMP      r4,#1
00003c  d103              BNE      |L14.70|
;;;1040       {
;;;1041           NVIC_DisableIRQ(SPI1_IRQn);
00003e  200f              MOVS     r0,#0xf
000040  f7fffffe          BL       NVIC_DisableIRQ
000044  e008              B        |L14.88|
                  |L14.70|
;;;1042       }
;;;1043       else if(eSpiPort == eDRVSPI_PORT2)
000046  2c02              CMP      r4,#2
000048  d103              BNE      |L14.82|
;;;1044       {
;;;1045           NVIC_DisableIRQ(SPI2_IRQn);
00004a  2010              MOVS     r0,#0x10
00004c  f7fffffe          BL       NVIC_DisableIRQ
000050  e002              B        |L14.88|
                  |L14.82|
;;;1046       }
;;;1047       else
;;;1048       {
;;;1049           NVIC_DisableIRQ(SPI3_IRQn);
000052  2011              MOVS     r0,#0x11
000054  f7fffffe          BL       NVIC_DisableIRQ
                  |L14.88|
;;;1050       }
;;;1051   }
000058  bd10              POP      {r4,pc}
;;;1052   
                          ENDP

00005a  0000              DCW      0x0000
                  |L14.92|
                          DCD      g_sSpiHandler
                  |L14.96|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_DumpRxRegister||, CODE, READONLY, ALIGN=2

                  DrvSPI_DumpRxRegister PROC
;;;1201   /*---------------------------------------------------------------------------------------------------------*/
;;;1202   uint32_t DrvSPI_DumpRxRegister(E_DRVSPI_PORT eSpiPort, uint32_t *pu32Buf, uint32_t u32DataCount)
000000  b530              PUSH     {r4,r5,lr}
;;;1203   {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;1204       uint32_t i;
;;;1205       
;;;1206       if(u32DataCount>2)
000006  2a02              CMP      r2,#2
000008  d900              BLS      |L15.12|
;;;1207           u32DataCount = 2;
00000a  2202              MOVS     r2,#2
                  |L15.12|
;;;1208       
;;;1209       for(i=0; i<u32DataCount; i++)
00000c  2100              MOVS     r1,#0
00000e  e008              B        |L15.34|
                  |L15.16|
;;;1210       {
;;;1211           pu32Buf[i] = SPI_PORT[eSpiPort]->RX[i];
000010  0098              LSLS     r0,r3,#2
000012  4d06              LDR      r5,|L15.44|
000014  5828              LDR      r0,[r5,r0]
000016  3010              ADDS     r0,r0,#0x10
000018  008d              LSLS     r5,r1,#2
00001a  5940              LDR      r0,[r0,r5]
00001c  008d              LSLS     r5,r1,#2
00001e  5160              STR      r0,[r4,r5]
000020  1c49              ADDS     r1,r1,#1              ;1209
                  |L15.34|
000022  4291              CMP      r1,r2                 ;1209
000024  d3f4              BCC      |L15.16|
;;;1212       }
;;;1213   
;;;1214       return u32DataCount;
000026  4610              MOV      r0,r2
;;;1215   }
000028  bd30              POP      {r4,r5,pc}
;;;1216   
                          ENDP

00002a  0000              DCW      0x0000
                  |L15.44|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_Enable3Wire||, CODE, READONLY, ALIGN=2

                  DrvSPI_Enable3Wire PROC
;;;1363   /*---------------------------------------------------------------------------------------------------------*/
;;;1364   void DrvSPI_Enable3Wire(E_DRVSPI_PORT eSpiPort)
000000  0081              LSLS     r1,r0,#2
;;;1365   {
;;;1366       SPI_PORT[eSpiPort]->CNTRL2.NOSLVSEL = 1;
000002  4a06              LDR      r2,|L16.28|
000004  5851              LDR      r1,[r2,r1]
000006  6bc9              LDR      r1,[r1,#0x3c]
000008  22ff              MOVS     r2,#0xff
00000a  3201              ADDS     r2,#1
00000c  4391              BICS     r1,r1,r2
00000e  1889              ADDS     r1,r1,r2
000010  0082              LSLS     r2,r0,#2
000012  4b02              LDR      r3,|L16.28|
000014  589a              LDR      r2,[r3,r2]
000016  63d1              STR      r1,[r2,#0x3c]
;;;1367   }
000018  4770              BX       lr
;;;1368   
                          ENDP

00001a  0000              DCW      0x0000
                  |L16.28|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_Enable3WireStartInt||, CODE, READONLY, ALIGN=2

                  DrvSPI_Enable3WireStartInt PROC
;;;1421   /*---------------------------------------------------------------------------------------------------------*/
;;;1422   void DrvSPI_Enable3WireStartInt(E_DRVSPI_PORT eSpiPort, PFN_DRVSPI_CALLBACK pfnCallback, uint32_t u32UserData)
000000  b570              PUSH     {r4-r6,lr}
;;;1423   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;1424       
;;;1425       if(pfnCallback != NULL)
000008  2d00              CMP      r5,#0
00000a  d008              BEQ      |L17.30|
;;;1426       {
;;;1427           g_sSpiHandler[eSpiPort].pfn3WireStartCallBack = pfnCallback;
00000c  2014              MOVS     r0,#0x14
00000e  4360              MULS     r0,r4,r0
000010  491c              LDR      r1,|L17.132|
000012  1840              ADDS     r0,r0,r1
000014  60c5              STR      r5,[r0,#0xc]
;;;1428           g_sSpiHandler[eSpiPort].u32ThreeWireStartUserData = u32UserData;
000016  2014              MOVS     r0,#0x14
000018  4360              MULS     r0,r4,r0
00001a  1840              ADDS     r0,r0,r1
00001c  6106              STR      r6,[r0,#0x10]
                  |L17.30|
;;;1429       }
;;;1430       
;;;1431       SPI_PORT[eSpiPort]->CNTRL2.SSTA_INTEN = 1;
00001e  00a0              LSLS     r0,r4,#2
000020  4919              LDR      r1,|L17.136|
000022  5808              LDR      r0,[r1,r0]
000024  6bc0              LDR      r0,[r0,#0x3c]
000026  2101              MOVS     r1,#1
000028  0289              LSLS     r1,r1,#10
00002a  4388              BICS     r0,r0,r1
00002c  1840              ADDS     r0,r0,r1
00002e  00a1              LSLS     r1,r4,#2
000030  4a15              LDR      r2,|L17.136|
000032  5851              LDR      r1,[r2,r1]
000034  63c8              STR      r0,[r1,#0x3c]
;;;1432       
;;;1433       if(eSpiPort == eDRVSPI_PORT0)
000036  2c00              CMP      r4,#0
000038  d107              BNE      |L17.74|
;;;1434       {
;;;1435           NVIC_SetPriority(SPI0_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
00003a  2102              MOVS     r1,#2
00003c  200e              MOVS     r0,#0xe
00003e  f7fffffe          BL       NVIC_SetPriority
;;;1436           NVIC_EnableIRQ(SPI0_IRQn);
000042  200e              MOVS     r0,#0xe
000044  f7fffffe          BL       NVIC_EnableIRQ
000048  e01a              B        |L17.128|
                  |L17.74|
;;;1437       }
;;;1438       else if(eSpiPort == eDRVSPI_PORT1)
00004a  2c01              CMP      r4,#1
00004c  d107              BNE      |L17.94|
;;;1439       {
;;;1440           NVIC_SetPriority(SPI1_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
00004e  2102              MOVS     r1,#2
000050  200f              MOVS     r0,#0xf
000052  f7fffffe          BL       NVIC_SetPriority
;;;1441           NVIC_EnableIRQ(SPI1_IRQn);
000056  200f              MOVS     r0,#0xf
000058  f7fffffe          BL       NVIC_EnableIRQ
00005c  e010              B        |L17.128|
                  |L17.94|
;;;1442       }
;;;1443       else if(eSpiPort == eDRVSPI_PORT2)
00005e  2c02              CMP      r4,#2
000060  d107              BNE      |L17.114|
;;;1444       {
;;;1445           NVIC_SetPriority(SPI2_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
000062  2102              MOVS     r1,#2
000064  2010              MOVS     r0,#0x10
000066  f7fffffe          BL       NVIC_SetPriority
;;;1446           NVIC_EnableIRQ(SPI2_IRQn);
00006a  2010              MOVS     r0,#0x10
00006c  f7fffffe          BL       NVIC_EnableIRQ
000070  e006              B        |L17.128|
                  |L17.114|
;;;1447       }
;;;1448       else
;;;1449       {
;;;1450           NVIC_SetPriority(SPI3_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
000072  2102              MOVS     r1,#2
000074  2011              MOVS     r0,#0x11
000076  f7fffffe          BL       NVIC_SetPriority
;;;1451           NVIC_EnableIRQ(SPI3_IRQn);
00007a  2011              MOVS     r0,#0x11
00007c  f7fffffe          BL       NVIC_EnableIRQ
                  |L17.128|
;;;1452       }
;;;1453   }   
000080  bd70              POP      {r4-r6,pc}
;;;1454   
                          ENDP

000082  0000              DCW      0x0000
                  |L17.132|
                          DCD      g_sSpiHandler
                  |L17.136|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_EnableAutoSS||, CODE, READONLY, ALIGN=2

                  DrvSPI_EnableAutoSS PROC
;;;710    /*---------------------------------------------------------------------------------------------------------*/
;;;711    void DrvSPI_EnableAutoSS(E_DRVSPI_PORT eSpiPort, E_DRVSPI_SLAVE_SEL eSlaveSel)
000000  b510              PUSH     {r4,lr}
;;;712    {
;;;713        SPI_PORT[eSpiPort]->SSR.AUTOSS = 1;
000002  0082              LSLS     r2,r0,#2
000004  4b0b              LDR      r3,|L18.52|
000006  589a              LDR      r2,[r3,r2]
000008  6892              LDR      r2,[r2,#8]
00000a  2308              MOVS     r3,#8
00000c  439a              BICS     r2,r2,r3
00000e  3208              ADDS     r2,r2,#8
000010  0083              LSLS     r3,r0,#2
000012  4c08              LDR      r4,|L18.52|
000014  58e3              LDR      r3,[r4,r3]
000016  609a              STR      r2,[r3,#8]
;;;714        SPI_PORT[eSpiPort]->SSR.SSR = eSlaveSel;
000018  0082              LSLS     r2,r0,#2
00001a  4623              MOV      r3,r4
00001c  589a              LDR      r2,[r3,r2]
00001e  6892              LDR      r2,[r2,#8]
000020  0892              LSRS     r2,r2,#2
000022  0092              LSLS     r2,r2,#2
000024  078b              LSLS     r3,r1,#30
000026  0f9b              LSRS     r3,r3,#30
000028  431a              ORRS     r2,r2,r3
00002a  0083              LSLS     r3,r0,#2
00002c  58e3              LDR      r3,[r4,r3]
00002e  609a              STR      r2,[r3,#8]
;;;715    }
000030  bd10              POP      {r4,pc}
;;;716    
                          ENDP

000032  0000              DCW      0x0000
                  |L18.52|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_EnableDivOne||, CODE, READONLY, ALIGN=2

                  DrvSPI_EnableDivOne PROC
;;;1327   /*---------------------------------------------------------------------------------------------------------*/
;;;1328   void DrvSPI_EnableDivOne(E_DRVSPI_PORT eSpiPort)
000000  0081              LSLS     r1,r0,#2
;;;1329   {
;;;1330       SPI_PORT[eSpiPort]->CNTRL2.DIV_ONE = 1;
000002  4a05              LDR      r2,|L19.24|
000004  5851              LDR      r1,[r2,r1]
000006  6bc9              LDR      r1,[r1,#0x3c]
000008  0849              LSRS     r1,r1,#1
00000a  0049              LSLS     r1,r1,#1
00000c  1c49              ADDS     r1,r1,#1
00000e  0082              LSLS     r2,r0,#2
000010  4b01              LDR      r3,|L19.24|
000012  589a              LDR      r2,[r3,r2]
000014  63d1              STR      r1,[r2,#0x3c]
;;;1331   }
000016  4770              BX       lr
;;;1332   
                          ENDP

                  |L19.24|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvSPI_EnableInt PROC
;;;982    /*---------------------------------------------------------------------------------------------------------*/
;;;983    void DrvSPI_EnableInt(E_DRVSPI_PORT eSpiPort, PFN_DRVSPI_CALLBACK pfnCallback, uint32_t u32UserData)
000000  b570              PUSH     {r4-r6,lr}
;;;984    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;985        
;;;986        if(pfnCallback != NULL)
000008  2d00              CMP      r5,#0
00000a  d008              BEQ      |L20.30|
;;;987        {
;;;988            g_sSpiHandler[eSpiPort].pfnOneTransDoneCallBack = pfnCallback;
00000c  2014              MOVS     r0,#0x14
00000e  4360              MULS     r0,r4,r0
000010  491c              LDR      r1,|L20.132|
000012  1840              ADDS     r0,r0,r1
000014  6045              STR      r5,[r0,#4]
;;;989            g_sSpiHandler[eSpiPort].u32OneTransDoneUserData = u32UserData;
000016  2014              MOVS     r0,#0x14
000018  4360              MULS     r0,r4,r0
00001a  1840              ADDS     r0,r0,r1
00001c  6086              STR      r6,[r0,#8]
                  |L20.30|
;;;990        }
;;;991        
;;;992        SPI_PORT[eSpiPort]->CNTRL.IE = 1;
00001e  00a0              LSLS     r0,r4,#2
000020  4919              LDR      r1,|L20.136|
000022  5808              LDR      r0,[r1,r0]
000024  6800              LDR      r0,[r0,#0]
000026  2101              MOVS     r1,#1
000028  0449              LSLS     r1,r1,#17
00002a  4388              BICS     r0,r0,r1
00002c  1840              ADDS     r0,r0,r1
00002e  00a1              LSLS     r1,r4,#2
000030  4a15              LDR      r2,|L20.136|
000032  5851              LDR      r1,[r2,r1]
000034  6008              STR      r0,[r1,#0]
;;;993        
;;;994        if(eSpiPort == eDRVSPI_PORT0)
000036  2c00              CMP      r4,#0
000038  d107              BNE      |L20.74|
;;;995        {
;;;996            NVIC_SetPriority(SPI0_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
00003a  2102              MOVS     r1,#2
00003c  200e              MOVS     r0,#0xe
00003e  f7fffffe          BL       NVIC_SetPriority
;;;997            NVIC_EnableIRQ(SPI0_IRQn);
000042  200e              MOVS     r0,#0xe
000044  f7fffffe          BL       NVIC_EnableIRQ
000048  e01a              B        |L20.128|
                  |L20.74|
;;;998        }
;;;999        else if(eSpiPort == eDRVSPI_PORT1)
00004a  2c01              CMP      r4,#1
00004c  d107              BNE      |L20.94|
;;;1000       {
;;;1001           NVIC_SetPriority(SPI1_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
00004e  2102              MOVS     r1,#2
000050  200f              MOVS     r0,#0xf
000052  f7fffffe          BL       NVIC_SetPriority
;;;1002           NVIC_EnableIRQ(SPI1_IRQn);
000056  200f              MOVS     r0,#0xf
000058  f7fffffe          BL       NVIC_EnableIRQ
00005c  e010              B        |L20.128|
                  |L20.94|
;;;1003       }
;;;1004       else if(eSpiPort == eDRVSPI_PORT2)
00005e  2c02              CMP      r4,#2
000060  d107              BNE      |L20.114|
;;;1005       {
;;;1006           NVIC_SetPriority(SPI2_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
000062  2102              MOVS     r1,#2
000064  2010              MOVS     r0,#0x10
000066  f7fffffe          BL       NVIC_SetPriority
;;;1007           NVIC_EnableIRQ(SPI2_IRQn);
00006a  2010              MOVS     r0,#0x10
00006c  f7fffffe          BL       NVIC_EnableIRQ
000070  e006              B        |L20.128|
                  |L20.114|
;;;1008       }
;;;1009       else
;;;1010       {
;;;1011           NVIC_SetPriority(SPI3_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
000072  2102              MOVS     r1,#2
000074  2011              MOVS     r0,#0x11
000076  f7fffffe          BL       NVIC_SetPriority
;;;1012           NVIC_EnableIRQ(SPI3_IRQn);
00007a  2011              MOVS     r0,#0x11
00007c  f7fffffe          BL       NVIC_EnableIRQ
                  |L20.128|
;;;1013       }
;;;1014   }   
000080  bd70              POP      {r4-r6,pc}
;;;1015   
                          ENDP

000082  0000              DCW      0x0000
                  |L20.132|
                          DCD      g_sSpiHandler
                  |L20.136|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_Get3WireStartIntFlag||, CODE, READONLY, ALIGN=2

                  DrvSPI_Get3WireStartIntFlag PROC
;;;1506   /*---------------------------------------------------------------------------------------------------------*/
;;;1507   uint32_t DrvSPI_Get3WireStartIntFlag(E_DRVSPI_PORT eSpiPort)
000000  4601              MOV      r1,r0
;;;1508   {
;;;1509       return (SPI_PORT[eSpiPort]->CNTRL2.SLV_START_INTSTS);
000002  0088              LSLS     r0,r1,#2
000004  4a02              LDR      r2,|L21.16|
000006  5810              LDR      r0,[r2,r0]
000008  6bc0              LDR      r0,[r0,#0x3c]
00000a  0500              LSLS     r0,r0,#20
00000c  0fc0              LSRS     r0,r0,#31
;;;1510   }
00000e  4770              BX       lr
;;;1511   
                          ENDP

                  |L21.16|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_GetClock1Freq||, CODE, READONLY, ALIGN=2

                  DrvSPI_GetClock1Freq PROC
;;;906    /*---------------------------------------------------------------------------------------------------------*/
;;;907    uint32_t DrvSPI_GetClock1Freq(E_DRVSPI_PORT eSpiPort)
000000  b570              PUSH     {r4-r6,lr}
;;;908    {
000002  4604              MOV      r4,r0
;;;909        uint32_t u32Div;
;;;910        uint32_t u32ApbClock;
;;;911    
;;;912        u32ApbClock = DrvSYS_GetHCLKFreq();
000004  f7fffffe          BL       DrvSYS_GetHCLKFreq
000008  4606              MOV      r6,r0
;;;913        u32Div = SPI_PORT[eSpiPort]->DIVIDER.DIVIDER;
00000a  00a0              LSLS     r0,r4,#2
00000c  4904              LDR      r1,|L22.32|
00000e  5808              LDR      r0,[r1,r0]
000010  6840              LDR      r0,[r0,#4]
000012  b285              UXTH     r5,r0
;;;914        return ((u32ApbClock >> 1) / (u32Div + 1));   /* SPI_CLK = APB_CLK / ((Divider + 1) * 2) */
000014  0870              LSRS     r0,r6,#1
000016  1c69              ADDS     r1,r5,#1
000018  f7fffffe          BL       __aeabi_uidivmod
;;;915    }
00001c  bd70              POP      {r4-r6,pc}
;;;916    
                          ENDP

00001e  0000              DCW      0x0000
                  |L22.32|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_GetClock2Freq||, CODE, READONLY, ALIGN=2

                  DrvSPI_GetClock2Freq PROC
;;;928    /*---------------------------------------------------------------------------------------------------------*/
;;;929    uint32_t DrvSPI_GetClock2Freq(E_DRVSPI_PORT eSpiPort)
000000  b570              PUSH     {r4-r6,lr}
;;;930    {
000002  4604              MOV      r4,r0
;;;931        uint32_t u32Div;
;;;932        uint32_t u32ApbClock;
;;;933    
;;;934        u32ApbClock = DrvSYS_GetHCLKFreq();
000004  f7fffffe          BL       DrvSYS_GetHCLKFreq
000008  4606              MOV      r6,r0
;;;935        u32Div = SPI_PORT[eSpiPort]->DIVIDER.DIVIDER2;
00000a  00a0              LSLS     r0,r4,#2
00000c  4904              LDR      r1,|L23.32|
00000e  5808              LDR      r0,[r1,r0]
000010  6840              LDR      r0,[r0,#4]
000012  0c05              LSRS     r5,r0,#16
;;;936        return ((u32ApbClock >> 1) / (u32Div + 1));   /* SPI_CLK = APB_CLK / ((Divider + 1) * 2) */
000014  0870              LSRS     r0,r6,#1
000016  1c69              ADDS     r1,r5,#1
000018  f7fffffe          BL       __aeabi_uidivmod
;;;937    }
00001c  bd70              POP      {r4-r6,pc}
;;;938    
                          ENDP

00001e  0000              DCW      0x0000
                  |L23.32|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_GetIntFlag||, CODE, READONLY, ALIGN=2

                  DrvSPI_GetIntFlag PROC
;;;1065   /*---------------------------------------------------------------------------------------------------------*/
;;;1066   uint32_t DrvSPI_GetIntFlag(E_DRVSPI_PORT eSpiPort)
000000  4601              MOV      r1,r0
;;;1067   {
;;;1068       return (SPI_PORT[eSpiPort]->CNTRL.IF);
000002  0088              LSLS     r0,r1,#2
000004  4a02              LDR      r2,|L24.16|
000006  5810              LDR      r0,[r2,r0]
000008  6800              LDR      r0,[r0,#0]
00000a  03c0              LSLS     r0,r0,#15
00000c  0fc0              LSRS     r0,r0,#31
;;;1069   }
00000e  4770              BX       lr
;;;1070   
                          ENDP

                  |L24.16|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_GetLevelTriggerStatus||, CODE, READONLY, ALIGN=2

                  DrvSPI_GetLevelTriggerStatus PROC
;;;687    /*---------------------------------------------------------------------------------------------------------*/
;;;688    uint8_t DrvSPI_GetLevelTriggerStatus(E_DRVSPI_PORT eSpiPort)
000000  4601              MOV      r1,r0
;;;689    {
;;;690        if(SPI_PORT[eSpiPort]->SSR.LTRIG_FLAG==1)
000002  0088              LSLS     r0,r1,#2
000004  4a05              LDR      r2,|L25.28|
000006  5810              LDR      r0,[r2,r0]
000008  6880              LDR      r0,[r0,#8]
00000a  0680              LSLS     r0,r0,#26
00000c  0fc0              LSRS     r0,r0,#31
00000e  2800              CMP      r0,#0
000010  d001              BEQ      |L25.22|
;;;691            return TRUE;
000012  2001              MOVS     r0,#1
                  |L25.20|
;;;692        else
;;;693            return FALSE;
;;;694    }
000014  4770              BX       lr
                  |L25.22|
000016  2000              MOVS     r0,#0                 ;693
000018  e7fc              B        |L25.20|
;;;695    
                          ENDP

00001a  0000              DCW      0x0000
                  |L25.28|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvSPI_GetVersion PROC
;;;1551   /*---------------------------------------------------------------------------------------------------------*/
;;;1552   uint32_t DrvSPI_GetVersion(void)
000000  4800              LDR      r0,|L26.4|
;;;1553   {
;;;1554       return DRVSPI_VERSION_NUM;
;;;1555   }
000002  4770              BX       lr
                          ENDP

                  |L26.4|
                          DCD      0x00010203

                          AREA ||i.DrvSPI_IsBusy||, CODE, READONLY, ALIGN=2

                  DrvSPI_IsBusy PROC
;;;792    /*---------------------------------------------------------------------------------------------------------*/
;;;793    uint8_t DrvSPI_IsBusy(E_DRVSPI_PORT eSpiPort)
000000  4601              MOV      r1,r0
;;;794    {
;;;795        return ((SPI_PORT[eSpiPort]->CNTRL.GO_BUSY)?TRUE:FALSE);
000002  0088              LSLS     r0,r1,#2
000004  4a02              LDR      r2,|L27.16|
000006  5810              LDR      r0,[r2,r0]
000008  6800              LDR      r0,[r0,#0]
00000a  07c0              LSLS     r0,r0,#31
00000c  0fc0              LSRS     r0,r0,#31
;;;796    }
00000e  4770              BX       lr
;;;797    
                          ENDP

                  |L27.16|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_Open||, CODE, READONLY, ALIGN=2

                  DrvSPI_Open PROC
;;;295    /*---------------------------------------------------------------------------------------------------------*/
;;;296    int32_t DrvSPI_Open(E_DRVSPI_PORT eSpiPort, E_DRVSPI_MODE eMode, E_DRVSPI_TRANS_TYPE eType, int32_t i32BitLength)
000000  b5f0              PUSH     {r4-r7,lr}
;;;297    {
000002  4604              MOV      r4,r0
;;;298        int32_t i32TimeOut;
;;;299        
;;;300        if(g_sSpiHandler[eSpiPort].bInUse)
000004  2014              MOVS     r0,#0x14
000006  4360              MULS     r0,r4,r0
000008  4eec              LDR      r6,|L28.956|
00000a  5c30              LDRB     r0,[r6,r0]
00000c  2800              CMP      r0,#0
00000e  d001              BEQ      |L28.20|
;;;301        {
;;;302            return E_DRVSPI_ERR_INIT;
000010  48eb              LDR      r0,|L28.960|
                  |L28.18|
;;;303        }
;;;304        
;;;305        /* Bit length 1 ~ 32 */
;;;306        if((i32BitLength <= 0) || (i32BitLength > 32))
;;;307        {
;;;308            return E_DRVSPI_ERR_BIT_LENGTH;
;;;309        }
;;;310       
;;;311        if(eSpiPort == eDRVSPI_PORT0)
;;;312        {
;;;313            SYSCLK->APBCLK.SPI0_EN  =1;
;;;314            SYS->IPRSTC2.SPI0_RST   =1;
;;;315            SYS->IPRSTC2.SPI0_RST   =0;
;;;316        }
;;;317        else if(eSpiPort == eDRVSPI_PORT1)
;;;318        {
;;;319            SYSCLK->APBCLK.SPI1_EN  =1;
;;;320            SYS->IPRSTC2.SPI1_RST   =1;
;;;321            SYS->IPRSTC2.SPI1_RST   =0;
;;;322        }
;;;323        else if(eSpiPort == eDRVSPI_PORT2)
;;;324        {
;;;325            SYSCLK->APBCLK.SPI2_EN  =1;
;;;326            SYS->IPRSTC2.SPI2_RST   =1;
;;;327            SYS->IPRSTC2.SPI2_RST   =0;
;;;328        }
;;;329        else
;;;330        {
;;;331            SYSCLK->APBCLK.SPI3_EN  =1;
;;;332            SYS->IPRSTC2.SPI3_RST   =1;
;;;333            SYS->IPRSTC2.SPI3_RST   =0;
;;;334        }
;;;335        
;;;336        /* Check busy*/
;;;337        i32TimeOut = 0x10000;
;;;338        while(SPI_PORT[eSpiPort]->CNTRL.GO_BUSY == 1)
;;;339        {
;;;340            if(i32TimeOut-- <= 0)
;;;341                return E_DRVSPI_ERR_BUSY;
;;;342        }
;;;343        
;;;344        g_sSpiHandler[eSpiPort].bInUse = TRUE;
;;;345        g_sSpiHandler[eSpiPort].pfnOneTransDoneCallBack = NULL;
;;;346        g_sSpiHandler[eSpiPort].u32OneTransDoneUserData = 0;
;;;347        g_sSpiHandler[eSpiPort].pfn3WireStartCallBack = NULL;
;;;348        g_sSpiHandler[eSpiPort].u32ThreeWireStartUserData = 0;
;;;349        
;;;350        /* "i32BitLength = 0" means 32 bits */
;;;351        if(i32BitLength == 32)
;;;352        {
;;;353            i32BitLength = 0;
;;;354        }
;;;355        SPI_PORT[eSpiPort]->CNTRL.TX_BIT_LEN = i32BitLength;
;;;356        
;;;357        if(eMode == eDRVSPI_SLAVE)
;;;358            SPI_PORT[eSpiPort]->CNTRL.SLAVE = 1;
;;;359        else
;;;360            SPI_PORT[eSpiPort]->CNTRL.SLAVE = 0;
;;;361        
;;;362        /* Automatic slave select */
;;;363        SPI_PORT[eSpiPort]->SSR.AUTOSS = 1;
;;;364            
;;;365        /* Timing waveform types */
;;;366        if(eType==eDRVSPI_TYPE0)
;;;367        {
;;;368            SPI_PORT[eSpiPort]->CNTRL.CLKP = 0;
;;;369            /* Drive data and latch data at the same edge. Not recommend to use this transfer type. */
;;;370            SPI_PORT[eSpiPort]->CNTRL.TX_NEG = 0;
;;;371            SPI_PORT[eSpiPort]->CNTRL.RX_NEG = 0;
;;;372        }
;;;373        else if(eType==eDRVSPI_TYPE1)
;;;374        {
;;;375            SPI_PORT[eSpiPort]->CNTRL.CLKP = 0;
;;;376            /* Drive data at falling-edge of serial clock; latch data at rising-edge of serial clock. */
;;;377            SPI_PORT[eSpiPort]->CNTRL.TX_NEG = 1;
;;;378            SPI_PORT[eSpiPort]->CNTRL.RX_NEG = 0;
;;;379        }
;;;380        else if(eType==eDRVSPI_TYPE2)
;;;381        {
;;;382            SPI_PORT[eSpiPort]->CNTRL.CLKP = 0;
;;;383            /* Drive data at rising-edge of serial clock; latch data at falling-edge of serial clock. */
;;;384            SPI_PORT[eSpiPort]->CNTRL.TX_NEG = 0;
;;;385            SPI_PORT[eSpiPort]->CNTRL.RX_NEG = 1;
;;;386        }
;;;387        else if(eType==eDRVSPI_TYPE3)
;;;388        {
;;;389            SPI_PORT[eSpiPort]->CNTRL.CLKP = 0;
;;;390            /* Drive data and latch data at the same edge. Not recommend to use this transfer type. */
;;;391            SPI_PORT[eSpiPort]->CNTRL.TX_NEG = 1;
;;;392            SPI_PORT[eSpiPort]->CNTRL.RX_NEG = 1;
;;;393        }
;;;394        else if(eType==eDRVSPI_TYPE4)
;;;395        {
;;;396            SPI_PORT[eSpiPort]->CNTRL.CLKP = 1;
;;;397            /* Drive data and latch data at the same edge. Not recommend to use this transfer type. */
;;;398            SPI_PORT[eSpiPort]->CNTRL.TX_NEG = 0;
;;;399            SPI_PORT[eSpiPort]->CNTRL.RX_NEG = 0;
;;;400        }
;;;401        else if(eType==eDRVSPI_TYPE5)
;;;402        {
;;;403            SPI_PORT[eSpiPort]->CNTRL.CLKP = 1;
;;;404            /* Drive data at falling-edge of serial clock; latch data at rising-edge of serial clock. */
;;;405            SPI_PORT[eSpiPort]->CNTRL.TX_NEG = 1;
;;;406            SPI_PORT[eSpiPort]->CNTRL.RX_NEG = 0;
;;;407        }
;;;408        else if(eType==eDRVSPI_TYPE6)
;;;409        {
;;;410            SPI_PORT[eSpiPort]->CNTRL.CLKP = 1;
;;;411            /* Drive data at rising-edge of serial clock; latch data at falling-edge of serial clock. */
;;;412            SPI_PORT[eSpiPort]->CNTRL.TX_NEG = 0;
;;;413            SPI_PORT[eSpiPort]->CNTRL.RX_NEG = 1;
;;;414        }
;;;415        else
;;;416        {
;;;417            SPI_PORT[eSpiPort]->CNTRL.CLKP = 1;
;;;418            /* Drive data and latch data at the same edge. Not recommend to use this transfer type. */
;;;419            SPI_PORT[eSpiPort]->CNTRL.TX_NEG = 1;
;;;420            SPI_PORT[eSpiPort]->CNTRL.RX_NEG = 1;
;;;421        }
;;;422    
;;;423        return E_SUCCESS;
;;;424    }
000012  bdf0              POP      {r4-r7,pc}
                  |L28.20|
000014  2b00              CMP      r3,#0                 ;306
000016  dd01              BLE      |L28.28|
000018  2b20              CMP      r3,#0x20              ;306
00001a  dd02              BLE      |L28.34|
                  |L28.28|
00001c  48e8              LDR      r0,|L28.960|
00001e  1e40              SUBS     r0,r0,#1              ;308
000020  e7f7              B        |L28.18|
                  |L28.34|
000022  2c00              CMP      r4,#0                 ;311
000024  d11a              BNE      |L28.92|
000026  48e7              LDR      r0,|L28.964|
000028  6880              LDR      r0,[r0,#8]            ;313
00002a  2601              MOVS     r6,#1                 ;313
00002c  0336              LSLS     r6,r6,#12             ;313
00002e  43b0              BICS     r0,r0,r6              ;313
000030  1980              ADDS     r0,r0,r6              ;313
000032  4ee4              LDR      r6,|L28.964|
000034  60b0              STR      r0,[r6,#8]            ;313
000036  2005              MOVS     r0,#5                 ;314
000038  0700              LSLS     r0,r0,#28             ;314
00003a  68c0              LDR      r0,[r0,#0xc]          ;314
00003c  2601              MOVS     r6,#1                 ;314
00003e  0336              LSLS     r6,r6,#12             ;314
000040  43b0              BICS     r0,r0,r6              ;314
000042  1980              ADDS     r0,r0,r6              ;314
000044  2605              MOVS     r6,#5                 ;314
000046  0736              LSLS     r6,r6,#28             ;314
000048  60f0              STR      r0,[r6,#0xc]          ;314
00004a  4630              MOV      r0,r6                 ;315
00004c  68c0              LDR      r0,[r0,#0xc]          ;315
00004e  2601              MOVS     r6,#1                 ;315
000050  0336              LSLS     r6,r6,#12             ;315
000052  43b0              BICS     r0,r0,r6              ;315
000054  2605              MOVS     r6,#5                 ;315
000056  0736              LSLS     r6,r6,#28             ;315
000058  60f0              STR      r0,[r6,#0xc]          ;315
00005a  e04c              B        |L28.246|
                  |L28.92|
00005c  2c01              CMP      r4,#1                 ;317
00005e  d117              BNE      |L28.144|
000060  48d8              LDR      r0,|L28.964|
000062  6880              LDR      r0,[r0,#8]            ;319
000064  0366              LSLS     r6,r4,#13             ;319
000066  43b0              BICS     r0,r0,r6              ;319
000068  1980              ADDS     r0,r0,r6              ;319
00006a  4ed6              LDR      r6,|L28.964|
00006c  60b0              STR      r0,[r6,#8]            ;319
00006e  2005              MOVS     r0,#5                 ;320
000070  0700              LSLS     r0,r0,#28             ;320
000072  68c0              LDR      r0,[r0,#0xc]          ;320
000074  0366              LSLS     r6,r4,#13             ;320
000076  43b0              BICS     r0,r0,r6              ;320
000078  1980              ADDS     r0,r0,r6              ;320
00007a  2605              MOVS     r6,#5                 ;320
00007c  0736              LSLS     r6,r6,#28             ;320
00007e  60f0              STR      r0,[r6,#0xc]          ;320
000080  4630              MOV      r0,r6                 ;321
000082  68c0              LDR      r0,[r0,#0xc]          ;321
000084  0366              LSLS     r6,r4,#13             ;321
000086  43b0              BICS     r0,r0,r6              ;321
000088  2605              MOVS     r6,#5                 ;321
00008a  0736              LSLS     r6,r6,#28             ;321
00008c  60f0              STR      r0,[r6,#0xc]          ;321
00008e  e032              B        |L28.246|
                  |L28.144|
000090  2c02              CMP      r4,#2                 ;323
000092  d117              BNE      |L28.196|
000094  48cb              LDR      r0,|L28.964|
000096  6880              LDR      r0,[r0,#8]            ;325
000098  0366              LSLS     r6,r4,#13             ;325
00009a  43b0              BICS     r0,r0,r6              ;325
00009c  1980              ADDS     r0,r0,r6              ;325
00009e  4ec9              LDR      r6,|L28.964|
0000a0  60b0              STR      r0,[r6,#8]            ;325
0000a2  2005              MOVS     r0,#5                 ;326
0000a4  0700              LSLS     r0,r0,#28             ;326
0000a6  68c0              LDR      r0,[r0,#0xc]          ;326
0000a8  0366              LSLS     r6,r4,#13             ;326
0000aa  43b0              BICS     r0,r0,r6              ;326
0000ac  1980              ADDS     r0,r0,r6              ;326
0000ae  2605              MOVS     r6,#5                 ;326
0000b0  0736              LSLS     r6,r6,#28             ;326
0000b2  60f0              STR      r0,[r6,#0xc]          ;326
0000b4  4630              MOV      r0,r6                 ;327
0000b6  68c0              LDR      r0,[r0,#0xc]          ;327
0000b8  0366              LSLS     r6,r4,#13             ;327
0000ba  43b0              BICS     r0,r0,r6              ;327
0000bc  2605              MOVS     r6,#5                 ;327
0000be  0736              LSLS     r6,r6,#28             ;327
0000c0  60f0              STR      r0,[r6,#0xc]          ;327
0000c2  e018              B        |L28.246|
                  |L28.196|
0000c4  48bf              LDR      r0,|L28.964|
0000c6  6880              LDR      r0,[r0,#8]            ;331
0000c8  2601              MOVS     r6,#1                 ;331
0000ca  03f6              LSLS     r6,r6,#15             ;331
0000cc  43b0              BICS     r0,r0,r6              ;331
0000ce  1980              ADDS     r0,r0,r6              ;331
0000d0  4ebc              LDR      r6,|L28.964|
0000d2  60b0              STR      r0,[r6,#8]            ;331
0000d4  2005              MOVS     r0,#5                 ;332
0000d6  0700              LSLS     r0,r0,#28             ;332
0000d8  68c0              LDR      r0,[r0,#0xc]          ;332
0000da  01b6              LSLS     r6,r6,#6              ;332
0000dc  43b0              BICS     r0,r0,r6              ;332
0000de  1980              ADDS     r0,r0,r6              ;332
0000e0  2605              MOVS     r6,#5                 ;332
0000e2  0736              LSLS     r6,r6,#28             ;332
0000e4  60f0              STR      r0,[r6,#0xc]          ;332
0000e6  4630              MOV      r0,r6                 ;333
0000e8  68c0              LDR      r0,[r0,#0xc]          ;333
0000ea  2601              MOVS     r6,#1                 ;333
0000ec  03f6              LSLS     r6,r6,#15             ;333
0000ee  43b0              BICS     r0,r0,r6              ;333
0000f0  2605              MOVS     r6,#5                 ;333
0000f2  0736              LSLS     r6,r6,#28             ;333
0000f4  60f0              STR      r0,[r6,#0xc]          ;333
                  |L28.246|
0000f6  2501              MOVS     r5,#1                 ;337
0000f8  042d              LSLS     r5,r5,#16             ;337
0000fa  e006              B        |L28.266|
                  |L28.252|
0000fc  4628              MOV      r0,r5                 ;340
0000fe  1e6d              SUBS     r5,r5,#1              ;340
000100  2800              CMP      r0,#0                 ;340
000102  dc02              BGT      |L28.266|
000104  48ae              LDR      r0,|L28.960|
000106  1c40              ADDS     r0,r0,#1              ;341
000108  e783              B        |L28.18|
                  |L28.266|
00010a  00a0              LSLS     r0,r4,#2              ;338
00010c  4eae              LDR      r6,|L28.968|
00010e  5830              LDR      r0,[r6,r0]            ;338
000110  6800              LDR      r0,[r0,#0]            ;338
000112  07c0              LSLS     r0,r0,#31             ;338
000114  0fc0              LSRS     r0,r0,#31             ;338
000116  2800              CMP      r0,#0                 ;338
000118  d1f0              BNE      |L28.252|
00011a  2601              MOVS     r6,#1                 ;344
00011c  2014              MOVS     r0,#0x14              ;344
00011e  4360              MULS     r0,r4,r0              ;344
000120  4fa6              LDR      r7,|L28.956|
000122  543e              STRB     r6,[r7,r0]            ;344
000124  2600              MOVS     r6,#0                 ;345
000126  2014              MOVS     r0,#0x14              ;345
000128  4360              MULS     r0,r4,r0              ;345
00012a  19c0              ADDS     r0,r0,r7              ;345
00012c  6046              STR      r6,[r0,#4]            ;345
00012e  2014              MOVS     r0,#0x14              ;346
000130  4360              MULS     r0,r4,r0              ;346
000132  19c0              ADDS     r0,r0,r7              ;346
000134  6086              STR      r6,[r0,#8]            ;346
000136  2014              MOVS     r0,#0x14              ;347
000138  4360              MULS     r0,r4,r0              ;347
00013a  19c0              ADDS     r0,r0,r7              ;347
00013c  60c6              STR      r6,[r0,#0xc]          ;347
00013e  2014              MOVS     r0,#0x14              ;348
000140  4360              MULS     r0,r4,r0              ;348
000142  19c0              ADDS     r0,r0,r7              ;348
000144  6106              STR      r6,[r0,#0x10]         ;348
000146  2b20              CMP      r3,#0x20              ;351
000148  d100              BNE      |L28.332|
00014a  2300              MOVS     r3,#0                 ;353
                  |L28.332|
00014c  00a0              LSLS     r0,r4,#2              ;355
00014e  4e9e              LDR      r6,|L28.968|
000150  5830              LDR      r0,[r6,r0]            ;355
000152  6800              LDR      r0,[r0,#0]            ;355
000154  26f8              MOVS     r6,#0xf8              ;355
000156  43b0              BICS     r0,r0,r6              ;355
000158  00de              LSLS     r6,r3,#3              ;355
00015a  27f8              MOVS     r7,#0xf8              ;355
00015c  403e              ANDS     r6,r6,r7              ;355
00015e  4330              ORRS     r0,r0,r6              ;355
000160  00a6              LSLS     r6,r4,#2              ;355
000162  4f99              LDR      r7,|L28.968|
000164  59be              LDR      r6,[r7,r6]            ;355
000166  6030              STR      r0,[r6,#0]            ;355
000168  2901              CMP      r1,#1                 ;357
00016a  d10a              BNE      |L28.386|
00016c  00a0              LSLS     r0,r4,#2              ;358
00016e  463e              MOV      r6,r7                 ;358
000170  5830              LDR      r0,[r6,r0]            ;358
000172  6800              LDR      r0,[r0,#0]            ;358
000174  048e              LSLS     r6,r1,#18             ;358
000176  43b0              BICS     r0,r0,r6              ;358
000178  1980              ADDS     r0,r0,r6              ;358
00017a  00a6              LSLS     r6,r4,#2              ;358
00017c  59be              LDR      r6,[r7,r6]            ;358
00017e  6030              STR      r0,[r6,#0]            ;358
000180  e00a              B        |L28.408|
                  |L28.386|
000182  00a0              LSLS     r0,r4,#2              ;360
000184  4e90              LDR      r6,|L28.968|
000186  5830              LDR      r0,[r6,r0]            ;360
000188  6800              LDR      r0,[r0,#0]            ;360
00018a  2601              MOVS     r6,#1                 ;360
00018c  04b6              LSLS     r6,r6,#18             ;360
00018e  43b0              BICS     r0,r0,r6              ;360
000190  00a6              LSLS     r6,r4,#2              ;360
000192  4f8d              LDR      r7,|L28.968|
000194  59be              LDR      r6,[r7,r6]            ;360
000196  6030              STR      r0,[r6,#0]            ;360
                  |L28.408|
000198  00a0              LSLS     r0,r4,#2              ;363
00019a  4e8b              LDR      r6,|L28.968|
00019c  5830              LDR      r0,[r6,r0]            ;363
00019e  6880              LDR      r0,[r0,#8]            ;363
0001a0  2608              MOVS     r6,#8                 ;363
0001a2  43b0              BICS     r0,r0,r6              ;363
0001a4  3008              ADDS     r0,r0,#8              ;363
0001a6  00a6              LSLS     r6,r4,#2              ;363
0001a8  4f87              LDR      r7,|L28.968|
0001aa  59be              LDR      r6,[r7,r6]            ;363
0001ac  60b0              STR      r0,[r6,#8]            ;363
0001ae  2a00              CMP      r2,#0                 ;366
0001b0  d11c              BNE      |L28.492|
0001b2  00a0              LSLS     r0,r4,#2              ;368
0001b4  463e              MOV      r6,r7                 ;368
0001b6  5830              LDR      r0,[r6,r0]            ;368
0001b8  6800              LDR      r0,[r0,#0]            ;368
0001ba  2601              MOVS     r6,#1                 ;368
0001bc  02f6              LSLS     r6,r6,#11             ;368
0001be  43b0              BICS     r0,r0,r6              ;368
0001c0  00a6              LSLS     r6,r4,#2              ;368
0001c2  59be              LDR      r6,[r7,r6]            ;368
0001c4  6030              STR      r0,[r6,#0]            ;368
0001c6  00a0              LSLS     r0,r4,#2              ;370
0001c8  463e              MOV      r6,r7                 ;370
0001ca  5830              LDR      r0,[r6,r0]            ;370
0001cc  6800              LDR      r0,[r0,#0]            ;370
0001ce  2604              MOVS     r6,#4                 ;370
0001d0  43b0              BICS     r0,r0,r6              ;370
0001d2  00a6              LSLS     r6,r4,#2              ;370
0001d4  59be              LDR      r6,[r7,r6]            ;370
0001d6  6030              STR      r0,[r6,#0]            ;370
0001d8  00a0              LSLS     r0,r4,#2              ;371
0001da  463e              MOV      r6,r7                 ;371
0001dc  5830              LDR      r0,[r6,r0]            ;371
0001de  6800              LDR      r0,[r0,#0]            ;371
0001e0  2602              MOVS     r6,#2                 ;371
0001e2  43b0              BICS     r0,r0,r6              ;371
0001e4  00a6              LSLS     r6,r4,#2              ;371
0001e6  59be              LDR      r6,[r7,r6]            ;371
0001e8  6030              STR      r0,[r6,#0]            ;371
0001ea  e0e5              B        |L28.952|
                  |L28.492|
0001ec  2a01              CMP      r2,#1                 ;373
0001ee  d11d              BNE      |L28.556|
0001f0  00a0              LSLS     r0,r4,#2              ;375
0001f2  4e75              LDR      r6,|L28.968|
0001f4  5830              LDR      r0,[r6,r0]            ;375
0001f6  6800              LDR      r0,[r0,#0]            ;375
0001f8  02d6              LSLS     r6,r2,#11             ;375
0001fa  43b0              BICS     r0,r0,r6              ;375
0001fc  00a6              LSLS     r6,r4,#2              ;375
0001fe  4f72              LDR      r7,|L28.968|
000200  59be              LDR      r6,[r7,r6]            ;375
000202  6030              STR      r0,[r6,#0]            ;375
000204  00a0              LSLS     r0,r4,#2              ;377
000206  463e              MOV      r6,r7                 ;377
000208  5830              LDR      r0,[r6,r0]            ;377
00020a  6800              LDR      r0,[r0,#0]            ;377
00020c  2604              MOVS     r6,#4                 ;377
00020e  43b0              BICS     r0,r0,r6              ;377
000210  1d00              ADDS     r0,r0,#4              ;377
000212  00a6              LSLS     r6,r4,#2              ;377
000214  59be              LDR      r6,[r7,r6]            ;377
000216  6030              STR      r0,[r6,#0]            ;377
000218  00a0              LSLS     r0,r4,#2              ;378
00021a  463e              MOV      r6,r7                 ;378
00021c  5830              LDR      r0,[r6,r0]            ;378
00021e  6800              LDR      r0,[r0,#0]            ;378
000220  2602              MOVS     r6,#2                 ;378
000222  43b0              BICS     r0,r0,r6              ;378
000224  00a6              LSLS     r6,r4,#2              ;378
000226  59be              LDR      r6,[r7,r6]            ;378
000228  6030              STR      r0,[r6,#0]            ;378
00022a  e0c5              B        |L28.952|
                  |L28.556|
00022c  2a02              CMP      r2,#2                 ;380
00022e  d11d              BNE      |L28.620|
000230  00a0              LSLS     r0,r4,#2              ;382
000232  4e65              LDR      r6,|L28.968|
000234  5830              LDR      r0,[r6,r0]            ;382
000236  6800              LDR      r0,[r0,#0]            ;382
000238  0296              LSLS     r6,r2,#10             ;382
00023a  43b0              BICS     r0,r0,r6              ;382
00023c  00a6              LSLS     r6,r4,#2              ;382
00023e  4f62              LDR      r7,|L28.968|
000240  59be              LDR      r6,[r7,r6]            ;382
000242  6030              STR      r0,[r6,#0]            ;382
000244  00a0              LSLS     r0,r4,#2              ;384
000246  463e              MOV      r6,r7                 ;384
000248  5830              LDR      r0,[r6,r0]            ;384
00024a  6800              LDR      r0,[r0,#0]            ;384
00024c  2604              MOVS     r6,#4                 ;384
00024e  43b0              BICS     r0,r0,r6              ;384
000250  00a6              LSLS     r6,r4,#2              ;384
000252  59be              LDR      r6,[r7,r6]            ;384
000254  6030              STR      r0,[r6,#0]            ;384
000256  00a0              LSLS     r0,r4,#2              ;385
000258  463e              MOV      r6,r7                 ;385
00025a  5830              LDR      r0,[r6,r0]            ;385
00025c  6800              LDR      r0,[r0,#0]            ;385
00025e  2602              MOVS     r6,#2                 ;385
000260  43b0              BICS     r0,r0,r6              ;385
000262  1c80              ADDS     r0,r0,#2              ;385
000264  00a6              LSLS     r6,r4,#2              ;385
000266  59be              LDR      r6,[r7,r6]            ;385
000268  6030              STR      r0,[r6,#0]            ;385
00026a  e0a5              B        |L28.952|
                  |L28.620|
00026c  2a03              CMP      r2,#3                 ;387
00026e  d11f              BNE      |L28.688|
000270  00a0              LSLS     r0,r4,#2              ;389
000272  4e55              LDR      r6,|L28.968|
000274  5830              LDR      r0,[r6,r0]            ;389
000276  6800              LDR      r0,[r0,#0]            ;389
000278  2601              MOVS     r6,#1                 ;389
00027a  02f6              LSLS     r6,r6,#11             ;389
00027c  43b0              BICS     r0,r0,r6              ;389
00027e  00a6              LSLS     r6,r4,#2              ;389
000280  4f51              LDR      r7,|L28.968|
000282  59be              LDR      r6,[r7,r6]            ;389
000284  6030              STR      r0,[r6,#0]            ;389
000286  00a0              LSLS     r0,r4,#2              ;391
000288  463e              MOV      r6,r7                 ;391
00028a  5830              LDR      r0,[r6,r0]            ;391
00028c  6800              LDR      r0,[r0,#0]            ;391
00028e  2604              MOVS     r6,#4                 ;391
000290  43b0              BICS     r0,r0,r6              ;391
000292  1d00              ADDS     r0,r0,#4              ;391
000294  00a6              LSLS     r6,r4,#2              ;391
000296  59be              LDR      r6,[r7,r6]            ;391
000298  6030              STR      r0,[r6,#0]            ;391
00029a  00a0              LSLS     r0,r4,#2              ;392
00029c  463e              MOV      r6,r7                 ;392
00029e  5830              LDR      r0,[r6,r0]            ;392
0002a0  6800              LDR      r0,[r0,#0]            ;392
0002a2  2602              MOVS     r6,#2                 ;392
0002a4  43b0              BICS     r0,r0,r6              ;392
0002a6  1c80              ADDS     r0,r0,#2              ;392
0002a8  00a6              LSLS     r6,r4,#2              ;392
0002aa  59be              LDR      r6,[r7,r6]            ;392
0002ac  6030              STR      r0,[r6,#0]            ;392
0002ae  e083              B        |L28.952|
                  |L28.688|
0002b0  2a04              CMP      r2,#4                 ;394
0002b2  d11d              BNE      |L28.752|
0002b4  00a0              LSLS     r0,r4,#2              ;396
0002b6  4e44              LDR      r6,|L28.968|
0002b8  5830              LDR      r0,[r6,r0]            ;396
0002ba  6800              LDR      r0,[r0,#0]            ;396
0002bc  0256              LSLS     r6,r2,#9              ;396
0002be  43b0              BICS     r0,r0,r6              ;396
0002c0  1980              ADDS     r0,r0,r6              ;396
0002c2  00a6              LSLS     r6,r4,#2              ;396
0002c4  4f40              LDR      r7,|L28.968|
0002c6  59be              LDR      r6,[r7,r6]            ;396
0002c8  6030              STR      r0,[r6,#0]            ;396
0002ca  00a0              LSLS     r0,r4,#2              ;398
0002cc  463e              MOV      r6,r7                 ;398
0002ce  5830              LDR      r0,[r6,r0]            ;398
0002d0  6800              LDR      r0,[r0,#0]            ;398
0002d2  2604              MOVS     r6,#4                 ;398
0002d4  43b0              BICS     r0,r0,r6              ;398
0002d6  00a6              LSLS     r6,r4,#2              ;398
0002d8  59be              LDR      r6,[r7,r6]            ;398
0002da  6030              STR      r0,[r6,#0]            ;398
0002dc  00a0              LSLS     r0,r4,#2              ;399
0002de  463e              MOV      r6,r7                 ;399
0002e0  5830              LDR      r0,[r6,r0]            ;399
0002e2  6800              LDR      r0,[r0,#0]            ;399
0002e4  2602              MOVS     r6,#2                 ;399
0002e6  43b0              BICS     r0,r0,r6              ;399
0002e8  00a6              LSLS     r6,r4,#2              ;399
0002ea  59be              LDR      r6,[r7,r6]            ;399
0002ec  6030              STR      r0,[r6,#0]            ;399
0002ee  e063              B        |L28.952|
                  |L28.752|
0002f0  2a05              CMP      r2,#5                 ;401
0002f2  d11f              BNE      |L28.820|
0002f4  00a0              LSLS     r0,r4,#2              ;403
0002f6  4e34              LDR      r6,|L28.968|
0002f8  5830              LDR      r0,[r6,r0]            ;403
0002fa  6800              LDR      r0,[r0,#0]            ;403
0002fc  2601              MOVS     r6,#1                 ;403
0002fe  02f6              LSLS     r6,r6,#11             ;403
000300  43b0              BICS     r0,r0,r6              ;403
000302  1980              ADDS     r0,r0,r6              ;403
000304  00a6              LSLS     r6,r4,#2              ;403
000306  4f30              LDR      r7,|L28.968|
000308  59be              LDR      r6,[r7,r6]            ;403
00030a  6030              STR      r0,[r6,#0]            ;403
00030c  00a0              LSLS     r0,r4,#2              ;405
00030e  463e              MOV      r6,r7                 ;405
000310  5830              LDR      r0,[r6,r0]            ;405
000312  6800              LDR      r0,[r0,#0]            ;405
000314  2604              MOVS     r6,#4                 ;405
000316  43b0              BICS     r0,r0,r6              ;405
000318  1d00              ADDS     r0,r0,#4              ;405
00031a  00a6              LSLS     r6,r4,#2              ;405
00031c  59be              LDR      r6,[r7,r6]            ;405
00031e  6030              STR      r0,[r6,#0]            ;405
000320  00a0              LSLS     r0,r4,#2              ;406
000322  463e              MOV      r6,r7                 ;406
000324  5830              LDR      r0,[r6,r0]            ;406
000326  6800              LDR      r0,[r0,#0]            ;406
000328  2602              MOVS     r6,#2                 ;406
00032a  43b0              BICS     r0,r0,r6              ;406
00032c  00a6              LSLS     r6,r4,#2              ;406
00032e  59be              LDR      r6,[r7,r6]            ;406
000330  6030              STR      r0,[r6,#0]            ;406
000332  e041              B        |L28.952|
                  |L28.820|
000334  2a06              CMP      r2,#6                 ;408
000336  d11f              BNE      |L28.888|
000338  00a0              LSLS     r0,r4,#2              ;410
00033a  4e23              LDR      r6,|L28.968|
00033c  5830              LDR      r0,[r6,r0]            ;410
00033e  6800              LDR      r0,[r0,#0]            ;410
000340  2601              MOVS     r6,#1                 ;410
000342  02f6              LSLS     r6,r6,#11             ;410
000344  43b0              BICS     r0,r0,r6              ;410
000346  1980              ADDS     r0,r0,r6              ;410
000348  00a6              LSLS     r6,r4,#2              ;410
00034a  4f1f              LDR      r7,|L28.968|
00034c  59be              LDR      r6,[r7,r6]            ;410
00034e  6030              STR      r0,[r6,#0]            ;410
000350  00a0              LSLS     r0,r4,#2              ;412
000352  463e              MOV      r6,r7                 ;412
000354  5830              LDR      r0,[r6,r0]            ;412
000356  6800              LDR      r0,[r0,#0]            ;412
000358  2604              MOVS     r6,#4                 ;412
00035a  43b0              BICS     r0,r0,r6              ;412
00035c  00a6              LSLS     r6,r4,#2              ;412
00035e  59be              LDR      r6,[r7,r6]            ;412
000360  6030              STR      r0,[r6,#0]            ;412
000362  00a0              LSLS     r0,r4,#2              ;413
000364  463e              MOV      r6,r7                 ;413
000366  5830              LDR      r0,[r6,r0]            ;413
000368  6800              LDR      r0,[r0,#0]            ;413
00036a  2602              MOVS     r6,#2                 ;413
00036c  43b0              BICS     r0,r0,r6              ;413
00036e  1c80              ADDS     r0,r0,#2              ;413
000370  00a6              LSLS     r6,r4,#2              ;413
000372  59be              LDR      r6,[r7,r6]            ;413
000374  6030              STR      r0,[r6,#0]            ;413
000376  e01f              B        |L28.952|
                  |L28.888|
000378  00a0              LSLS     r0,r4,#2              ;417
00037a  4e13              LDR      r6,|L28.968|
00037c  5830              LDR      r0,[r6,r0]            ;417
00037e  6800              LDR      r0,[r0,#0]            ;417
000380  2601              MOVS     r6,#1                 ;417
000382  02f6              LSLS     r6,r6,#11             ;417
000384  43b0              BICS     r0,r0,r6              ;417
000386  1980              ADDS     r0,r0,r6              ;417
000388  00a6              LSLS     r6,r4,#2              ;417
00038a  4f0f              LDR      r7,|L28.968|
00038c  59be              LDR      r6,[r7,r6]            ;417
00038e  6030              STR      r0,[r6,#0]            ;417
000390  00a0              LSLS     r0,r4,#2              ;419
000392  463e              MOV      r6,r7                 ;419
000394  5830              LDR      r0,[r6,r0]            ;419
000396  6800              LDR      r0,[r0,#0]            ;419
000398  2604              MOVS     r6,#4                 ;419
00039a  43b0              BICS     r0,r0,r6              ;419
00039c  1d00              ADDS     r0,r0,#4              ;419
00039e  00a6              LSLS     r6,r4,#2              ;419
0003a0  59be              LDR      r6,[r7,r6]            ;419
0003a2  6030              STR      r0,[r6,#0]            ;419
0003a4  00a0              LSLS     r0,r4,#2              ;420
0003a6  463e              MOV      r6,r7                 ;420
0003a8  5830              LDR      r0,[r6,r0]            ;420
0003aa  6800              LDR      r0,[r0,#0]            ;420
0003ac  2602              MOVS     r6,#2                 ;420
0003ae  43b0              BICS     r0,r0,r6              ;420
0003b0  1c80              ADDS     r0,r0,#2              ;420
0003b2  00a6              LSLS     r6,r4,#2              ;420
0003b4  59be              LDR      r6,[r7,r6]            ;420
0003b6  6030              STR      r0,[r6,#0]            ;420
                  |L28.952|
0003b8  2000              MOVS     r0,#0                 ;423
0003ba  e62a              B        |L28.18|
;;;425    
                          ENDP

                  |L28.956|
                          DCD      g_sSpiHandler
                  |L28.960|
                          DCD      0xffff9403
                  |L28.964|
                          DCD      0x50000200
                  |L28.968|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_Set2BitTransferMode||, CODE, READONLY, ALIGN=2

                  DrvSPI_Set2BitTransferMode PROC
;;;501    /*---------------------------------------------------------------------------------------------------------*/
;;;502    void DrvSPI_Set2BitTransferMode(E_DRVSPI_PORT eSpiPort, uint8_t bEnable)
000000  b510              PUSH     {r4,lr}
;;;503    {
;;;504        if(bEnable)
000002  2900              CMP      r1,#0
000004  d016              BEQ      |L29.52|
;;;505        {
;;;506            SPI_PORT[eSpiPort]->CNTRL.TWOB = 1;
000006  0082              LSLS     r2,r0,#2
000008  4b10              LDR      r3,|L29.76|
00000a  589a              LDR      r2,[r3,r2]
00000c  6812              LDR      r2,[r2,#0]
00000e  2301              MOVS     r3,#1
000010  059b              LSLS     r3,r3,#22
000012  439a              BICS     r2,r2,r3
000014  18d2              ADDS     r2,r2,r3
000016  0083              LSLS     r3,r0,#2
000018  4c0c              LDR      r4,|L29.76|
00001a  58e3              LDR      r3,[r4,r3]
00001c  601a              STR      r2,[r3,#0]
;;;507            SPI_PORT[eSpiPort]->CNTRL.TX_NUM = 0;
00001e  0082              LSLS     r2,r0,#2
000020  4623              MOV      r3,r4
000022  589a              LDR      r2,[r3,r2]
000024  6812              LDR      r2,[r2,#0]
000026  2303              MOVS     r3,#3
000028  021b              LSLS     r3,r3,#8
00002a  439a              BICS     r2,r2,r3
00002c  0083              LSLS     r3,r0,#2
00002e  58e3              LDR      r3,[r4,r3]
000030  601a              STR      r2,[r3,#0]
000032  e00a              B        |L29.74|
                  |L29.52|
;;;508        }
;;;509        else
;;;510            SPI_PORT[eSpiPort]->CNTRL.TWOB = 0;
000034  0082              LSLS     r2,r0,#2
000036  4b05              LDR      r3,|L29.76|
000038  589a              LDR      r2,[r3,r2]
00003a  6812              LDR      r2,[r2,#0]
00003c  2301              MOVS     r3,#1
00003e  059b              LSLS     r3,r3,#22
000040  439a              BICS     r2,r2,r3
000042  0083              LSLS     r3,r0,#2
000044  4c01              LDR      r4,|L29.76|
000046  58e3              LDR      r3,[r4,r3]
000048  601a              STR      r2,[r3,#0]
                  |L29.74|
;;;511    }
00004a  bd10              POP      {r4,pc}
;;;512    
                          ENDP

                  |L29.76|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetBitLength||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetBitLength PROC
;;;549    /*---------------------------------------------------------------------------------------------------------*/
;;;550    int32_t DrvSPI_SetBitLength(E_DRVSPI_PORT eSpiPort, int32_t i32BitLength)
000000  b510              PUSH     {r4,lr}
;;;551    {
000002  4602              MOV      r2,r0
;;;552    
;;;553        if((i32BitLength < 1) || (i32BitLength > 32))
000004  2901              CMP      r1,#1
000006  db01              BLT      |L30.12|
000008  2920              CMP      r1,#0x20
00000a  dd01              BLE      |L30.16|
                  |L30.12|
;;;554        {
;;;555            return E_DRVSPI_ERR_BIT_LENGTH;
00000c  480a              LDR      r0,|L30.56|
                  |L30.14|
;;;556        }
;;;557        if(i32BitLength == 32)
;;;558            i32BitLength = 0;
;;;559    
;;;560        SPI_PORT[eSpiPort]->CNTRL.TX_BIT_LEN = i32BitLength;
;;;561        
;;;562        return E_SUCCESS;
;;;563    }
00000e  bd10              POP      {r4,pc}
                  |L30.16|
000010  2920              CMP      r1,#0x20              ;557
000012  d100              BNE      |L30.22|
000014  2100              MOVS     r1,#0                 ;558
                  |L30.22|
000016  0090              LSLS     r0,r2,#2              ;560
000018  4b08              LDR      r3,|L30.60|
00001a  5818              LDR      r0,[r3,r0]            ;560
00001c  6800              LDR      r0,[r0,#0]            ;560
00001e  23f8              MOVS     r3,#0xf8              ;560
000020  4398              BICS     r0,r0,r3              ;560
000022  00cb              LSLS     r3,r1,#3              ;560
000024  24f8              MOVS     r4,#0xf8              ;560
000026  4023              ANDS     r3,r3,r4              ;560
000028  4318              ORRS     r0,r0,r3              ;560
00002a  0093              LSLS     r3,r2,#2              ;560
00002c  4c03              LDR      r4,|L30.60|
00002e  58e3              LDR      r3,[r4,r3]            ;560
000030  6018              STR      r0,[r3,#0]            ;560
000032  2000              MOVS     r0,#0                 ;562
000034  e7eb              B        |L30.14|
;;;564    
                          ENDP

000036  0000              DCW      0x0000
                  |L30.56|
                          DCD      0xffff9402
                  |L30.60|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetByteReorder||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetByteReorder PROC
;;;586    /*---------------------------------------------------------------------------------------------------------*/
;;;587    int32_t DrvSPI_SetByteReorder(E_DRVSPI_PORT eSpiPort, E_DRVSPI_BYTE_REORDER eOption)
000000  b510              PUSH     {r4,lr}
;;;588    {
000002  4602              MOV      r2,r0
;;;589        /* The Byte Suspend function is only available in 32-bit transaction. */
;;;590        if( (eOption==eDRVSPI_BYTE_REORDER_SUSPEND)||(eOption==eDRVSPI_BYTE_SUSPEND) )
000004  2901              CMP      r1,#1
000006  d001              BEQ      |L31.12|
000008  2903              CMP      r1,#3
00000a  d11a              BNE      |L31.66|
                  |L31.12|
;;;591            if( (SPI_PORT[eSpiPort]->CNTRL.TX_BIT_LEN) != 0 )
00000c  0090              LSLS     r0,r2,#2
00000e  4b16              LDR      r3,|L31.104|
000010  5818              LDR      r0,[r3,r0]
000012  6800              LDR      r0,[r0,#0]
000014  0600              LSLS     r0,r0,#24
000016  0ec0              LSRS     r0,r0,#27
000018  2800              CMP      r0,#0
00001a  d001              BEQ      |L31.32|
;;;592                return E_DRVSPI_ERR_BIT_LENGTH;
00001c  4813              LDR      r0,|L31.108|
                  |L31.30|
;;;593        /* The Byte Reorder function is supported only in 16-, 24- and 32-bit transaction mode. */
;;;594        else if( eOption==eDRVSPI_BYTE_REORDER )
;;;595        	if( (SPI_PORT[eSpiPort]->CNTRL.TX_BIT_LEN) % 8 )
;;;596            	return E_DRVSPI_ERR_BIT_LENGTH;
;;;597    
;;;598        SPI_PORT[eSpiPort]->CNTRL.REORDER = eOption;
;;;599    
;;;600        return E_SUCCESS;
;;;601    }
00001e  bd10              POP      {r4,pc}
                  |L31.32|
000020  2902              CMP      r1,#2                 ;594
000022  d10e              BNE      |L31.66|
000024  0093              LSLS     r3,r2,#2              ;595
000026  4c10              LDR      r4,|L31.104|
000028  58e3              LDR      r3,[r4,r3]            ;595
00002a  681b              LDR      r3,[r3,#0]            ;595
00002c  061b              LSLS     r3,r3,#24             ;595
00002e  0ed8              LSRS     r0,r3,#27             ;595
000030  17c3              ASRS     r3,r0,#31             ;595
000032  0f5b              LSRS     r3,r3,#29             ;595
000034  181b              ADDS     r3,r3,r0              ;595
000036  10db              ASRS     r3,r3,#3              ;595
000038  00db              LSLS     r3,r3,#3              ;595
00003a  1ac3              SUBS     r3,r0,r3              ;595
00003c  d001              BEQ      |L31.66|
00003e  480b              LDR      r0,|L31.108|
000040  e7ed              B        |L31.30|
                  |L31.66|
000042  0090              LSLS     r0,r2,#2              ;598
000044  4b08              LDR      r3,|L31.104|
000046  5818              LDR      r0,[r3,r0]            ;598
000048  6800              LDR      r0,[r0,#0]            ;598
00004a  2303              MOVS     r3,#3                 ;598
00004c  04db              LSLS     r3,r3,#19             ;598
00004e  4398              BICS     r0,r0,r3              ;598
000050  04cb              LSLS     r3,r1,#19             ;598
000052  2403              MOVS     r4,#3                 ;598
000054  04e4              LSLS     r4,r4,#19             ;598
000056  4023              ANDS     r3,r3,r4              ;598
000058  4318              ORRS     r0,r0,r3              ;598
00005a  0093              LSLS     r3,r2,#2              ;598
00005c  4c02              LDR      r4,|L31.104|
00005e  58e3              LDR      r3,[r4,r3]            ;598
000060  6018              STR      r0,[r3,#0]            ;598
000062  2000              MOVS     r0,#0                 ;600
000064  e7db              B        |L31.30|
;;;602    
                          ENDP

000066  0000              DCW      0x0000
                  |L31.104|
                          DCD      SPI_PORT
                  |L31.108|
                          DCD      0xffff9402

                          AREA ||i.DrvSPI_SetClockFreq||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetClockFreq PROC
;;;852    /*---------------------------------------------------------------------------------------------------------*/
;;;853    uint32_t DrvSPI_SetClockFreq(E_DRVSPI_PORT eSpiPort, uint32_t u32Clock1, uint32_t u32Clock2)
000000  b5f8              PUSH     {r3-r7,lr}
;;;854    {
000002  4604              MOV      r4,r0
000004  460f              MOV      r7,r1
000006  4616              MOV      r6,r2
;;;855        uint32_t u32Div;
;;;856        uint32_t u32Pclk;
;;;857        
;;;858        u32Pclk = DrvSYS_GetHCLKFreq();
000008  f7fffffe          BL       DrvSYS_GetHCLKFreq
00000c  9000              STR      r0,[sp,#0]
;;;859        
;;;860        u32Div = 0xFFFF; /* Initial value */
00000e  4d2f              LDR      r5,|L32.204|
;;;861        
;;;862        if(u32Clock2!=0)
000010  2e00              CMP      r6,#0
000012  d01d              BEQ      |L32.80|
;;;863        {
;;;864            if(u32Clock2>u32Pclk)
000014  9800              LDR      r0,[sp,#0]
000016  4286              CMP      r6,r0
000018  d901              BLS      |L32.30|
;;;865                u32Div = 0;
00001a  2500              MOVS     r5,#0
00001c  e00a              B        |L32.52|
                  |L32.30|
;;;866            else
;;;867            {
;;;868                u32Div = (((u32Pclk / u32Clock2) + 1) >> 1) - 1;
00001e  4631              MOV      r1,r6
000020  9800              LDR      r0,[sp,#0]
000022  f7fffffe          BL       __aeabi_uidivmod
000026  1c40              ADDS     r0,r0,#1
000028  0840              LSRS     r0,r0,#1
00002a  1e45              SUBS     r5,r0,#1
;;;869                if(u32Div > 65535)
00002c  4827              LDR      r0,|L32.204|
00002e  4285              CMP      r5,r0
000030  d900              BLS      |L32.52|
;;;870                    u32Div = 65535;
000032  4605              MOV      r5,r0
                  |L32.52|
;;;871            }
;;;872            SPI_PORT[eSpiPort]->DIVIDER.DIVIDER2 = u32Div;
000034  00a0              LSLS     r0,r4,#2
000036  4926              LDR      r1,|L32.208|
000038  5808              LDR      r0,[r1,r0]
00003a  6840              LDR      r0,[r0,#4]
00003c  b280              UXTH     r0,r0
00003e  0429              LSLS     r1,r5,#16
000040  0c09              LSRS     r1,r1,#16
000042  0409              LSLS     r1,r1,#16
000044  4308              ORRS     r0,r0,r1
000046  00a1              LSLS     r1,r4,#2
000048  4a21              LDR      r2,|L32.208|
00004a  5851              LDR      r1,[r2,r1]
00004c  6048              STR      r0,[r1,#4]
00004e  e00b              B        |L32.104|
                  |L32.80|
;;;873        }
;;;874        else
;;;875            SPI_PORT[eSpiPort]->DIVIDER.DIVIDER2 = 0xFFFF;
000050  00a0              LSLS     r0,r4,#2
000052  491f              LDR      r1,|L32.208|
000054  5808              LDR      r0,[r1,r0]
000056  6840              LDR      r0,[r0,#4]
000058  b280              UXTH     r0,r0
00005a  2101              MOVS     r1,#1
00005c  0409              LSLS     r1,r1,#16
00005e  1a40              SUBS     r0,r0,r1
000060  00a1              LSLS     r1,r4,#2
000062  4a1b              LDR      r2,|L32.208|
000064  5851              LDR      r1,[r2,r1]
000066  6048              STR      r0,[r1,#4]
                  |L32.104|
;;;876        
;;;877        if(u32Clock1!=0)
000068  2f00              CMP      r7,#0
00006a  d01c              BEQ      |L32.166|
;;;878        {
;;;879            if(u32Clock1>u32Pclk)
00006c  9800              LDR      r0,[sp,#0]
00006e  4287              CMP      r7,r0
000070  d901              BLS      |L32.118|
;;;880                u32Div = 0;
000072  2500              MOVS     r5,#0
000074  e00a              B        |L32.140|
                  |L32.118|
;;;881            else
;;;882            {
;;;883                u32Div = (((u32Pclk / u32Clock1) + 1) >> 1) - 1;
000076  4639              MOV      r1,r7
000078  9800              LDR      r0,[sp,#0]
00007a  f7fffffe          BL       __aeabi_uidivmod
00007e  1c40              ADDS     r0,r0,#1
000080  0840              LSRS     r0,r0,#1
000082  1e45              SUBS     r5,r0,#1
;;;884                if(u32Div > 0xFFFF)
000084  4811              LDR      r0,|L32.204|
000086  4285              CMP      r5,r0
000088  d900              BLS      |L32.140|
;;;885                    u32Div = 0xFFFF;
00008a  4605              MOV      r5,r0
                  |L32.140|
;;;886            }
;;;887            SPI_PORT[eSpiPort]->DIVIDER.DIVIDER = u32Div;
00008c  00a0              LSLS     r0,r4,#2
00008e  4910              LDR      r1,|L32.208|
000090  5808              LDR      r0,[r1,r0]
000092  6840              LDR      r0,[r0,#4]
000094  0c00              LSRS     r0,r0,#16
000096  0400              LSLS     r0,r0,#16
000098  b2a9              UXTH     r1,r5
00009a  4308              ORRS     r0,r0,r1
00009c  00a1              LSLS     r1,r4,#2
00009e  4a0c              LDR      r2,|L32.208|
0000a0  5851              LDR      r1,[r2,r1]
0000a2  6048              STR      r0,[r1,#4]
0000a4  e00b              B        |L32.190|
                  |L32.166|
;;;888        }
;;;889        else
;;;890            SPI_PORT[eSpiPort]->DIVIDER.DIVIDER = 0xFFFF;
0000a6  00a0              LSLS     r0,r4,#2
0000a8  4909              LDR      r1,|L32.208|
0000aa  5808              LDR      r0,[r1,r0]
0000ac  6840              LDR      r0,[r0,#4]
0000ae  0c00              LSRS     r0,r0,#16
0000b0  0400              LSLS     r0,r0,#16
0000b2  4906              LDR      r1,|L32.204|
0000b4  1840              ADDS     r0,r0,r1
0000b6  00a1              LSLS     r1,r4,#2
0000b8  4a05              LDR      r2,|L32.208|
0000ba  5851              LDR      r1,[r2,r1]
0000bc  6048              STR      r0,[r1,#4]
                  |L32.190|
;;;891    
;;;892        return ( u32Pclk / ((u32Div+1)*2) );
0000be  1c68              ADDS     r0,r5,#1
0000c0  0041              LSLS     r1,r0,#1
0000c2  9800              LDR      r0,[sp,#0]
0000c4  f7fffffe          BL       __aeabi_uidivmod
;;;893    }
0000c8  bdf8              POP      {r3-r7,pc}
;;;894    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L32.204|
                          DCD      0x0000ffff
                  |L32.208|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetEndian||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetEndian PROC
;;;525    /*---------------------------------------------------------------------------------------------------------*/
;;;526    void DrvSPI_SetEndian(E_DRVSPI_PORT eSpiPort, E_DRVSPI_ENDIAN eEndian)
000000  b510              PUSH     {r4,lr}
;;;527    {
;;;528    
;;;529        if(eEndian == eDRVSPI_LSB_FIRST)
000002  2900              CMP      r1,#0
000004  d10c              BNE      |L33.32|
;;;530            SPI_PORT[eSpiPort]->CNTRL.LSB = 1;
000006  0082              LSLS     r2,r0,#2
000008  4b0b              LDR      r3,|L33.56|
00000a  589a              LDR      r2,[r3,r2]
00000c  6812              LDR      r2,[r2,#0]
00000e  2301              MOVS     r3,#1
000010  029b              LSLS     r3,r3,#10
000012  439a              BICS     r2,r2,r3
000014  18d2              ADDS     r2,r2,r3
000016  0083              LSLS     r3,r0,#2
000018  4c07              LDR      r4,|L33.56|
00001a  58e3              LDR      r3,[r4,r3]
00001c  601a              STR      r2,[r3,#0]
00001e  e00a              B        |L33.54|
                  |L33.32|
;;;531        else
;;;532            SPI_PORT[eSpiPort]->CNTRL.LSB = 0;
000020  0082              LSLS     r2,r0,#2
000022  4b05              LDR      r3,|L33.56|
000024  589a              LDR      r2,[r3,r2]
000026  6812              LDR      r2,[r2,#0]
000028  2301              MOVS     r3,#1
00002a  029b              LSLS     r3,r3,#10
00002c  439a              BICS     r2,r2,r3
00002e  0083              LSLS     r3,r0,#2
000030  4c01              LDR      r4,|L33.56|
000032  58e3              LDR      r3,[r4,r3]
000034  601a              STR      r2,[r3,#0]
                  |L33.54|
;;;533    
;;;534    }
000036  bd10              POP      {r4,pc}
;;;535    
                          ENDP

                  |L33.56|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetGo||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetGo PROC
;;;1257   /*---------------------------------------------------------------------------------------------------------*/
;;;1258   void DrvSPI_SetGo(E_DRVSPI_PORT eSpiPort)
000000  0081              LSLS     r1,r0,#2
;;;1259   {
;;;1260       SPI_PORT[eSpiPort]->CNTRL.GO_BUSY = 1;
000002  4a05              LDR      r2,|L34.24|
000004  5851              LDR      r1,[r2,r1]
000006  6809              LDR      r1,[r1,#0]
000008  0849              LSRS     r1,r1,#1
00000a  0049              LSLS     r1,r1,#1
00000c  1c49              ADDS     r1,r1,#1
00000e  0082              LSLS     r2,r0,#2
000010  4b01              LDR      r3,|L34.24|
000012  589a              LDR      r2,[r3,r2]
000014  6011              STR      r1,[r2,#0]
;;;1261   }
000016  4770              BX       lr
;;;1262   
                          ENDP

                  |L34.24|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetPDMA||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetPDMA PROC
;;;1296   /*---------------------------------------------------------------------------------------------------------*/
;;;1297   void DrvSPI_SetPDMA(E_DRVSPI_PORT eSpiPort, E_DRVSPI_DMA_MODE eDmaMode, uint8_t bEnable)
000000  b530              PUSH     {r4,r5,lr}
;;;1298   {
;;;1299       if(eDmaMode==eDRVSPI_TX_DMA)
000002  2900              CMP      r1,#0
000004  d118              BNE      |L35.56|
;;;1300       {
;;;1301           if(bEnable)
000006  2a00              CMP      r2,#0
000008  d00b              BEQ      |L35.34|
;;;1302               SPI_PORT[eSpiPort]->DMA.TX_DMA_GO = 1;
00000a  0083              LSLS     r3,r0,#2
00000c  4c17              LDR      r4,|L35.108|
00000e  58e3              LDR      r3,[r4,r3]
000010  6b9b              LDR      r3,[r3,#0x38]
000012  085b              LSRS     r3,r3,#1
000014  005b              LSLS     r3,r3,#1
000016  1c5b              ADDS     r3,r3,#1
000018  0084              LSLS     r4,r0,#2
00001a  4d14              LDR      r5,|L35.108|
00001c  592c              LDR      r4,[r5,r4]
00001e  63a3              STR      r3,[r4,#0x38]
000020  e022              B        |L35.104|
                  |L35.34|
;;;1303           else
;;;1304               SPI_PORT[eSpiPort]->DMA.TX_DMA_GO = 0;
000022  0083              LSLS     r3,r0,#2
000024  4c11              LDR      r4,|L35.108|
000026  58e3              LDR      r3,[r4,r3]
000028  6b9b              LDR      r3,[r3,#0x38]
00002a  085b              LSRS     r3,r3,#1
00002c  005b              LSLS     r3,r3,#1
00002e  0084              LSLS     r4,r0,#2
000030  4d0e              LDR      r5,|L35.108|
000032  592c              LDR      r4,[r5,r4]
000034  63a3              STR      r3,[r4,#0x38]
000036  e017              B        |L35.104|
                  |L35.56|
;;;1305       }
;;;1306       else
;;;1307       {
;;;1308           if(bEnable)
000038  2a00              CMP      r2,#0
00003a  d00b              BEQ      |L35.84|
;;;1309               SPI_PORT[eSpiPort]->DMA.RX_DMA_GO = 1;
00003c  0083              LSLS     r3,r0,#2
00003e  4c0b              LDR      r4,|L35.108|
000040  58e3              LDR      r3,[r4,r3]
000042  6b9b              LDR      r3,[r3,#0x38]
000044  2402              MOVS     r4,#2
000046  43a3              BICS     r3,r3,r4
000048  1c9b              ADDS     r3,r3,#2
00004a  0084              LSLS     r4,r0,#2
00004c  4d07              LDR      r5,|L35.108|
00004e  592c              LDR      r4,[r5,r4]
000050  63a3              STR      r3,[r4,#0x38]
000052  e009              B        |L35.104|
                  |L35.84|
;;;1310           else
;;;1311               SPI_PORT[eSpiPort]->DMA.RX_DMA_GO = 0;
000054  0083              LSLS     r3,r0,#2
000056  4c05              LDR      r4,|L35.108|
000058  58e3              LDR      r3,[r4,r3]
00005a  6b9b              LDR      r3,[r3,#0x38]
00005c  2402              MOVS     r4,#2
00005e  43a3              BICS     r3,r3,r4
000060  0084              LSLS     r4,r0,#2
000062  4d02              LDR      r5,|L35.108|
000064  592c              LDR      r4,[r5,r4]
000066  63a3              STR      r3,[r4,#0x38]
                  |L35.104|
;;;1312       }
;;;1313   }
000068  bd30              POP      {r4,r5,pc}
;;;1314   
                          ENDP

00006a  0000              DCW      0x0000
                  |L35.108|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetSS||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetSS PROC
;;;751    /*---------------------------------------------------------------------------------------------------------*/
;;;752    void DrvSPI_SetSS(E_DRVSPI_PORT eSpiPort, E_DRVSPI_SLAVE_SEL eSlaveSel)
000000  b510              PUSH     {r4,lr}
;;;753    {
;;;754        SPI_PORT[eSpiPort]->SSR.SSR = eSlaveSel;
000002  0082              LSLS     r2,r0,#2
000004  4b06              LDR      r3,|L36.32|
000006  589a              LDR      r2,[r3,r2]
000008  6892              LDR      r2,[r2,#8]
00000a  0892              LSRS     r2,r2,#2
00000c  0092              LSLS     r2,r2,#2
00000e  078b              LSLS     r3,r1,#30
000010  0f9b              LSRS     r3,r3,#30
000012  431a              ORRS     r2,r2,r3
000014  0083              LSLS     r3,r0,#2
000016  4c02              LDR      r4,|L36.32|
000018  58e3              LDR      r3,[r4,r3]
00001a  609a              STR      r2,[r3,#8]
;;;755    }
00001c  bd10              POP      {r4,pc}
;;;756    
                          ENDP

00001e  0000              DCW      0x0000
                  |L36.32|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetSlaveSelectActiveLevel||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetSlaveSelectActiveLevel PROC
;;;667    /*---------------------------------------------------------------------------------------------------------*/
;;;668    void DrvSPI_SetSlaveSelectActiveLevel(E_DRVSPI_PORT eSpiPort, E_DRVSPI_SS_ACT_TYPE eSSActType)
000000  b510              PUSH     {r4,lr}
;;;669    {
;;;670        SPI_PORT[eSpiPort]->SSR.SS_LVL = eSSActType;
000002  0082              LSLS     r2,r0,#2
000004  4b06              LDR      r3,|L37.32|
000006  589a              LDR      r2,[r3,r2]
000008  6892              LDR      r2,[r2,#8]
00000a  2304              MOVS     r3,#4
00000c  439a              BICS     r2,r2,r3
00000e  008b              LSLS     r3,r1,#2
000010  2404              MOVS     r4,#4
000012  4023              ANDS     r3,r3,r4
000014  431a              ORRS     r2,r2,r3
000016  0083              LSLS     r3,r0,#2
000018  4c01              LDR      r4,|L37.32|
00001a  58e3              LDR      r3,[r4,r3]
00001c  609a              STR      r2,[r3,#8]
;;;671    }
00001e  bd10              POP      {r4,pc}
;;;672    
                          ENDP

                  |L37.32|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetSuspendCycle||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetSuspendCycle PROC
;;;619    /*---------------------------------------------------------------------------------------------------------*/
;;;620    int32_t DrvSPI_SetSuspendCycle(E_DRVSPI_PORT eSpiPort, int32_t i32Interval)
000000  b510              PUSH     {r4,lr}
;;;621    {
000002  4602              MOV      r2,r0
;;;622        /* In burst mode and byte suspend function, it could be 2~17. */
;;;623        if((i32Interval < 2) || (i32Interval > 17))
000004  2902              CMP      r1,#2
000006  db01              BLT      |L38.12|
000008  2911              CMP      r1,#0x11
00000a  dd0d              BLE      |L38.40|
                  |L38.12|
;;;624        {
;;;625            /* If out of range, specify the maximum suspend cycle and return error code. */
;;;626            SPI_PORT[eSpiPort]->CNTRL.SP_CYCLE = 15;
00000c  0090              LSLS     r0,r2,#2
00000e  4b10              LDR      r3,|L38.80|
000010  5818              LDR      r0,[r3,r0]
000012  6800              LDR      r0,[r0,#0]
000014  230f              MOVS     r3,#0xf
000016  031b              LSLS     r3,r3,#12
000018  4398              BICS     r0,r0,r3
00001a  18c0              ADDS     r0,r0,r3
00001c  0093              LSLS     r3,r2,#2
00001e  4c0c              LDR      r4,|L38.80|
000020  58e3              LDR      r3,[r4,r3]
000022  6018              STR      r0,[r3,#0]
;;;627            return E_DRVSPI_ERR_SUSPEND_INTERVAL;
000024  480b              LDR      r0,|L38.84|
                  |L38.38|
;;;628        }
;;;629        SPI_PORT[eSpiPort]->CNTRL.SP_CYCLE = i32Interval-2;
;;;630        return E_SUCCESS;
;;;631    }
000026  bd10              POP      {r4,pc}
                  |L38.40|
000028  0090              LSLS     r0,r2,#2              ;629
00002a  4b09              LDR      r3,|L38.80|
00002c  5818              LDR      r0,[r3,r0]            ;629
00002e  6800              LDR      r0,[r0,#0]            ;629
000030  230f              MOVS     r3,#0xf               ;629
000032  031b              LSLS     r3,r3,#12             ;629
000034  4398              BICS     r0,r0,r3              ;629
000036  1e8b              SUBS     r3,r1,#2              ;629
000038  031b              LSLS     r3,r3,#12             ;629
00003a  240f              MOVS     r4,#0xf               ;629
00003c  0324              LSLS     r4,r4,#12             ;629
00003e  4023              ANDS     r3,r3,r4              ;629
000040  4318              ORRS     r0,r0,r3              ;629
000042  0093              LSLS     r3,r2,#2              ;629
000044  4c02              LDR      r4,|L38.80|
000046  58e3              LDR      r3,[r4,r3]            ;629
000048  6018              STR      r0,[r3,#0]            ;629
00004a  2000              MOVS     r0,#0                 ;630
00004c  e7eb              B        |L38.38|
;;;632    
                          ENDP

00004e  0000              DCW      0x0000
                  |L38.80|
                          DCD      SPI_PORT
                  |L38.84|
                          DCD      0xffff9401

                          AREA ||i.DrvSPI_SetTriggerMode||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetTriggerMode PROC
;;;645    /*---------------------------------------------------------------------------------------------------------*/
;;;646    void DrvSPI_SetTriggerMode(E_DRVSPI_PORT eSpiPort, E_DRVSPI_SSLTRIG eSSTriggerMode)
000000  b510              PUSH     {r4,lr}
;;;647    {
;;;648        SPI_PORT[eSpiPort]->SSR.SS_LTRIG = eSSTriggerMode;
000002  0082              LSLS     r2,r0,#2
000004  4b06              LDR      r3,|L39.32|
000006  589a              LDR      r2,[r3,r2]
000008  6892              LDR      r2,[r2,#8]
00000a  2310              MOVS     r3,#0x10
00000c  439a              BICS     r2,r2,r3
00000e  010b              LSLS     r3,r1,#4
000010  2410              MOVS     r4,#0x10
000012  4023              ANDS     r3,r3,r4
000014  431a              ORRS     r2,r2,r3
000016  0083              LSLS     r3,r0,#2
000018  4c01              LDR      r4,|L39.32|
00001a  58e3              LDR      r3,[r4,r3]
00001c  609a              STR      r2,[r3,#8]
;;;649    }
00001e  bd10              POP      {r4,pc}
;;;650    
                          ENDP

                  |L39.32|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetTxRegister||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetTxRegister PROC
;;;1230   /*---------------------------------------------------------------------------------------------------------*/
;;;1231   uint32_t DrvSPI_SetTxRegister(E_DRVSPI_PORT eSpiPort, uint32_t *pu32Buf, uint32_t u32DataCount)
000000  b570              PUSH     {r4-r6,lr}
;;;1232   {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;1233       uint32_t i;
;;;1234   
;;;1235       if(u32DataCount>2)
000006  2a02              CMP      r2,#2
000008  d900              BLS      |L40.12|
;;;1236           u32DataCount = 2;
00000a  2202              MOVS     r2,#2
                  |L40.12|
;;;1237       
;;;1238       for(i=0; i<u32DataCount; i++)
00000c  2100              MOVS     r1,#0
00000e  e008              B        |L40.34|
                  |L40.16|
;;;1239       {
;;;1240           SPI_PORT[eSpiPort]->TX[i] = pu32Buf[i];
000010  0088              LSLS     r0,r1,#2
000012  5825              LDR      r5,[r4,r0]
000014  0098              LSLS     r0,r3,#2
000016  4e05              LDR      r6,|L40.44|
000018  5830              LDR      r0,[r6,r0]
00001a  3020              ADDS     r0,r0,#0x20
00001c  008e              LSLS     r6,r1,#2
00001e  5185              STR      r5,[r0,r6]
000020  1c49              ADDS     r1,r1,#1              ;1238
                  |L40.34|
000022  4291              CMP      r1,r2                 ;1238
000024  d3f4              BCC      |L40.16|
;;;1241       }
;;;1242   
;;;1243       return u32DataCount;
000026  4610              MOV      r0,r2
;;;1244   }
000028  bd70              POP      {r4-r6,pc}
;;;1245   
                          ENDP

00002a  0000              DCW      0x0000
                  |L40.44|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SetVariableClockFunction||, CODE, READONLY, ALIGN=2

                  DrvSPI_SetVariableClockFunction PROC
;;;957    /*---------------------------------------------------------------------------------------------------------*/
;;;958    void DrvSPI_SetVariableClockFunction(E_DRVSPI_PORT eSpiPort, uint8_t bEnable, uint32_t u32Pattern)
000000  b530              PUSH     {r4,r5,lr}
;;;959    {
;;;960        if(bEnable)
000002  2900              CMP      r1,#0
000004  d010              BEQ      |L41.40|
;;;961        {
;;;962            SPI_PORT[eSpiPort]->CNTRL.VARCLK_EN = 1;
000006  0083              LSLS     r3,r0,#2
000008  4c0d              LDR      r4,|L41.64|
00000a  58e3              LDR      r3,[r4,r3]
00000c  681b              LDR      r3,[r3,#0]
00000e  2401              MOVS     r4,#1
000010  05e4              LSLS     r4,r4,#23
000012  43a3              BICS     r3,r3,r4
000014  191b              ADDS     r3,r3,r4
000016  0084              LSLS     r4,r0,#2
000018  4d09              LDR      r5,|L41.64|
00001a  592c              LDR      r4,[r5,r4]
00001c  6023              STR      r3,[r4,#0]
;;;963            SPI_PORT[eSpiPort]->VARCLK = u32Pattern;
00001e  0083              LSLS     r3,r0,#2
000020  462c              MOV      r4,r5
000022  58e3              LDR      r3,[r4,r3]
000024  635a              STR      r2,[r3,#0x34]
000026  e00a              B        |L41.62|
                  |L41.40|
;;;964        }
;;;965        else
;;;966            SPI_PORT[eSpiPort]->CNTRL.VARCLK_EN = 0;
000028  0083              LSLS     r3,r0,#2
00002a  4c05              LDR      r4,|L41.64|
00002c  58e3              LDR      r3,[r4,r3]
00002e  681b              LDR      r3,[r3,#0]
000030  2401              MOVS     r4,#1
000032  05e4              LSLS     r4,r4,#23
000034  43a3              BICS     r3,r3,r4
000036  0084              LSLS     r4,r0,#2
000038  4d01              LDR      r5,|L41.64|
00003a  592c              LDR      r4,[r5,r4]
00003c  6023              STR      r3,[r4,#0]
                  |L41.62|
;;;967    }
00003e  bd30              POP      {r4,r5,pc}
;;;968    
                          ENDP

                  |L41.64|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SingleRead||, CODE, READONLY, ALIGN=2

                  DrvSPI_SingleRead PROC
;;;1101   /*---------------------------------------------------------------------------------------------------------*/
;;;1102   uint8_t DrvSPI_SingleRead(E_DRVSPI_PORT eSpiPort, uint32_t *pu32Data)
000000  b510              PUSH     {r4,lr}
;;;1103   {
000002  4602              MOV      r2,r0
;;;1104       if(SPI_PORT[eSpiPort]->CNTRL.GO_BUSY==1)
000004  0090              LSLS     r0,r2,#2
000006  4b0d              LDR      r3,|L42.60|
000008  5818              LDR      r0,[r3,r0]
00000a  6800              LDR      r0,[r0,#0]
00000c  07c0              LSLS     r0,r0,#31
00000e  0fc0              LSRS     r0,r0,#31
000010  2800              CMP      r0,#0
000012  d001              BEQ      |L42.24|
;;;1105           return FALSE;
000014  2000              MOVS     r0,#0
                  |L42.22|
;;;1106   
;;;1107       *pu32Data = SPI_PORT[eSpiPort]->RX[0];
;;;1108       SPI_PORT[eSpiPort]->CNTRL.GO_BUSY = 1;
;;;1109       return TRUE;
;;;1110   }
000016  bd10              POP      {r4,pc}
                  |L42.24|
000018  0090              LSLS     r0,r2,#2              ;1107
00001a  4b08              LDR      r3,|L42.60|
00001c  5818              LDR      r0,[r3,r0]            ;1107
00001e  6900              LDR      r0,[r0,#0x10]         ;1107
000020  6008              STR      r0,[r1,#0]            ;1107
000022  0090              LSLS     r0,r2,#2              ;1108
000024  5818              LDR      r0,[r3,r0]            ;1108
000026  6800              LDR      r0,[r0,#0]            ;1108
000028  0840              LSRS     r0,r0,#1              ;1108
00002a  0040              LSLS     r0,r0,#1              ;1108
00002c  1c40              ADDS     r0,r0,#1              ;1108
00002e  0093              LSLS     r3,r2,#2              ;1108
000030  4c02              LDR      r4,|L42.60|
000032  58e3              LDR      r3,[r4,r3]            ;1108
000034  6018              STR      r0,[r3,#0]            ;1108
000036  2001              MOVS     r0,#1                 ;1109
000038  e7ed              B        |L42.22|
;;;1111   
                          ENDP

00003a  0000              DCW      0x0000
                  |L42.60|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SingleWrite||, CODE, READONLY, ALIGN=2

                  DrvSPI_SingleWrite PROC
;;;1125   /*---------------------------------------------------------------------------------------------------------*/
;;;1126   uint8_t DrvSPI_SingleWrite(E_DRVSPI_PORT eSpiPort, uint32_t *pu32Data)
000000  b510              PUSH     {r4,lr}
;;;1127   {
000002  4602              MOV      r2,r0
;;;1128       if(SPI_PORT[eSpiPort]->CNTRL.GO_BUSY==1)
000004  0090              LSLS     r0,r2,#2
000006  4b0d              LDR      r3,|L43.60|
000008  5818              LDR      r0,[r3,r0]
00000a  6800              LDR      r0,[r0,#0]
00000c  07c0              LSLS     r0,r0,#31
00000e  0fc0              LSRS     r0,r0,#31
000010  2800              CMP      r0,#0
000012  d001              BEQ      |L43.24|
;;;1129           return FALSE;
000014  2000              MOVS     r0,#0
                  |L43.22|
;;;1130   
;;;1131       SPI_PORT[eSpiPort]->TX[0] = *pu32Data;
;;;1132       SPI_PORT[eSpiPort]->CNTRL.GO_BUSY = 1;
;;;1133       return TRUE;
;;;1134   }
000016  bd10              POP      {r4,pc}
                  |L43.24|
000018  0093              LSLS     r3,r2,#2              ;1131
00001a  4c08              LDR      r4,|L43.60|
00001c  58e3              LDR      r3,[r4,r3]            ;1131
00001e  6808              LDR      r0,[r1,#0]            ;1131
000020  6218              STR      r0,[r3,#0x20]         ;1131
000022  0090              LSLS     r0,r2,#2              ;1132
000024  4623              MOV      r3,r4                 ;1132
000026  5818              LDR      r0,[r3,r0]            ;1132
000028  6800              LDR      r0,[r0,#0]            ;1132
00002a  0840              LSRS     r0,r0,#1              ;1132
00002c  0040              LSLS     r0,r0,#1              ;1132
00002e  1c40              ADDS     r0,r0,#1              ;1132
000030  0093              LSLS     r3,r2,#2              ;1132
000032  58e3              LDR      r3,[r4,r3]            ;1132
000034  6018              STR      r0,[r3,#0]            ;1132
000036  2001              MOVS     r0,#1                 ;1133
000038  e7ed              B        |L43.22|
;;;1135   
                          ENDP

00003a  0000              DCW      0x0000
                  |L43.60|
                          DCD      SPI_PORT

                          AREA ||i.DrvSPI_SingleWrite_byte||, CODE, READONLY, ALIGN=2

                  DrvSPI_SingleWrite_byte PROC
;;;1529   
;;;1530   uint8_t DrvSPI_SingleWrite_byte(E_DRVSPI_PORT eSpiPort, uint32_t pu32Data)
000000  b510              PUSH     {r4,lr}
;;;1531   {
000002  4602              MOV      r2,r0
;;;1532       if(SPI_PORT[eSpiPort]->CNTRL.GO_BUSY==1)
000004  0090              LSLS     r0,r2,#2
000006  4b0c              LDR      r3,|L44.56|
000008  5818              LDR      r0,[r3,r0]
00000a  6800              LDR      r0,[r0,#0]
00000c  07c0              LSLS     r0,r0,#31
00000e  0fc0              LSRS     r0,r0,#31
000010  2800              CMP      r0,#0
000012  d001              BEQ      |L44.24|
;;;1533           return FALSE;
000014  2000              MOVS     r0,#0
                  |L44.22|
;;;1534   
;;;1535       SPI_PORT[eSpiPort]->TX[0] = pu32Data;
;;;1536       SPI_PORT[eSpiPort]->CNTRL.GO_BUSY = 1;
;;;1537       return TRUE;
;;;1538   }
000016  bd10              POP      {r4,pc}
                  |L44.24|
000018  0090              LSLS     r0,r2,#2              ;1535
00001a  4b07              LDR      r3,|L44.56|
00001c  5818              LDR      r0,[r3,r0]            ;1535
00001e  6201              STR      r1,[r0,#0x20]         ;1535
000020  0090              LSLS     r0,r2,#2              ;1536
000022  5818              LDR      r0,[r3,r0]            ;1536
000024  6800              LDR      r0,[r0,#0]            ;1536
000026  0840              LSRS     r0,r0,#1              ;1536
000028  0040              LSLS     r0,r0,#1              ;1536
00002a  1c40              ADDS     r0,r0,#1              ;1536
00002c  0093              LSLS     r3,r2,#2              ;1536
00002e  4c02              LDR      r4,|L44.56|
000030  58e3              LDR      r3,[r4,r3]            ;1536
000032  6018              STR      r0,[r3,#0]            ;1536
000034  2001              MOVS     r0,#1                 ;1537
000036  e7ee              B        |L44.22|
;;;1539   
                          ENDP

                  |L44.56|
                          DCD      SPI_PORT

                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_DisableIRQ PROC
;;;809     */
;;;810    static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;811    {
;;;812      NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L45.16|
00000a  6011              STR      r1,[r2,#0]
;;;813    }
00000c  4770              BX       lr
;;;814    
                          ENDP

00000e  0000              DCW      0x0000
                  |L45.16|
                          DCD      0xe000e180

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;796     */
;;;797    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;798    {
;;;799      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L46.16|
00000a  6011              STR      r1,[r2,#0]
;;;800    }
00000c  4770              BX       lr
;;;801    
                          ENDP

00000e  0000              DCW      0x0000
                  |L46.16|
                          DCD      0xe000e100

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;866     */
;;;867    static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;868    {
;;;869      if(IRQn < 0) {
000002  2800              CMP      r0,#0
000004  da19              BGE      |L47.58|
;;;870        SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
000006  4a1a              LDR      r2,|L47.112|
000008  0703              LSLS     r3,r0,#28
00000a  0f1b              LSRS     r3,r3,#28
00000c  3b08              SUBS     r3,r3,#8
00000e  089b              LSRS     r3,r3,#2
000010  009b              LSLS     r3,r3,#2
000012  58d2              LDR      r2,[r2,r3]
000014  0783              LSLS     r3,r0,#30
000016  0edc              LSRS     r4,r3,#27
000018  23ff              MOVS     r3,#0xff
00001a  40a3              LSLS     r3,r3,r4
00001c  439a              BICS     r2,r2,r3
00001e  078b              LSLS     r3,r1,#30
000020  0e1b              LSRS     r3,r3,#24
000022  0784              LSLS     r4,r0,#30
000024  0ee4              LSRS     r4,r4,#27
000026  40a3              LSLS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
00002a  4b11              LDR      r3,|L47.112|
00002c  0704              LSLS     r4,r0,#28
00002e  0f24              LSRS     r4,r4,#28
000030  3c08              SUBS     r4,r4,#8
000032  08a4              LSRS     r4,r4,#2
000034  00a4              LSLS     r4,r4,#2
000036  511a              STR      r2,[r3,r4]
000038  e018              B        |L47.108|
                  |L47.58|
;;;871            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;872      else {
;;;873        NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
00003a  4a0e              LDR      r2,|L47.116|
00003c  2303              MOVS     r3,#3
00003e  021b              LSLS     r3,r3,#8
000040  18d2              ADDS     r2,r2,r3
000042  0883              LSRS     r3,r0,#2
000044  009b              LSLS     r3,r3,#2
000046  58d2              LDR      r2,[r2,r3]
000048  0783              LSLS     r3,r0,#30
00004a  0edc              LSRS     r4,r3,#27
00004c  23ff              MOVS     r3,#0xff
00004e  40a3              LSLS     r3,r3,r4
000050  439a              BICS     r2,r2,r3
000052  078b              LSLS     r3,r1,#30
000054  0e1b              LSRS     r3,r3,#24
000056  0784              LSLS     r4,r0,#30
000058  0ee4              LSRS     r4,r4,#27
00005a  40a3              LSLS     r3,r3,r4
00005c  431a              ORRS     r2,r2,r3
00005e  4b05              LDR      r3,|L47.116|
000060  2403              MOVS     r4,#3
000062  0224              LSLS     r4,r4,#8
000064  191b              ADDS     r3,r3,r4
000066  0884              LSRS     r4,r0,#2
000068  00a4              LSLS     r4,r4,#2
00006a  511a              STR      r2,[r3,r4]
                  |L47.108|
;;;874            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;875    }
00006c  bd10              POP      {r4,pc}
;;;876    
                          ENDP

00006e  0000              DCW      0x0000
                  |L47.112|
                          DCD      0xe000ed1c
                  |L47.116|
                          DCD      0xe000e100

                          AREA ||i.SPI0_IRQHandler||, CODE, READONLY, ALIGN=2

                  SPI0_IRQHandler PROC
;;;47     /*---------------------------------------------------------------------------------------------------------*/
;;;48     void SPI0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;49     {
;;;50         if( SPI0->CNTRL.IF == 1 ) /* One transaction done interrupt */
000002  4816              LDR      r0,|L48.92|
000004  6800              LDR      r0,[r0,#0]
000006  03c0              LSLS     r0,r0,#15
000008  0fc0              LSRS     r0,r0,#31
00000a  2800              CMP      r0,#0
00000c  d00f              BEQ      |L48.46|
;;;51         {
;;;52             SPI0->CNTRL.IF = 1;   /* write '1' to clear SPI0 interrupt flag */
00000e  4813              LDR      r0,|L48.92|
000010  6800              LDR      r0,[r0,#0]
000012  2101              MOVS     r1,#1
000014  0409              LSLS     r1,r1,#16
000016  4388              BICS     r0,r0,r1
000018  1840              ADDS     r0,r0,r1
00001a  4910              LDR      r1,|L48.92|
00001c  6008              STR      r0,[r1,#0]
;;;53         
;;;54             if(g_sSpiHandler[0].pfnOneTransDoneCallBack != NULL)
00001e  4810              LDR      r0,|L48.96|
000020  6840              LDR      r0,[r0,#4]  ; g_sSpiHandler
000022  2800              CMP      r0,#0
000024  d003              BEQ      |L48.46|
;;;55             {
;;;56                 g_sSpiHandler[0].pfnOneTransDoneCallBack(g_sSpiHandler[0].u32OneTransDoneUserData);
000026  4a0e              LDR      r2,|L48.96|
000028  6890              LDR      r0,[r2,#8]  ; g_sSpiHandler
00002a  6851              LDR      r1,[r2,#4]  ; g_sSpiHandler
00002c  4788              BLX      r1
                  |L48.46|
;;;57             }
;;;58         }
;;;59         
;;;60         if( SPI0->CNTRL2.SLV_START_INTSTS == 1 ) /* 3-wire SPI start interrupt */
00002e  480b              LDR      r0,|L48.92|
000030  6bc0              LDR      r0,[r0,#0x3c]
000032  0500              LSLS     r0,r0,#20
000034  0fc0              LSRS     r0,r0,#31
000036  2800              CMP      r0,#0
000038  d00f              BEQ      |L48.90|
;;;61         {
;;;62             SPI0->CNTRL2.SLV_START_INTSTS = 1;   /* write '1' to clear SPI0 3-wire start interrupt flag */
00003a  4808              LDR      r0,|L48.92|
00003c  6bc0              LDR      r0,[r0,#0x3c]
00003e  2101              MOVS     r1,#1
000040  02c9              LSLS     r1,r1,#11
000042  4388              BICS     r0,r0,r1
000044  1840              ADDS     r0,r0,r1
000046  4905              LDR      r1,|L48.92|
000048  63c8              STR      r0,[r1,#0x3c]
;;;63         
;;;64             if(g_sSpiHandler[0].pfn3WireStartCallBack != NULL)
00004a  4805              LDR      r0,|L48.96|
00004c  68c0              LDR      r0,[r0,#0xc]  ; g_sSpiHandler
00004e  2800              CMP      r0,#0
000050  d003              BEQ      |L48.90|
;;;65             {
;;;66                 g_sSpiHandler[0].pfn3WireStartCallBack(g_sSpiHandler[0].u32ThreeWireStartUserData);
000052  4a03              LDR      r2,|L48.96|
000054  6910              LDR      r0,[r2,#0x10]  ; g_sSpiHandler
000056  68d1              LDR      r1,[r2,#0xc]  ; g_sSpiHandler
000058  4788              BLX      r1
                  |L48.90|
;;;67             }
;;;68         }
;;;69     }
00005a  bd10              POP      {r4,pc}
;;;70     
                          ENDP

                  |L48.92|
                          DCD      0x40030000
                  |L48.96|
                          DCD      g_sSpiHandler

                          AREA ||i.SPI1_IRQHandler||, CODE, READONLY, ALIGN=2

                  SPI1_IRQHandler PROC
;;;82     /*---------------------------------------------------------------------------------------------------------*/
;;;83     void SPI1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;84     {
;;;85         if( SPI1->CNTRL.IF == 1 ) /* One transaction done interrupt */
000002  4816              LDR      r0,|L49.92|
000004  6800              LDR      r0,[r0,#0]
000006  03c0              LSLS     r0,r0,#15
000008  0fc0              LSRS     r0,r0,#31
00000a  2800              CMP      r0,#0
00000c  d00f              BEQ      |L49.46|
;;;86         {
;;;87             SPI1->CNTRL.IF = 1;   /* write '1' to clear SPI1 interrupt flag */
00000e  4813              LDR      r0,|L49.92|
000010  6800              LDR      r0,[r0,#0]
000012  2101              MOVS     r1,#1
000014  0409              LSLS     r1,r1,#16
000016  4388              BICS     r0,r0,r1
000018  1840              ADDS     r0,r0,r1
00001a  4910              LDR      r1,|L49.92|
00001c  6008              STR      r0,[r1,#0]
;;;88         
;;;89             if(g_sSpiHandler[1].pfnOneTransDoneCallBack != NULL)
00001e  4810              LDR      r0,|L49.96|
000020  6980              LDR      r0,[r0,#0x18]
000022  2800              CMP      r0,#0
000024  d003              BEQ      |L49.46|
;;;90             {
;;;91                 g_sSpiHandler[1].pfnOneTransDoneCallBack(g_sSpiHandler[1].u32OneTransDoneUserData);
000026  4a0e              LDR      r2,|L49.96|
000028  69d0              LDR      r0,[r2,#0x1c]
00002a  6991              LDR      r1,[r2,#0x18]
00002c  4788              BLX      r1
                  |L49.46|
;;;92             }
;;;93         }
;;;94         
;;;95         if( SPI1->CNTRL2.SLV_START_INTSTS == 1 ) /* 3-wire SPI start interrupt */
00002e  480b              LDR      r0,|L49.92|
000030  6bc0              LDR      r0,[r0,#0x3c]
000032  0500              LSLS     r0,r0,#20
000034  0fc0              LSRS     r0,r0,#31
000036  2800              CMP      r0,#0
000038  d00f              BEQ      |L49.90|
;;;96         {
;;;97             SPI1->CNTRL2.SLV_START_INTSTS = 1;   /* write '1' to clear SPI1 3-wire start interrupt flag */
00003a  4808              LDR      r0,|L49.92|
00003c  6bc0              LDR      r0,[r0,#0x3c]
00003e  2101              MOVS     r1,#1
000040  02c9              LSLS     r1,r1,#11
000042  4388              BICS     r0,r0,r1
000044  1840              ADDS     r0,r0,r1
000046  4905              LDR      r1,|L49.92|
000048  63c8              STR      r0,[r1,#0x3c]
;;;98         
;;;99             if(g_sSpiHandler[1].pfn3WireStartCallBack != NULL)
00004a  4805              LDR      r0,|L49.96|
00004c  6a00              LDR      r0,[r0,#0x20]
00004e  2800              CMP      r0,#0
000050  d003              BEQ      |L49.90|
;;;100            {
;;;101                g_sSpiHandler[1].pfn3WireStartCallBack(g_sSpiHandler[1].u32ThreeWireStartUserData);
000052  4a03              LDR      r2,|L49.96|
000054  6a50              LDR      r0,[r2,#0x24]
000056  6a11              LDR      r1,[r2,#0x20]
000058  4788              BLX      r1
                  |L49.90|
;;;102            }
;;;103        }
;;;104    }
00005a  bd10              POP      {r4,pc}
;;;105    
                          ENDP

                  |L49.92|
                          DCD      0x40034000
                  |L49.96|
                          DCD      g_sSpiHandler

                          AREA ||i.SPI2_IRQHandler||, CODE, READONLY, ALIGN=2

                  SPI2_IRQHandler PROC
;;;117    /*---------------------------------------------------------------------------------------------------------*/
;;;118    void SPI2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;119    {
;;;120        if( SPI2->CNTRL.IF == 1 ) /* One transaction done interrupt */
000002  4816              LDR      r0,|L50.92|
000004  6800              LDR      r0,[r0,#0]
000006  03c0              LSLS     r0,r0,#15
000008  0fc0              LSRS     r0,r0,#31
00000a  2800              CMP      r0,#0
00000c  d00f              BEQ      |L50.46|
;;;121        {
;;;122            SPI2->CNTRL.IF = 1;   /* write '1' to clear SPI2 interrupt flag */
00000e  4813              LDR      r0,|L50.92|
000010  6800              LDR      r0,[r0,#0]
000012  2101              MOVS     r1,#1
000014  0409              LSLS     r1,r1,#16
000016  4388              BICS     r0,r0,r1
000018  1840              ADDS     r0,r0,r1
00001a  4910              LDR      r1,|L50.92|
00001c  6008              STR      r0,[r1,#0]
;;;123        
;;;124            if(g_sSpiHandler[2].pfnOneTransDoneCallBack != NULL)
00001e  4810              LDR      r0,|L50.96|
000020  6ac0              LDR      r0,[r0,#0x2c]
000022  2800              CMP      r0,#0
000024  d003              BEQ      |L50.46|
;;;125            {
;;;126                g_sSpiHandler[2].pfnOneTransDoneCallBack(g_sSpiHandler[2].u32OneTransDoneUserData);
000026  4a0e              LDR      r2,|L50.96|
000028  6b10              LDR      r0,[r2,#0x30]
00002a  6ad1              LDR      r1,[r2,#0x2c]
00002c  4788              BLX      r1
                  |L50.46|
;;;127            }
;;;128        }
;;;129        
;;;130        if( SPI2->CNTRL2.SLV_START_INTSTS == 1 ) /* 3-wire SPI start interrupt */
00002e  480b              LDR      r0,|L50.92|
000030  6bc0              LDR      r0,[r0,#0x3c]
000032  0500              LSLS     r0,r0,#20
000034  0fc0              LSRS     r0,r0,#31
000036  2800              CMP      r0,#0
000038  d00f              BEQ      |L50.90|
;;;131        {
;;;132            SPI2->CNTRL2.SLV_START_INTSTS = 1;   /* write '1' to clear SPI2 3-wire start interrupt flag */
00003a  4808              LDR      r0,|L50.92|
00003c  6bc0              LDR      r0,[r0,#0x3c]
00003e  2101              MOVS     r1,#1
000040  02c9              LSLS     r1,r1,#11
000042  4388              BICS     r0,r0,r1
000044  1840              ADDS     r0,r0,r1
000046  4905              LDR      r1,|L50.92|
000048  63c8              STR      r0,[r1,#0x3c]
;;;133        
;;;134            if(g_sSpiHandler[2].pfn3WireStartCallBack != NULL)
00004a  4805              LDR      r0,|L50.96|
00004c  6b40              LDR      r0,[r0,#0x34]
00004e  2800              CMP      r0,#0
000050  d003              BEQ      |L50.90|
;;;135            {
;;;136                g_sSpiHandler[2].pfn3WireStartCallBack(g_sSpiHandler[2].u32ThreeWireStartUserData);
000052  4a03              LDR      r2,|L50.96|
000054  6b90              LDR      r0,[r2,#0x38]
000056  6b51              LDR      r1,[r2,#0x34]
000058  4788              BLX      r1
                  |L50.90|
;;;137            }
;;;138        }
;;;139    }
00005a  bd10              POP      {r4,pc}
;;;140    
                          ENDP

                  |L50.92|
                          DCD      0x40130000
                  |L50.96|
                          DCD      g_sSpiHandler

                          AREA ||i.SPI3_IRQHandler||, CODE, READONLY, ALIGN=2

                  SPI3_IRQHandler PROC
;;;152    /*---------------------------------------------------------------------------------------------------------*/
;;;153    void SPI3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;154    {
;;;155        if( SPI3->CNTRL.IF == 1 ) /* One transaction done interrupt */
000002  4816              LDR      r0,|L51.92|
000004  6800              LDR      r0,[r0,#0]
000006  03c0              LSLS     r0,r0,#15
000008  0fc0              LSRS     r0,r0,#31
00000a  2800              CMP      r0,#0
00000c  d00f              BEQ      |L51.46|
;;;156        {
;;;157            SPI3->CNTRL.IF = 1;   /* write '1' to clear SPI3 interrupt flag */
00000e  4813              LDR      r0,|L51.92|
000010  6800              LDR      r0,[r0,#0]
000012  2101              MOVS     r1,#1
000014  0409              LSLS     r1,r1,#16
000016  4388              BICS     r0,r0,r1
000018  1840              ADDS     r0,r0,r1
00001a  4910              LDR      r1,|L51.92|
00001c  6008              STR      r0,[r1,#0]
;;;158        
;;;159            if(g_sSpiHandler[3].pfnOneTransDoneCallBack != NULL)
00001e  4810              LDR      r0,|L51.96|
000020  6c00              LDR      r0,[r0,#0x40]
000022  2800              CMP      r0,#0
000024  d003              BEQ      |L51.46|
;;;160            {
;;;161                g_sSpiHandler[3].pfnOneTransDoneCallBack(g_sSpiHandler[3].u32OneTransDoneUserData);
000026  4a0e              LDR      r2,|L51.96|
000028  6c50              LDR      r0,[r2,#0x44]
00002a  6c11              LDR      r1,[r2,#0x40]
00002c  4788              BLX      r1
                  |L51.46|
;;;162            }
;;;163        }
;;;164        
;;;165        if( SPI3->CNTRL2.SLV_START_INTSTS == 1 ) /* 3-wire SPI start interrupt */
00002e  480b              LDR      r0,|L51.92|
000030  6bc0              LDR      r0,[r0,#0x3c]
000032  0500              LSLS     r0,r0,#20
000034  0fc0              LSRS     r0,r0,#31
000036  2800              CMP      r0,#0
000038  d00f              BEQ      |L51.90|
;;;166        {
;;;167            SPI3->CNTRL2.SLV_START_INTSTS = 1;   /* write '1' to clear SPI3 3-wire start interrupt flag */
00003a  4808              LDR      r0,|L51.92|
00003c  6bc0              LDR      r0,[r0,#0x3c]
00003e  2101              MOVS     r1,#1
000040  02c9              LSLS     r1,r1,#11
000042  4388              BICS     r0,r0,r1
000044  1840              ADDS     r0,r0,r1
000046  4905              LDR      r1,|L51.92|
000048  63c8              STR      r0,[r1,#0x3c]
;;;168        
;;;169            if(g_sSpiHandler[3].pfn3WireStartCallBack != NULL)
00004a  4805              LDR      r0,|L51.96|
00004c  6c80              LDR      r0,[r0,#0x48]
00004e  2800              CMP      r0,#0
000050  d003              BEQ      |L51.90|
;;;170            {
;;;171                g_sSpiHandler[3].pfn3WireStartCallBack(g_sSpiHandler[3].u32ThreeWireStartUserData);
000052  4a03              LDR      r2,|L51.96|
000054  6cd0              LDR      r0,[r2,#0x4c]
000056  6c91              LDR      r1,[r2,#0x48]
000058  4788              BLX      r1
                  |L51.90|
;;;172            }
;;;173        }
;;;174    }
00005a  bd10              POP      {r4,pc}
;;;175    
                          ENDP

                  |L51.92|
                          DCD      0x40134000
                  |L51.96|
                          DCD      g_sSpiHandler

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_sSpiHandler
                          %        80

                          AREA ||.data||, DATA, ALIGN=2

                  SPI_PORT
                          DCD      0x40030000
                          DCD      0x40034000
                          DCD      0x40130000
                          DCD      0x40134000
