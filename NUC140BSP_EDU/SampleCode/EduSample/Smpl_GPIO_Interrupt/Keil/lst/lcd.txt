; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\lcd.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\lcd.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC1xx\Include -I..\..\..\..\Library\Device\Nuvoton\NUC1xx\Source -I..\..\..\..\Library\ -I..\..\..\..\Library\NUC1xx\Include -I..\..\..\..\Library\NUC1xx-LB_002\Include -IF:\Keil\ARM\RV31\INC -IF:\Keil\ARM\CMSIS\Include -IF:\Keil\ARM\INC\ST\STM32F10x -D__UVISION_VERSION=524 --omf_browse=.\obj\lcd.crf ..\..\..\..\Library\NUC1xx-LB_002\Source\LCD.c]
                          THUMB

                          AREA ||i.clear_LCD||, CODE, READONLY, ALIGN=2

                  clear_LCD PROC
;;;87     
;;;88     void clear_LCD(void)
000000  b530              PUSH     {r4,r5,lr}
;;;89     {
;;;90     	int16_t i,j;
;;;91     	for (j=0;j<LCD_Ymax;j++)
000002  2500              MOVS     r5,#0
000004  e011              B        |L1.42|
                  |L1.6|
;;;92     	  for (i=0;i<LCD_Xmax;i++)
000006  2400              MOVS     r4,#0
000008  e00b              B        |L1.34|
                  |L1.10|
;;;93     	     DisplayBuffer[i+j/8*LCD_Xmax]=0;
00000a  2100              MOVS     r1,#0
00000c  4628              MOV      r0,r5
00000e  17ea              ASRS     r2,r5,#31
000010  0f52              LSRS     r2,r2,#29
000012  1812              ADDS     r2,r2,r0
000014  10d2              ASRS     r2,r2,#3
000016  01d2              LSLS     r2,r2,#7
000018  1912              ADDS     r2,r2,r4
00001a  4b0e              LDR      r3,|L1.84|
00001c  5499              STRB     r1,[r3,r2]
00001e  1c60              ADDS     r0,r4,#1              ;92
000020  b204              SXTH     r4,r0                 ;92
                  |L1.34|
000022  2c80              CMP      r4,#0x80              ;92
000024  dbf1              BLT      |L1.10|
000026  1c68              ADDS     r0,r5,#1              ;91
000028  b205              SXTH     r5,r0                 ;91
                  |L1.42|
00002a  2d40              CMP      r5,#0x40              ;91
00002c  dbeb              BLT      |L1.6|
;;;94     	
;;;95     	lcdSetAddr(0x0, 0x0);			  								  
00002e  2100              MOVS     r1,#0
000030  4608              MOV      r0,r1
000032  f7fffffe          BL       lcdSetAddr
;;;96     	for (i = 0; i < 132 *8; i++)
000036  2400              MOVS     r4,#0
000038  e004              B        |L1.68|
                  |L1.58|
;;;97     	{
;;;98     		lcdWriteData(0x00);
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       lcdWriteData
000040  1c60              ADDS     r0,r4,#1              ;96
000042  b204              SXTH     r4,r0                 ;96
                  |L1.68|
000044  2021              MOVS     r0,#0x21              ;96
000046  0140              LSLS     r0,r0,#5              ;96
000048  4284              CMP      r4,r0                 ;96
00004a  dbf6              BLT      |L1.58|
;;;99     	}
;;;100    	lcdWriteData(0x0f);
00004c  200f              MOVS     r0,#0xf
00004e  f7fffffe          BL       lcdWriteData
;;;101    }
000052  bd30              POP      {r4,r5,pc}
;;;102    
                          ENDP

                  |L1.84|
                          DCD      DisplayBuffer

                          AREA ||i.draw_Bmp16x16||, CODE, READONLY, ALIGN=1

                  draw_Bmp16x16 PROC
;;;212    
;;;213    void draw_Bmp16x16(int16_t x, int16_t y, uint16_t fgColor, uint16_t bgColor, unsigned char bitmap[])
000000  b5ff              PUSH     {r0-r7,lr}
;;;214    {
000002  b083              SUB      sp,sp,#0xc
000004  4607              MOV      r7,r0
;;;215    	uint8_t t,i,j,k, kx,ky;
;;;216    	if (x<(LCD_Xmax-15) && y<(LCD_Ymax-15)) // boundary check
000006  2f71              CMP      r7,#0x71
000008  da2e              BGE      |L2.104|
00000a  9804              LDR      r0,[sp,#0x10]
00000c  2831              CMP      r0,#0x31
00000e  da2b              BGE      |L2.104|
;;;217    	   for (j=0;j<2; j++){		 
000010  2400              MOVS     r4,#0
000012  e027              B        |L2.100|
                  |L2.20|
;;;218    		     for (i=0;i<16;i++) {	
000014  2500              MOVS     r5,#0
000016  e021              B        |L2.92|
                  |L2.24|
;;;219                kx=x+i;
000018  1978              ADDS     r0,r7,r5
00001a  b2c0              UXTB     r0,r0
00001c  9001              STR      r0,[sp,#4]
;;;220    					  t=bitmap[i+j*16];					 
00001e  0120              LSLS     r0,r4,#4
000020  1941              ADDS     r1,r0,r5
000022  980c              LDR      r0,[sp,#0x30]
000024  5c40              LDRB     r0,[r0,r1]
000026  9002              STR      r0,[sp,#8]
;;;221    					  for (k=0;k<8;k++) {
000028  2600              MOVS     r6,#0
00002a  e013              B        |L2.84|
                  |L2.44|
;;;222    					      ky=y+j*8+k;
00002c  00e1              LSLS     r1,r4,#3
00002e  9804              LDR      r0,[sp,#0x10]
000030  1808              ADDS     r0,r1,r0
000032  1980              ADDS     r0,r0,r6
000034  b2c0              UXTB     r0,r0
000036  9000              STR      r0,[sp,#0]
;;;223    					      if (t&(0x01<<k)) draw_Pixel(kx,ky,fgColor,bgColor);
000038  2001              MOVS     r0,#1
00003a  40b0              LSLS     r0,r0,r6
00003c  9902              LDR      r1,[sp,#8]
00003e  4008              ANDS     r0,r0,r1
000040  2800              CMP      r0,#0
000042  d005              BEQ      |L2.80|
000044  9b06              LDR      r3,[sp,#0x18]
000046  9a05              LDR      r2,[sp,#0x14]
000048  9900              LDR      r1,[sp,#0]
00004a  9801              LDR      r0,[sp,#4]
00004c  f7fffffe          BL       draw_Pixel
                  |L2.80|
000050  1c70              ADDS     r0,r6,#1              ;221
000052  b2c6              UXTB     r6,r0                 ;221
                  |L2.84|
000054  2e08              CMP      r6,#8                 ;221
000056  dbe9              BLT      |L2.44|
000058  1c68              ADDS     r0,r5,#1              ;218
00005a  b2c5              UXTB     r5,r0                 ;218
                  |L2.92|
00005c  2d10              CMP      r5,#0x10              ;218
00005e  dbdb              BLT      |L2.24|
000060  1c60              ADDS     r0,r4,#1              ;217
000062  b2c4              UXTB     r4,r0                 ;217
                  |L2.100|
000064  2c02              CMP      r4,#2                 ;217
000066  dbd5              BLT      |L2.20|
                  |L2.104|
;;;224    						}
;;;225    		     //lcdSetAddr(y/8+j,(LCD_Xmax+1-x-i));
;;;226    	       //lcdWriteData(bitmap[i+j*16]);
;;;227    		     }
;;;228    		 }
;;;229    }
000068  b007              ADD      sp,sp,#0x1c
00006a  bdf0              POP      {r4-r7,pc}
;;;230    
                          ENDP


                          AREA ||i.draw_Bmp16x32||, CODE, READONLY, ALIGN=1

                  draw_Bmp16x32 PROC
;;;230    
;;;231    void draw_Bmp16x32(int16_t x, int16_t y, uint16_t fgColor, uint16_t bgColor, unsigned char bitmap[])
000000  b5ff              PUSH     {r0-r7,lr}
;;;232    {
000002  b083              SUB      sp,sp,#0xc
000004  4607              MOV      r7,r0
;;;233    	uint8_t t, i,j,k, kx,ky;
;;;234    	if (x<(LCD_Xmax-15) && y<(LCD_Ymax-31)) // boundary check
000006  2f71              CMP      r7,#0x71
000008  da2e              BGE      |L3.104|
00000a  9804              LDR      r0,[sp,#0x10]
00000c  2821              CMP      r0,#0x21
00000e  da2b              BGE      |L3.104|
;;;235    	   for (j=0;j<4; j++)	{			 
000010  2400              MOVS     r4,#0
000012  e027              B        |L3.100|
                  |L3.20|
;;;236    		     for (i=0;i<16;i++) {
000014  2500              MOVS     r5,#0
000016  e021              B        |L3.92|
                  |L3.24|
;;;237                kx=x+i;
000018  1978              ADDS     r0,r7,r5
00001a  b2c0              UXTB     r0,r0
00001c  9001              STR      r0,[sp,#4]
;;;238    					  t=bitmap[i+j*16];					 
00001e  0120              LSLS     r0,r4,#4
000020  1941              ADDS     r1,r0,r5
000022  980c              LDR      r0,[sp,#0x30]
000024  5c40              LDRB     r0,[r0,r1]
000026  9002              STR      r0,[sp,#8]
;;;239    					  for (k=0;k<8;k++) {
000028  2600              MOVS     r6,#0
00002a  e013              B        |L3.84|
                  |L3.44|
;;;240    					      ky=y+j*8+k;
00002c  00e1              LSLS     r1,r4,#3
00002e  9804              LDR      r0,[sp,#0x10]
000030  1808              ADDS     r0,r1,r0
000032  1980              ADDS     r0,r0,r6
000034  b2c0              UXTB     r0,r0
000036  9000              STR      r0,[sp,#0]
;;;241    					      if (t&(0x01<<k)) draw_Pixel(kx,ky,fgColor,bgColor);
000038  2001              MOVS     r0,#1
00003a  40b0              LSLS     r0,r0,r6
00003c  9902              LDR      r1,[sp,#8]
00003e  4008              ANDS     r0,r0,r1
000040  2800              CMP      r0,#0
000042  d005              BEQ      |L3.80|
000044  9b06              LDR      r3,[sp,#0x18]
000046  9a05              LDR      r2,[sp,#0x14]
000048  9900              LDR      r1,[sp,#0]
00004a  9801              LDR      r0,[sp,#4]
00004c  f7fffffe          BL       draw_Pixel
                  |L3.80|
000050  1c70              ADDS     r0,r6,#1              ;239
000052  b2c6              UXTB     r6,r0                 ;239
                  |L3.84|
000054  2e08              CMP      r6,#8                 ;239
000056  dbe9              BLT      |L3.44|
000058  1c68              ADDS     r0,r5,#1              ;236
00005a  b2c5              UXTB     r5,r0                 ;236
                  |L3.92|
00005c  2d10              CMP      r5,#0x10              ;236
00005e  dbdb              BLT      |L3.24|
000060  1c60              ADDS     r0,r4,#1              ;235
000062  b2c4              UXTB     r4,r0                 ;235
                  |L3.100|
000064  2c04              CMP      r4,#4                 ;235
000066  dbd5              BLT      |L3.20|
                  |L3.104|
;;;242    						}					 
;;;243    		     //lcdSetAddr(y/8+j,(LCD_Xmax+1-x));
;;;244    	       //lcdWriteData(bitmap[i+j*16]);
;;;245    			   //x=x++;
;;;246    		     }		 
;;;247    		 }
;;;248    }
000068  b007              ADD      sp,sp,#0x1c
00006a  bdf0              POP      {r4-r7,pc}
;;;249    
                          ENDP


                          AREA ||i.draw_Bmp16x48||, CODE, READONLY, ALIGN=1

                  draw_Bmp16x48 PROC
;;;249    
;;;250    void draw_Bmp16x48(int16_t x, int16_t y, uint16_t fgColor, uint16_t bgColor, unsigned char bitmap[])
000000  b5ff              PUSH     {r0-r7,lr}
;;;251    {
000002  b083              SUB      sp,sp,#0xc
000004  4605              MOV      r5,r0
;;;252    	uint8_t t,i,j,k,kx,ky;
;;;253    	if (x<(LCD_Xmax-15) && y<(LCD_Ymax-47)) // boundary check
000006  2d71              CMP      r5,#0x71
000008  da2f              BGE      |L4.106|
00000a  9804              LDR      r0,[sp,#0x10]
00000c  2811              CMP      r0,#0x11
00000e  da2c              BGE      |L4.106|
;;;254    	   for (j=0;j<6; j++)	{
000010  2400              MOVS     r4,#0
000012  e028              B        |L4.102|
                  |L4.20|
;;;255             k=x;			 
000014  b2ef              UXTB     r7,r5
;;;256    		     for (i=0;i<16;i++) {
000016  2600              MOVS     r6,#0
000018  e021              B        |L4.94|
                  |L4.26|
;;;257                kx=x+i;
00001a  19a8              ADDS     r0,r5,r6
00001c  b2c0              UXTB     r0,r0
00001e  9001              STR      r0,[sp,#4]
;;;258    					  t=bitmap[i+j*16];					 
000020  0120              LSLS     r0,r4,#4
000022  1981              ADDS     r1,r0,r6
000024  980c              LDR      r0,[sp,#0x30]
000026  5c40              LDRB     r0,[r0,r1]
000028  9002              STR      r0,[sp,#8]
;;;259    					  for (k=0;k<8;k++) {
00002a  2700              MOVS     r7,#0
00002c  e013              B        |L4.86|
                  |L4.46|
;;;260    					      ky=y+j*8+k;
00002e  00e1              LSLS     r1,r4,#3
000030  9804              LDR      r0,[sp,#0x10]
000032  1808              ADDS     r0,r1,r0
000034  19c0              ADDS     r0,r0,r7
000036  b2c0              UXTB     r0,r0
000038  9000              STR      r0,[sp,#0]
;;;261    					      if (t&(0x01<<k)) draw_Pixel(kx,ky,fgColor,bgColor);
00003a  2001              MOVS     r0,#1
00003c  40b8              LSLS     r0,r0,r7
00003e  9902              LDR      r1,[sp,#8]
000040  4008              ANDS     r0,r0,r1
000042  2800              CMP      r0,#0
000044  d005              BEQ      |L4.82|
000046  9b06              LDR      r3,[sp,#0x18]
000048  9a05              LDR      r2,[sp,#0x14]
00004a  9900              LDR      r1,[sp,#0]
00004c  9801              LDR      r0,[sp,#4]
00004e  f7fffffe          BL       draw_Pixel
                  |L4.82|
000052  1c78              ADDS     r0,r7,#1              ;259
000054  b2c7              UXTB     r7,r0                 ;259
                  |L4.86|
000056  2f08              CMP      r7,#8                 ;259
000058  dbe9              BLT      |L4.46|
00005a  1c70              ADDS     r0,r6,#1              ;256
00005c  b2c6              UXTB     r6,r0                 ;256
                  |L4.94|
00005e  2e10              CMP      r6,#0x10              ;256
000060  dbdb              BLT      |L4.26|
000062  1c60              ADDS     r0,r4,#1              ;254
000064  b2c4              UXTB     r4,r0                 ;254
                  |L4.102|
000066  2c06              CMP      r4,#6                 ;254
000068  dbd4              BLT      |L4.20|
                  |L4.106|
;;;262    						}						 
;;;263    		     //lcdSetAddr(y/8+j,(LCD_Xmax+1-k));
;;;264    	       //lcdWriteData(bitmap[i+j*16]);
;;;265    			   //k=k++;
;;;266    		     }		 
;;;267    		 }
;;;268    }
00006a  b007              ADD      sp,sp,#0x1c
00006c  bdf0              POP      {r4-r7,pc}
;;;269    
                          ENDP


                          AREA ||i.draw_Bmp16x64||, CODE, READONLY, ALIGN=1

                  draw_Bmp16x64 PROC
;;;269    
;;;270    void draw_Bmp16x64(int16_t x, int16_t y, uint16_t fgColor, uint16_t bgColor, unsigned char bitmap[])
000000  b5ff              PUSH     {r0-r7,lr}
;;;271    {
000002  b083              SUB      sp,sp,#0xc
000004  4605              MOV      r5,r0
;;;272    	uint8_t t,i,j,k,kx,ky;
;;;273    	if (x<(LCD_Xmax-15) && y==0) // boundary check
000006  2d71              CMP      r5,#0x71
000008  da2f              BGE      |L5.106|
00000a  9804              LDR      r0,[sp,#0x10]
00000c  2800              CMP      r0,#0
00000e  d12c              BNE      |L5.106|
;;;274    	   for (j=0;j<8; j++) {
000010  2400              MOVS     r4,#0
000012  e028              B        |L5.102|
                  |L5.20|
;;;275    				 k=x;
000014  b2ef              UXTB     r7,r5
;;;276    		     for (i=0;i<16;i++) {
000016  2600              MOVS     r6,#0
000018  e021              B        |L5.94|
                  |L5.26|
;;;277                kx=x+i;
00001a  19a8              ADDS     r0,r5,r6
00001c  b2c0              UXTB     r0,r0
00001e  9001              STR      r0,[sp,#4]
;;;278    					  t=bitmap[i+j*16];					 
000020  0120              LSLS     r0,r4,#4
000022  1981              ADDS     r1,r0,r6
000024  980c              LDR      r0,[sp,#0x30]
000026  5c40              LDRB     r0,[r0,r1]
000028  9002              STR      r0,[sp,#8]
;;;279    					  for (k=0;k<8;k++) {
00002a  2700              MOVS     r7,#0
00002c  e013              B        |L5.86|
                  |L5.46|
;;;280    					      ky=y+j*8+k;
00002e  00e1              LSLS     r1,r4,#3
000030  9804              LDR      r0,[sp,#0x10]
000032  1808              ADDS     r0,r1,r0
000034  19c0              ADDS     r0,r0,r7
000036  b2c0              UXTB     r0,r0
000038  9000              STR      r0,[sp,#0]
;;;281    					      if (t&(0x01<<k)) draw_Pixel(kx,ky,fgColor,bgColor);
00003a  2001              MOVS     r0,#1
00003c  40b8              LSLS     r0,r0,r7
00003e  9902              LDR      r1,[sp,#8]
000040  4008              ANDS     r0,r0,r1
000042  2800              CMP      r0,#0
000044  d005              BEQ      |L5.82|
000046  9b06              LDR      r3,[sp,#0x18]
000048  9a05              LDR      r2,[sp,#0x14]
00004a  9900              LDR      r1,[sp,#0]
00004c  9801              LDR      r0,[sp,#4]
00004e  f7fffffe          BL       draw_Pixel
                  |L5.82|
000052  1c78              ADDS     r0,r7,#1              ;279
000054  b2c7              UXTB     r7,r0                 ;279
                  |L5.86|
000056  2f08              CMP      r7,#8                 ;279
000058  dbe9              BLT      |L5.46|
00005a  1c70              ADDS     r0,r6,#1              ;276
00005c  b2c6              UXTB     r6,r0                 ;276
                  |L5.94|
00005e  2e10              CMP      r6,#0x10              ;276
000060  dbdb              BLT      |L5.26|
000062  1c60              ADDS     r0,r4,#1              ;274
000064  b2c4              UXTB     r4,r0                 ;274
                  |L5.102|
000066  2c08              CMP      r4,#8                 ;274
000068  dbd4              BLT      |L5.20|
                  |L5.106|
;;;282    						}						 
;;;283    		     //lcdSetAddr(y/8+j,(LCD_Xmax+1-k));
;;;284    	       //lcdWriteData(bitmap[i+j*16]);
;;;285    			   //k=k++;
;;;286    		     }
;;;287    		 }
;;;288    }
00006a  b007              ADD      sp,sp,#0x1c
00006c  bdf0              POP      {r4-r7,pc}
;;;289    
                          ENDP


                          AREA ||i.draw_Bmp16x8||, CODE, READONLY, ALIGN=1

                  draw_Bmp16x8 PROC
;;;194    
;;;195    void draw_Bmp16x8(int16_t x, int16_t y, uint16_t fgColor, uint16_t bgColor, unsigned char bitmap[])
000000  b5ff              PUSH     {r0-r7,lr}
;;;196    {
000002  b083              SUB      sp,sp,#0xc
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;197    	uint8_t t,i,k,kx,ky;
;;;198    	if (x<(LCD_Xmax-15) && y<(LCD_Ymax-7)) // boundary check
000008  2e71              CMP      r6,#0x71
00000a  da22              BGE      |L6.82|
00000c  2f39              CMP      r7,#0x39
00000e  da20              BGE      |L6.82|
;;;199    		 for (i=0;i<16;i++)
000010  2400              MOVS     r4,#0
000012  e01c              B        |L6.78|
                  |L6.20|
;;;200    	   {
;;;201    			   kx=x+i;
000014  1930              ADDS     r0,r6,r4
000016  b2c0              UXTB     r0,r0
000018  9001              STR      r0,[sp,#4]
;;;202    				 t=bitmap[i];					 
00001a  980c              LDR      r0,[sp,#0x30]
00001c  5d00              LDRB     r0,[r0,r4]
00001e  9002              STR      r0,[sp,#8]
;;;203    				 for (k=0;k<8;k++) {
000020  2500              MOVS     r5,#0
000022  e010              B        |L6.70|
                  |L6.36|
;;;204    					      ky=y+k;
000024  1978              ADDS     r0,r7,r5
000026  b2c0              UXTB     r0,r0
000028  9000              STR      r0,[sp,#0]
;;;205    					      if (t&(0x01<<k)) draw_Pixel(kx,ky,fgColor,bgColor);
00002a  2001              MOVS     r0,#1
00002c  40a8              LSLS     r0,r0,r5
00002e  9902              LDR      r1,[sp,#8]
000030  4008              ANDS     r0,r0,r1
000032  2800              CMP      r0,#0
000034  d005              BEQ      |L6.66|
000036  9b06              LDR      r3,[sp,#0x18]
000038  9a05              LDR      r2,[sp,#0x14]
00003a  9900              LDR      r1,[sp,#0]
00003c  9801              LDR      r0,[sp,#4]
00003e  f7fffffe          BL       draw_Pixel
                  |L6.66|
000042  1c68              ADDS     r0,r5,#1              ;203
000044  b2c5              UXTB     r5,r0                 ;203
                  |L6.70|
000046  2d08              CMP      r5,#8                 ;203
000048  dbec              BLT      |L6.36|
00004a  1c60              ADDS     r0,r4,#1              ;199
00004c  b2c4              UXTB     r4,r0                 ;199
                  |L6.78|
00004e  2c10              CMP      r4,#0x10              ;199
000050  dbe0              BLT      |L6.20|
                  |L6.82|
;;;206    					}
;;;207    		     //lcdSetAddr(y/8,(LCD_Xmax+1-x));
;;;208    	       //lcdWriteData(bitmap[i]);
;;;209    			   //x=x++;
;;;210    		 }
;;;211    }
000052  b007              ADD      sp,sp,#0x1c
000054  bdf0              POP      {r4-r7,pc}
;;;212    
                          ENDP


                          AREA ||i.draw_Bmp32x16||, CODE, READONLY, ALIGN=1

                  draw_Bmp32x16 PROC
;;;289    
;;;290    void draw_Bmp32x16(int16_t x, int16_t y, uint16_t fgColor, uint16_t bgColor, unsigned char bitmap[])
000000  b5ff              PUSH     {r0-r7,lr}
;;;291    {
000002  b084              SUB      sp,sp,#0x10
000004  4605              MOV      r5,r0
;;;292    	uint8_t t,i,jx,jy,k,kx,ky;
;;;293    	if (x<(LCD_Xmax-31) && y<(LCD_Ymax-15)) // boundary check
000006  2d61              CMP      r5,#0x61
000008  da40              BGE      |L7.140|
00000a  9805              LDR      r0,[sp,#0x14]
00000c  2831              CMP      r0,#0x31
00000e  da3d              BGE      |L7.140|
;;;294    		for (jy=0;jy<2;jy++)
000010  2400              MOVS     r4,#0
000012  e039              B        |L7.136|
                  |L7.20|
;;;295    	   for (jx=0;jx<2;jx++)	{
000014  2700              MOVS     r7,#0
000016  e033              B        |L7.128|
                  |L7.24|
;;;296    			   k=x;
000018  b2e8              UXTB     r0,r5
00001a  9002              STR      r0,[sp,#8]
;;;297    		     for (i=0;i<16;i++) {
00001c  2600              MOVS     r6,#0
00001e  e02b              B        |L7.120|
                  |L7.32|
;;;298                kx=x+jx*16+i;
000020  0138              LSLS     r0,r7,#4
000022  1940              ADDS     r0,r0,r5
000024  1980              ADDS     r0,r0,r6
000026  b2c0              UXTB     r0,r0
000028  9001              STR      r0,[sp,#4]
;;;299    					  t=bitmap[i+jx*16+jy*32];					 
00002a  0138              LSLS     r0,r7,#4
00002c  1980              ADDS     r0,r0,r6
00002e  0161              LSLS     r1,r4,#5
000030  1841              ADDS     r1,r0,r1
000032  980d              LDR      r0,[sp,#0x34]
000034  5c40              LDRB     r0,[r0,r1]
000036  9003              STR      r0,[sp,#0xc]
;;;300    					  for (k=0;k<8;k++) {
000038  2000              MOVS     r0,#0
00003a  9002              STR      r0,[sp,#8]
00003c  e017              B        |L7.110|
                  |L7.62|
;;;301    					      ky=y+jy*8+k;
00003e  00e1              LSLS     r1,r4,#3
000040  9805              LDR      r0,[sp,#0x14]
000042  1809              ADDS     r1,r1,r0
000044  9802              LDR      r0,[sp,#8]
000046  1808              ADDS     r0,r1,r0
000048  b2c0              UXTB     r0,r0
00004a  9000              STR      r0,[sp,#0]
;;;302    					      if (t&(0x01<<k)) draw_Pixel(kx,ky,fgColor,bgColor);
00004c  2001              MOVS     r0,#1
00004e  9902              LDR      r1,[sp,#8]
000050  4088              LSLS     r0,r0,r1
000052  9903              LDR      r1,[sp,#0xc]
000054  4008              ANDS     r0,r0,r1
000056  2800              CMP      r0,#0
000058  d005              BEQ      |L7.102|
00005a  9b07              LDR      r3,[sp,#0x1c]
00005c  9a06              LDR      r2,[sp,#0x18]
00005e  9900              LDR      r1,[sp,#0]
000060  9801              LDR      r0,[sp,#4]
000062  f7fffffe          BL       draw_Pixel
                  |L7.102|
000066  9802              LDR      r0,[sp,#8]            ;300
000068  1c40              ADDS     r0,r0,#1              ;300
00006a  b2c0              UXTB     r0,r0                 ;300
00006c  9002              STR      r0,[sp,#8]            ;300
                  |L7.110|
00006e  9802              LDR      r0,[sp,#8]            ;300
000070  2808              CMP      r0,#8                 ;300
000072  dbe4              BLT      |L7.62|
000074  1c70              ADDS     r0,r6,#1              ;297
000076  b2c6              UXTB     r6,r0                 ;297
                  |L7.120|
000078  2e10              CMP      r6,#0x10              ;297
00007a  dbd1              BLT      |L7.32|
00007c  1c78              ADDS     r0,r7,#1              ;295
00007e  b2c7              UXTB     r7,r0                 ;295
                  |L7.128|
000080  2f02              CMP      r7,#2                 ;295
000082  dbc9              BLT      |L7.24|
000084  1c60              ADDS     r0,r4,#1              ;294
000086  b2c4              UXTB     r4,r0                 ;294
                  |L7.136|
000088  2c02              CMP      r4,#2                 ;294
00008a  dbc3              BLT      |L7.20|
                  |L7.140|
;;;303    						}						 
;;;304    		     //lcdSetAddr(y/8+jy,(LCD_Xmax+1-k)-jx*16);
;;;305    	       //lcdWriteData(bitmap[i+jx*16+jy*32]);
;;;306    			   //k=k++;
;;;307    		     }
;;;308    			}
;;;309    }
00008c  b008              ADD      sp,sp,#0x20
00008e  bdf0              POP      {r4-r7,pc}
;;;310    
                          ENDP


                          AREA ||i.draw_Bmp32x32||, CODE, READONLY, ALIGN=1

                  draw_Bmp32x32 PROC
;;;310    
;;;311    void draw_Bmp32x32(int16_t x, int16_t y, uint16_t fgColor, uint16_t bgColor, unsigned char bitmap[])
000000  b5ff              PUSH     {r0-r7,lr}
;;;312    {
000002  b084              SUB      sp,sp,#0x10
000004  4605              MOV      r5,r0
;;;313    	uint8_t t,i,jx,jy,k, kx,ky;
;;;314    	if (x<(LCD_Xmax-31) && y<(LCD_Ymax-31)) // boundary check
000006  2d61              CMP      r5,#0x61
000008  da40              BGE      |L8.140|
00000a  9805              LDR      r0,[sp,#0x14]
00000c  2821              CMP      r0,#0x21
00000e  da3d              BGE      |L8.140|
;;;315    		for (jy=0;jy<4;jy++)
000010  2400              MOVS     r4,#0
000012  e039              B        |L8.136|
                  |L8.20|
;;;316    	   for (jx=0;jx<2;jx++)	{
000014  2700              MOVS     r7,#0
000016  e033              B        |L8.128|
                  |L8.24|
;;;317    			   k=x;
000018  b2e8              UXTB     r0,r5
00001a  9002              STR      r0,[sp,#8]
;;;318    		     for (i=0;i<16;i++) {
00001c  2600              MOVS     r6,#0
00001e  e02b              B        |L8.120|
                  |L8.32|
;;;319                kx=x+jx*16+i;
000020  0138              LSLS     r0,r7,#4
000022  1940              ADDS     r0,r0,r5
000024  1980              ADDS     r0,r0,r6
000026  b2c0              UXTB     r0,r0
000028  9001              STR      r0,[sp,#4]
;;;320    					  t=bitmap[i+jx*16+jy*32];					 
00002a  0138              LSLS     r0,r7,#4
00002c  1980              ADDS     r0,r0,r6
00002e  0161              LSLS     r1,r4,#5
000030  1841              ADDS     r1,r0,r1
000032  980d              LDR      r0,[sp,#0x34]
000034  5c40              LDRB     r0,[r0,r1]
000036  9003              STR      r0,[sp,#0xc]
;;;321    					  for (k=0;k<8;k++) {
000038  2000              MOVS     r0,#0
00003a  9002              STR      r0,[sp,#8]
00003c  e017              B        |L8.110|
                  |L8.62|
;;;322    					      ky=y+jy*8+k;
00003e  00e1              LSLS     r1,r4,#3
000040  9805              LDR      r0,[sp,#0x14]
000042  1809              ADDS     r1,r1,r0
000044  9802              LDR      r0,[sp,#8]
000046  1808              ADDS     r0,r1,r0
000048  b2c0              UXTB     r0,r0
00004a  9000              STR      r0,[sp,#0]
;;;323    					      if (t&(0x01<<k)) draw_Pixel(kx,ky,fgColor,bgColor);
00004c  2001              MOVS     r0,#1
00004e  9902              LDR      r1,[sp,#8]
000050  4088              LSLS     r0,r0,r1
000052  9903              LDR      r1,[sp,#0xc]
000054  4008              ANDS     r0,r0,r1
000056  2800              CMP      r0,#0
000058  d005              BEQ      |L8.102|
00005a  9b07              LDR      r3,[sp,#0x1c]
00005c  9a06              LDR      r2,[sp,#0x18]
00005e  9900              LDR      r1,[sp,#0]
000060  9801              LDR      r0,[sp,#4]
000062  f7fffffe          BL       draw_Pixel
                  |L8.102|
000066  9802              LDR      r0,[sp,#8]            ;321
000068  1c40              ADDS     r0,r0,#1              ;321
00006a  b2c0              UXTB     r0,r0                 ;321
00006c  9002              STR      r0,[sp,#8]            ;321
                  |L8.110|
00006e  9802              LDR      r0,[sp,#8]            ;321
000070  2808              CMP      r0,#8                 ;321
000072  dbe4              BLT      |L8.62|
000074  1c70              ADDS     r0,r6,#1              ;318
000076  b2c6              UXTB     r6,r0                 ;318
                  |L8.120|
000078  2e10              CMP      r6,#0x10              ;318
00007a  dbd1              BLT      |L8.32|
00007c  1c78              ADDS     r0,r7,#1              ;316
00007e  b2c7              UXTB     r7,r0                 ;316
                  |L8.128|
000080  2f02              CMP      r7,#2                 ;316
000082  dbc9              BLT      |L8.24|
000084  1c60              ADDS     r0,r4,#1              ;315
000086  b2c4              UXTB     r4,r0                 ;315
                  |L8.136|
000088  2c04              CMP      r4,#4                 ;315
00008a  dbc3              BLT      |L8.20|
                  |L8.140|
;;;324    						}						 
;;;325    		     //lcdSetAddr(y/8+jy,(LCD_Xmax+1-k)-jx*16);
;;;326    	       //lcdWriteData(bitmap[i+jx*16+jy*32]);
;;;327    			   //k=k++;
;;;328    		     }
;;;329    			}
;;;330    }
00008c  b008              ADD      sp,sp,#0x20
00008e  bdf0              POP      {r4-r7,pc}
;;;331    
                          ENDP


                          AREA ||i.draw_Bmp32x48||, CODE, READONLY, ALIGN=1

                  draw_Bmp32x48 PROC
;;;331    
;;;332    void draw_Bmp32x48(int16_t x, int16_t y, uint16_t fgColor, uint16_t bgColor, unsigned char bitmap[])
000000  b5ff              PUSH     {r0-r7,lr}
;;;333    {
000002  b084              SUB      sp,sp,#0x10
000004  4605              MOV      r5,r0
;;;334    	uint8_t t,i,jx,jy,k, kx,ky;
;;;335    	if (x<(LCD_Xmax-31) && y<(LCD_Ymax-47)) // boundary check
000006  2d61              CMP      r5,#0x61
000008  da40              BGE      |L9.140|
00000a  9805              LDR      r0,[sp,#0x14]
00000c  2811              CMP      r0,#0x11
00000e  da3d              BGE      |L9.140|
;;;336    		for (jy=0;jy<6;jy++)
000010  2400              MOVS     r4,#0
000012  e039              B        |L9.136|
                  |L9.20|
;;;337    	   for (jx=0;jx<2;jx++)	{
000014  2700              MOVS     r7,#0
000016  e033              B        |L9.128|
                  |L9.24|
;;;338    			   k=x;
000018  b2e8              UXTB     r0,r5
00001a  9002              STR      r0,[sp,#8]
;;;339    		     for (i=0;i<16;i++) {
00001c  2600              MOVS     r6,#0
00001e  e02b              B        |L9.120|
                  |L9.32|
;;;340    					  kx=x+jx*16+i;
000020  0138              LSLS     r0,r7,#4
000022  1940              ADDS     r0,r0,r5
000024  1980              ADDS     r0,r0,r6
000026  b2c0              UXTB     r0,r0
000028  9001              STR      r0,[sp,#4]
;;;341    					  t=bitmap[i+jx*16+jy*32];					 
00002a  0138              LSLS     r0,r7,#4
00002c  1980              ADDS     r0,r0,r6
00002e  0161              LSLS     r1,r4,#5
000030  1841              ADDS     r1,r0,r1
000032  980d              LDR      r0,[sp,#0x34]
000034  5c40              LDRB     r0,[r0,r1]
000036  9003              STR      r0,[sp,#0xc]
;;;342    					  for (k=0;k<8;k++) {
000038  2000              MOVS     r0,#0
00003a  9002              STR      r0,[sp,#8]
00003c  e017              B        |L9.110|
                  |L9.62|
;;;343    					      ky=y+jy*8+k;
00003e  00e1              LSLS     r1,r4,#3
000040  9805              LDR      r0,[sp,#0x14]
000042  1809              ADDS     r1,r1,r0
000044  9802              LDR      r0,[sp,#8]
000046  1808              ADDS     r0,r1,r0
000048  b2c0              UXTB     r0,r0
00004a  9000              STR      r0,[sp,#0]
;;;344    					      if (t&(0x01<<k)) draw_Pixel(kx,ky,fgColor,bgColor);
00004c  2001              MOVS     r0,#1
00004e  9902              LDR      r1,[sp,#8]
000050  4088              LSLS     r0,r0,r1
000052  9903              LDR      r1,[sp,#0xc]
000054  4008              ANDS     r0,r0,r1
000056  2800              CMP      r0,#0
000058  d005              BEQ      |L9.102|
00005a  9b07              LDR      r3,[sp,#0x1c]
00005c  9a06              LDR      r2,[sp,#0x18]
00005e  9900              LDR      r1,[sp,#0]
000060  9801              LDR      r0,[sp,#4]
000062  f7fffffe          BL       draw_Pixel
                  |L9.102|
000066  9802              LDR      r0,[sp,#8]            ;342
000068  1c40              ADDS     r0,r0,#1              ;342
00006a  b2c0              UXTB     r0,r0                 ;342
00006c  9002              STR      r0,[sp,#8]            ;342
                  |L9.110|
00006e  9802              LDR      r0,[sp,#8]            ;342
000070  2808              CMP      r0,#8                 ;342
000072  dbe4              BLT      |L9.62|
000074  1c70              ADDS     r0,r6,#1              ;339
000076  b2c6              UXTB     r6,r0                 ;339
                  |L9.120|
000078  2e10              CMP      r6,#0x10              ;339
00007a  dbd1              BLT      |L9.32|
00007c  1c78              ADDS     r0,r7,#1              ;337
00007e  b2c7              UXTB     r7,r0                 ;337
                  |L9.128|
000080  2f02              CMP      r7,#2                 ;337
000082  dbc9              BLT      |L9.24|
000084  1c60              ADDS     r0,r4,#1              ;336
000086  b2c4              UXTB     r4,r0                 ;336
                  |L9.136|
000088  2c06              CMP      r4,#6                 ;336
00008a  dbc3              BLT      |L9.20|
                  |L9.140|
;;;345    						}	
;;;346    		     //lcdSetAddr(y/8+jy,(LCD_Xmax+1-k)-jx*16);
;;;347    	       //lcdWriteData(bitmap[i+jx*16+jy*32]);
;;;348    			   //k=k++;
;;;349    		     }		 
;;;350    		 }
;;;351    }
00008c  b008              ADD      sp,sp,#0x20
00008e  bdf0              POP      {r4-r7,pc}
;;;352    
                          ENDP


                          AREA ||i.draw_Bmp32x64||, CODE, READONLY, ALIGN=1

                  draw_Bmp32x64 PROC
;;;352    
;;;353    void draw_Bmp32x64(int16_t x, int16_t y, uint16_t fgColor, uint16_t bgColor, unsigned char bitmap[])
000000  b5ff              PUSH     {r0-r7,lr}
;;;354    {
000002  b084              SUB      sp,sp,#0x10
000004  4605              MOV      r5,r0
;;;355    	uint8_t t,i,jx,jy,k, kx,ky;
;;;356    	if (x<(LCD_Xmax-31) && y==0) // boundary check
000006  2d61              CMP      r5,#0x61
000008  da40              BGE      |L10.140|
00000a  9805              LDR      r0,[sp,#0x14]
00000c  2800              CMP      r0,#0
00000e  d13d              BNE      |L10.140|
;;;357    		for (jy=0;jy<8;jy++)
000010  2400              MOVS     r4,#0
000012  e039              B        |L10.136|
                  |L10.20|
;;;358    	   for (jx=0;jx<2;jx++)	{
000014  2700              MOVS     r7,#0
000016  e033              B        |L10.128|
                  |L10.24|
;;;359    			   k=x;
000018  b2e8              UXTB     r0,r5
00001a  9002              STR      r0,[sp,#8]
;;;360    		     for (i=0;i<16;i++) {
00001c  2600              MOVS     r6,#0
00001e  e02b              B        |L10.120|
                  |L10.32|
;;;361    					  kx=x+jx*16+i;
000020  0138              LSLS     r0,r7,#4
000022  1940              ADDS     r0,r0,r5
000024  1980              ADDS     r0,r0,r6
000026  b2c0              UXTB     r0,r0
000028  9001              STR      r0,[sp,#4]
;;;362    					  t=bitmap[i+jx*16+jy*32];					 
00002a  0138              LSLS     r0,r7,#4
00002c  1980              ADDS     r0,r0,r6
00002e  0161              LSLS     r1,r4,#5
000030  1841              ADDS     r1,r0,r1
000032  980d              LDR      r0,[sp,#0x34]
000034  5c40              LDRB     r0,[r0,r1]
000036  9003              STR      r0,[sp,#0xc]
;;;363    					  for (k=0;k<8;k++) {
000038  2000              MOVS     r0,#0
00003a  9002              STR      r0,[sp,#8]
00003c  e017              B        |L10.110|
                  |L10.62|
;;;364    					      ky=y+jy*8+k;
00003e  00e1              LSLS     r1,r4,#3
000040  9805              LDR      r0,[sp,#0x14]
000042  1809              ADDS     r1,r1,r0
000044  9802              LDR      r0,[sp,#8]
000046  1808              ADDS     r0,r1,r0
000048  b2c0              UXTB     r0,r0
00004a  9000              STR      r0,[sp,#0]
;;;365    					      if (t&(0x01<<k)) draw_Pixel(kx,ky,fgColor,bgColor);
00004c  2001              MOVS     r0,#1
00004e  9902              LDR      r1,[sp,#8]
000050  4088              LSLS     r0,r0,r1
000052  9903              LDR      r1,[sp,#0xc]
000054  4008              ANDS     r0,r0,r1
000056  2800              CMP      r0,#0
000058  d005              BEQ      |L10.102|
00005a  9b07              LDR      r3,[sp,#0x1c]
00005c  9a06              LDR      r2,[sp,#0x18]
00005e  9900              LDR      r1,[sp,#0]
000060  9801              LDR      r0,[sp,#4]
000062  f7fffffe          BL       draw_Pixel
                  |L10.102|
000066  9802              LDR      r0,[sp,#8]            ;363
000068  1c40              ADDS     r0,r0,#1              ;363
00006a  b2c0              UXTB     r0,r0                 ;363
00006c  9002              STR      r0,[sp,#8]            ;363
                  |L10.110|
00006e  9802              LDR      r0,[sp,#8]            ;363
000070  2808              CMP      r0,#8                 ;363
000072  dbe4              BLT      |L10.62|
000074  1c70              ADDS     r0,r6,#1              ;360
000076  b2c6              UXTB     r6,r0                 ;360
                  |L10.120|
000078  2e10              CMP      r6,#0x10              ;360
00007a  dbd1              BLT      |L10.32|
00007c  1c78              ADDS     r0,r7,#1              ;358
00007e  b2c7              UXTB     r7,r0                 ;358
                  |L10.128|
000080  2f02              CMP      r7,#2                 ;358
000082  dbc9              BLT      |L10.24|
000084  1c60              ADDS     r0,r4,#1              ;357
000086  b2c4              UXTB     r4,r0                 ;357
                  |L10.136|
000088  2c08              CMP      r4,#8                 ;357
00008a  dbc3              BLT      |L10.20|
                  |L10.140|
;;;366    						}						 
;;;367    		     //lcdSetAddr(y/8+jy,(LCD_Xmax+1-k)-jx*16);
;;;368    	       //lcdWriteData(bitmap[i+jx*16+jy*32]);
;;;369    			   //k=k++;
;;;370    		     }
;;;371    			}				 
;;;372    }
00008c  b008              ADD      sp,sp,#0x20
00008e  bdf0              POP      {r4-r7,pc}
;;;373    
                          ENDP


                          AREA ||i.draw_Bmp64x64||, CODE, READONLY, ALIGN=1

                  draw_Bmp64x64 PROC
;;;373    
;;;374    void draw_Bmp64x64(int16_t x, int16_t y, uint16_t fgColor, uint16_t bgColor, unsigned char bitmap[])
000000  b5ff              PUSH     {r0-r7,lr}
;;;375    {
000002  b084              SUB      sp,sp,#0x10
000004  4605              MOV      r5,r0
;;;376    	uint8_t t, i,jx,jy,k, kx,ky;
;;;377    	if (x<(LCD_Xmax-63) && y==0) // boundary check
000006  2d41              CMP      r5,#0x41
000008  da40              BGE      |L11.140|
00000a  9805              LDR      r0,[sp,#0x14]
00000c  2800              CMP      r0,#0
00000e  d13d              BNE      |L11.140|
;;;378    		for (jy=0;jy<8;jy++)
000010  2400              MOVS     r4,#0
000012  e039              B        |L11.136|
                  |L11.20|
;;;379    	   for (jx=0;jx<4;jx++)	{
000014  2700              MOVS     r7,#0
000016  e033              B        |L11.128|
                  |L11.24|
;;;380    	       k=x;
000018  b2e8              UXTB     r0,r5
00001a  9002              STR      r0,[sp,#8]
;;;381    		     for (i=0;i<16;i++) {
00001c  2600              MOVS     r6,#0
00001e  e02b              B        |L11.120|
                  |L11.32|
;;;382    					  kx=x+jx*16+i;
000020  0138              LSLS     r0,r7,#4
000022  1940              ADDS     r0,r0,r5
000024  1980              ADDS     r0,r0,r6
000026  b2c0              UXTB     r0,r0
000028  9001              STR      r0,[sp,#4]
;;;383    					  t=bitmap[i+jx*16+jy*64];					 
00002a  0138              LSLS     r0,r7,#4
00002c  1980              ADDS     r0,r0,r6
00002e  01a1              LSLS     r1,r4,#6
000030  1841              ADDS     r1,r0,r1
000032  980d              LDR      r0,[sp,#0x34]
000034  5c40              LDRB     r0,[r0,r1]
000036  9003              STR      r0,[sp,#0xc]
;;;384    					  for (k=0;k<8;k++) {
000038  2000              MOVS     r0,#0
00003a  9002              STR      r0,[sp,#8]
00003c  e017              B        |L11.110|
                  |L11.62|
;;;385    					      ky=y+jy*8+k;
00003e  00e1              LSLS     r1,r4,#3
000040  9805              LDR      r0,[sp,#0x14]
000042  1809              ADDS     r1,r1,r0
000044  9802              LDR      r0,[sp,#8]
000046  1808              ADDS     r0,r1,r0
000048  b2c0              UXTB     r0,r0
00004a  9000              STR      r0,[sp,#0]
;;;386    					      if (t&(0x01<<k)) draw_Pixel(kx,ky,fgColor,bgColor);
00004c  2001              MOVS     r0,#1
00004e  9902              LDR      r1,[sp,#8]
000050  4088              LSLS     r0,r0,r1
000052  9903              LDR      r1,[sp,#0xc]
000054  4008              ANDS     r0,r0,r1
000056  2800              CMP      r0,#0
000058  d005              BEQ      |L11.102|
00005a  9b07              LDR      r3,[sp,#0x1c]
00005c  9a06              LDR      r2,[sp,#0x18]
00005e  9900              LDR      r1,[sp,#0]
000060  9801              LDR      r0,[sp,#4]
000062  f7fffffe          BL       draw_Pixel
                  |L11.102|
000066  9802              LDR      r0,[sp,#8]            ;384
000068  1c40              ADDS     r0,r0,#1              ;384
00006a  b2c0              UXTB     r0,r0                 ;384
00006c  9002              STR      r0,[sp,#8]            ;384
                  |L11.110|
00006e  9802              LDR      r0,[sp,#8]            ;384
000070  2808              CMP      r0,#8                 ;384
000072  dbe4              BLT      |L11.62|
000074  1c70              ADDS     r0,r6,#1              ;381
000076  b2c6              UXTB     r6,r0                 ;381
                  |L11.120|
000078  2e10              CMP      r6,#0x10              ;381
00007a  dbd1              BLT      |L11.32|
00007c  1c78              ADDS     r0,r7,#1              ;379
00007e  b2c7              UXTB     r7,r0                 ;379
                  |L11.128|
000080  2f04              CMP      r7,#4                 ;379
000082  dbc9              BLT      |L11.24|
000084  1c60              ADDS     r0,r4,#1              ;378
000086  b2c4              UXTB     r4,r0                 ;378
                  |L11.136|
000088  2c08              CMP      r4,#8                 ;378
00008a  dbc3              BLT      |L11.20|
                  |L11.140|
;;;387    						}					 
;;;388    		     //lcdSetAddr(y/8+jy,(LCD_Xmax+1-k)-jx*16);
;;;389    	       //lcdWriteData(bitmap[i+jx*16+jy*64]);
;;;390    			   //k=k++;
;;;391    		     }
;;;392    			}
;;;393    }
00008c  b008              ADD      sp,sp,#0x20
00008e  bdf0              POP      {r4-r7,pc}
;;;394    
                          ENDP


                          AREA ||i.draw_Bmp8x16||, CODE, READONLY, ALIGN=1

                  draw_Bmp8x16 PROC
;;;173    
;;;174    void draw_Bmp8x16(int16_t x, int16_t y, uint16_t fgColor, uint16_t bgColor, unsigned char bitmap[])
000000  b5ff              PUSH     {r0-r7,lr}
;;;175    {
000002  b083              SUB      sp,sp,#0xc
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
;;;176    	uint8_t t,i,k, kx,ky;
;;;177    	if (x<(LCD_Xmax-7) && y<(LCD_Ymax-7)) // boundary check		
000008  2f79              CMP      r7,#0x79
00000a  da3d              BGE      |L12.136|
00000c  2e39              CMP      r6,#0x39
00000e  da3b              BGE      |L12.136|
;;;178    		 for (i=0;i<8;i++){
000010  2500              MOVS     r5,#0
000012  e037              B        |L12.132|
                  |L12.20|
;;;179    			   kx=x+i;
000014  1978              ADDS     r0,r7,r5
000016  b2c0              UXTB     r0,r0
000018  9001              STR      r0,[sp,#4]
;;;180    				 t=bitmap[i];					 
00001a  980c              LDR      r0,[sp,#0x30]
00001c  5d40              LDRB     r0,[r0,r5]
00001e  9002              STR      r0,[sp,#8]
;;;181    				 for (k=0;k<8;k++) {
000020  2400              MOVS     r4,#0
000022  e010              B        |L12.70|
                  |L12.36|
;;;182    					      ky=y+k;
000024  1930              ADDS     r0,r6,r4
000026  b2c0              UXTB     r0,r0
000028  9000              STR      r0,[sp,#0]
;;;183    					      if (t&(0x01<<k)) draw_Pixel(kx,ky,fgColor,bgColor);
00002a  2001              MOVS     r0,#1
00002c  40a0              LSLS     r0,r0,r4
00002e  9902              LDR      r1,[sp,#8]
000030  4008              ANDS     r0,r0,r1
000032  2800              CMP      r0,#0
000034  d005              BEQ      |L12.66|
000036  9b06              LDR      r3,[sp,#0x18]
000038  9a05              LDR      r2,[sp,#0x14]
00003a  9900              LDR      r1,[sp,#0]
00003c  9801              LDR      r0,[sp,#4]
00003e  f7fffffe          BL       draw_Pixel
                  |L12.66|
000042  1c60              ADDS     r0,r4,#1              ;181
000044  b2c4              UXTB     r4,r0                 ;181
                  |L12.70|
000046  2c08              CMP      r4,#8                 ;181
000048  dbec              BLT      |L12.36|
;;;184    				}
;;;185    				 t=bitmap[i+8];					 
00004a  4629              MOV      r1,r5
00004c  3108              ADDS     r1,r1,#8
00004e  980c              LDR      r0,[sp,#0x30]
000050  5c40              LDRB     r0,[r0,r1]
000052  9002              STR      r0,[sp,#8]
;;;186    				 for (k=0;k<8;k++) {
000054  2400              MOVS     r4,#0
000056  e011              B        |L12.124|
                  |L12.88|
;;;187    					      ky=y+k+8;
000058  1930              ADDS     r0,r6,r4
00005a  3008              ADDS     r0,r0,#8
00005c  b2c0              UXTB     r0,r0
00005e  9000              STR      r0,[sp,#0]
;;;188    					      if (t&(0x01<<k)) draw_Pixel(kx,ky,fgColor,bgColor);
000060  2001              MOVS     r0,#1
000062  40a0              LSLS     r0,r0,r4
000064  9902              LDR      r1,[sp,#8]
000066  4008              ANDS     r0,r0,r1
000068  2800              CMP      r0,#0
00006a  d005              BEQ      |L12.120|
00006c  9b06              LDR      r3,[sp,#0x18]
00006e  9a05              LDR      r2,[sp,#0x14]
000070  9900              LDR      r1,[sp,#0]
000072  9801              LDR      r0,[sp,#4]
000074  f7fffffe          BL       draw_Pixel
                  |L12.120|
000078  1c60              ADDS     r0,r4,#1              ;186
00007a  b2c4              UXTB     r4,r0                 ;186
                  |L12.124|
00007c  2c08              CMP      r4,#8                 ;186
00007e  dbeb              BLT      |L12.88|
000080  1c68              ADDS     r0,r5,#1              ;178
000082  b2c5              UXTB     r5,r0                 ;178
                  |L12.132|
000084  2d08              CMP      r5,#8                 ;178
000086  dbc5              BLT      |L12.20|
                  |L12.136|
;;;189    				}				 
;;;190    		     //lcdSetAddr(y/8,(LCD_Xmax+1-x));
;;;191    	       //lcdWriteData(bitmap[i]);
;;;192    		 }
;;;193    }
000088  b007              ADD      sp,sp,#0x1c
00008a  bdf0              POP      {r4-r7,pc}
;;;194    
                          ENDP


                          AREA ||i.draw_Bmp8x8||, CODE, READONLY, ALIGN=1

                  draw_Bmp8x8 PROC
;;;157    
;;;158    void draw_Bmp8x8(int16_t x, int16_t y, uint16_t fgColor, uint16_t bgColor, unsigned char bitmap[])
000000  b5ff              PUSH     {r0-r7,lr}
;;;159    {
000002  b083              SUB      sp,sp,#0xc
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;160    	uint8_t t,i,k, kx,ky;
;;;161    	if (x<(LCD_Xmax-7) && y<(LCD_Ymax-7)) // boundary check		
000008  2e79              CMP      r6,#0x79
00000a  da22              BGE      |L13.82|
00000c  2f39              CMP      r7,#0x39
00000e  da20              BGE      |L13.82|
;;;162    		 for (i=0;i<8;i++){
000010  2400              MOVS     r4,#0
000012  e01c              B        |L13.78|
                  |L13.20|
;;;163    			   kx=x+i;
000014  1930              ADDS     r0,r6,r4
000016  b2c0              UXTB     r0,r0
000018  9001              STR      r0,[sp,#4]
;;;164    				 t=bitmap[i];					 
00001a  980c              LDR      r0,[sp,#0x30]
00001c  5d00              LDRB     r0,[r0,r4]
00001e  9002              STR      r0,[sp,#8]
;;;165    				 for (k=0;k<8;k++) {
000020  2500              MOVS     r5,#0
000022  e010              B        |L13.70|
                  |L13.36|
;;;166    					      ky=y+k;
000024  1978              ADDS     r0,r7,r5
000026  b2c0              UXTB     r0,r0
000028  9000              STR      r0,[sp,#0]
;;;167    					      if (t&(0x01<<k)) draw_Pixel(kx,ky,fgColor,bgColor);
00002a  2001              MOVS     r0,#1
00002c  40a8              LSLS     r0,r0,r5
00002e  9902              LDR      r1,[sp,#8]
000030  4008              ANDS     r0,r0,r1
000032  2800              CMP      r0,#0
000034  d005              BEQ      |L13.66|
000036  9b06              LDR      r3,[sp,#0x18]
000038  9a05              LDR      r2,[sp,#0x14]
00003a  9900              LDR      r1,[sp,#0]
00003c  9801              LDR      r0,[sp,#4]
00003e  f7fffffe          BL       draw_Pixel
                  |L13.66|
000042  1c68              ADDS     r0,r5,#1              ;165
000044  b2c5              UXTB     r5,r0                 ;165
                  |L13.70|
000046  2d08              CMP      r5,#8                 ;165
000048  dbec              BLT      |L13.36|
00004a  1c60              ADDS     r0,r4,#1              ;162
00004c  b2c4              UXTB     r4,r0                 ;162
                  |L13.78|
00004e  2c08              CMP      r4,#8                 ;162
000050  dbe0              BLT      |L13.20|
                  |L13.82|
;;;168    				}
;;;169    		     //lcdSetAddr(y/8,(LCD_Xmax+1-x));
;;;170    	       //lcdWriteData(bitmap[i]);
;;;171    		 }
;;;172    }
000052  b007              ADD      sp,sp,#0x1c
000054  bdf0              POP      {r4-r7,pc}
;;;173    
                          ENDP


                          AREA ||i.draw_LCD||, CODE, READONLY, ALIGN=1

                  draw_LCD PROC
;;;405    
;;;406    void draw_LCD(unsigned char *buffer)
000000  b570              PUSH     {r4-r6,lr}
;;;407    {
000002  4606              MOV      r6,r0
;;;408      uint8_t x,y;
;;;409    	for (x=0; x<LCD_Xmax; x++) {
000004  2400              MOVS     r4,#0
000006  e012              B        |L14.46|
                  |L14.8|
;;;410        	for (y=0; y<(LCD_Ymax/8); y++) {
000008  2500              MOVS     r5,#0
00000a  e00c              B        |L14.38|
                  |L14.12|
;;;411    			   lcdSetAddr(y,(LCD_Xmax+1-x));				
00000c  2081              MOVS     r0,#0x81
00000e  1b00              SUBS     r0,r0,r4
000010  b2c1              UXTB     r1,r0
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       lcdSetAddr
;;;412    			   lcdWriteData(buffer[x+y*LCD_Xmax]);
000018  01e9              LSLS     r1,r5,#7
00001a  1909              ADDS     r1,r1,r4
00001c  5c70              LDRB     r0,[r6,r1]
00001e  f7fffffe          BL       lcdWriteData
000022  1c68              ADDS     r0,r5,#1              ;410
000024  b2c5              UXTB     r5,r0                 ;410
                  |L14.38|
000026  2d08              CMP      r5,#8                 ;410
000028  dbf0              BLT      |L14.12|
00002a  1c60              ADDS     r0,r4,#1              ;409
00002c  b2c4              UXTB     r4,r0                 ;409
                  |L14.46|
00002e  2c80              CMP      r4,#0x80              ;409
000030  dbea              BLT      |L14.8|
;;;413    			}
;;;414    		}			
;;;415    }
000032  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||i.draw_Pixel||, CODE, READONLY, ALIGN=2

                  draw_Pixel PROC
;;;394    
;;;395    void draw_Pixel(int16_t x, int16_t y, uint16_t fgColor, uint16_t bgColor)
000000  b5f0              PUSH     {r4-r7,lr}
;;;396    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;397    	if (fgColor!=0) 
000008  2e00              CMP      r6,#0
00000a  d01c              BEQ      |L15.70|
;;;398    		DisplayBuffer[x+y/8*LCD_Xmax] |= (0x01<<(y%8));
00000c  4620              MOV      r0,r4
00000e  17e2              ASRS     r2,r4,#31
000010  0f52              LSRS     r2,r2,#29
000012  1812              ADDS     r2,r2,r0
000014  10d2              ASRS     r2,r2,#3
000016  01d2              LSLS     r2,r2,#7
000018  1952              ADDS     r2,r2,r5
00001a  4b24              LDR      r3,|L15.172|
00001c  5c9a              LDRB     r2,[r3,r2]
00001e  4621              MOV      r1,r4
000020  17e3              ASRS     r3,r4,#31
000022  0f5b              LSRS     r3,r3,#29
000024  185b              ADDS     r3,r3,r1
000026  10db              ASRS     r3,r3,#3
000028  00db              LSLS     r3,r3,#3
00002a  1ae7              SUBS     r7,r4,r3
00002c  2301              MOVS     r3,#1
00002e  40bb              LSLS     r3,r3,r7
000030  431a              ORRS     r2,r2,r3
000032  4620              MOV      r0,r4
000034  17e3              ASRS     r3,r4,#31
000036  0f5b              LSRS     r3,r3,#29
000038  181b              ADDS     r3,r3,r0
00003a  10db              ASRS     r3,r3,#3
00003c  01db              LSLS     r3,r3,#7
00003e  195b              ADDS     r3,r3,r5
000040  4f1a              LDR      r7,|L15.172|
000042  54fa              STRB     r2,[r7,r3]
000044  e01a              B        |L15.124|
                  |L15.70|
;;;399    	else 
;;;400    		DisplayBuffer[x+y/8*LCD_Xmax] &= (0xFE<<(y%8));
000046  4620              MOV      r0,r4
000048  17e2              ASRS     r2,r4,#31
00004a  0f52              LSRS     r2,r2,#29
00004c  1812              ADDS     r2,r2,r0
00004e  10d2              ASRS     r2,r2,#3
000050  01d2              LSLS     r2,r2,#7
000052  1952              ADDS     r2,r2,r5
000054  4b15              LDR      r3,|L15.172|
000056  5c9a              LDRB     r2,[r3,r2]
000058  4621              MOV      r1,r4
00005a  17e3              ASRS     r3,r4,#31
00005c  0f5b              LSRS     r3,r3,#29
00005e  185b              ADDS     r3,r3,r1
000060  10db              ASRS     r3,r3,#3
000062  00db              LSLS     r3,r3,#3
000064  1ae7              SUBS     r7,r4,r3
000066  23fe              MOVS     r3,#0xfe
000068  40bb              LSLS     r3,r3,r7
00006a  401a              ANDS     r2,r2,r3
00006c  17e3              ASRS     r3,r4,#31
00006e  0f5b              LSRS     r3,r3,#29
000070  181b              ADDS     r3,r3,r0
000072  10db              ASRS     r3,r3,#3
000074  01db              LSLS     r3,r3,#7
000076  195b              ADDS     r3,r3,r5
000078  4f0c              LDR      r7,|L15.172|
00007a  54fa              STRB     r2,[r7,r3]
                  |L15.124|
;;;401    
;;;402    	lcdSetAddr(y/8,(LCD_Xmax+1-x));
00007c  4627              MOV      r7,r4
00007e  17e2              ASRS     r2,r4,#31
000080  0f52              LSRS     r2,r2,#29
000082  19d2              ADDS     r2,r2,r7
000084  0552              LSLS     r2,r2,#21
000086  0e10              LSRS     r0,r2,#24
000088  2281              MOVS     r2,#0x81
00008a  1b52              SUBS     r2,r2,r5
00008c  b2d1              UXTB     r1,r2
00008e  f7fffffe          BL       lcdSetAddr
;;;403    	lcdWriteData(DisplayBuffer[x+y/8*LCD_Xmax]);
000092  4623              MOV      r3,r4
000094  17e1              ASRS     r1,r4,#31
000096  0f49              LSRS     r1,r1,#29
000098  18c9              ADDS     r1,r1,r3
00009a  10c9              ASRS     r1,r1,#3
00009c  01c9              LSLS     r1,r1,#7
00009e  1949              ADDS     r1,r1,r5
0000a0  4a02              LDR      r2,|L15.172|
0000a2  5c50              LDRB     r0,[r2,r1]
0000a4  f7fffffe          BL       lcdWriteData
;;;404    }
0000a8  bdf0              POP      {r4-r7,pc}
;;;405    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L15.172|
                          DCD      DisplayBuffer

                          AREA ||i.init_LCD||, CODE, READONLY, ALIGN=1

                  init_LCD PROC
;;;77     
;;;78     void init_LCD(void)
000000  b510              PUSH     {r4,lr}
;;;79     {
;;;80     	init_SPI3();
000002  f7fffffe          BL       init_SPI3
;;;81     	lcdWriteCommand(0xEB); 
000006  20eb              MOVS     r0,#0xeb
000008  f7fffffe          BL       lcdWriteCommand
;;;82     	lcdWriteCommand(0x81); 
00000c  2081              MOVS     r0,#0x81
00000e  f7fffffe          BL       lcdWriteCommand
;;;83     	lcdWriteCommand(0xA0);  
000012  20a0              MOVS     r0,#0xa0
000014  f7fffffe          BL       lcdWriteCommand
;;;84     	lcdWriteCommand(0xC0);  
000018  20c0              MOVS     r0,#0xc0
00001a  f7fffffe          BL       lcdWriteCommand
;;;85     	lcdWriteCommand(0xAF); // Set Display Enable 
00001e  20af              MOVS     r0,#0xaf
000020  f7fffffe          BL       lcdWriteCommand
;;;86     }
000024  bd10              POP      {r4,pc}
;;;87     
                          ENDP


                          AREA ||i.init_SPI3||, CODE, READONLY, ALIGN=2

                  init_SPI3 PROC
;;;14     
;;;15     void init_SPI3(void)
000000  b510              PUSH     {r4,lr}
;;;16     {
;;;17     	DrvGPIO_InitFunction(E_FUNC_SPI3);
000002  2011              MOVS     r0,#0x11
000004  f7fffffe          BL       DrvGPIO_InitFunction
;;;18     	/* Configure SPI3 as a master, Type1 waveform, 32-bit transaction */
;;;19     	DrvSPI_Open(eDRVSPI_PORT3, eDRVSPI_MASTER, eDRVSPI_TYPE1, 9);
000008  2309              MOVS     r3,#9
00000a  2201              MOVS     r2,#1
00000c  2100              MOVS     r1,#0
00000e  2003              MOVS     r0,#3
000010  f7fffffe          BL       DrvSPI_Open
;;;20     	/* MSB first */
;;;21     	DrvSPI_SetEndian(eDRVSPI_PORT3, eDRVSPI_MSB_FIRST);
000014  2101              MOVS     r1,#1
000016  2003              MOVS     r0,#3
000018  f7fffffe          BL       DrvSPI_SetEndian
;;;22     	/* Disable the automatic slave select function of SS0. */
;;;23     	DrvSPI_DisableAutoSS(eDRVSPI_PORT3);
00001c  2003              MOVS     r0,#3
00001e  f7fffffe          BL       DrvSPI_DisableAutoSS
;;;24     	/* Set the active level of slave select. */
;;;25     	DrvSPI_SetSlaveSelectActiveLevel(eDRVSPI_PORT3, eDRVSPI_ACTIVE_LOW_FALLING);
000022  2100              MOVS     r1,#0
000024  2003              MOVS     r0,#3
000026  f7fffffe          BL       DrvSPI_SetSlaveSelectActiveLevel
;;;26     	/* SPI clock rate 1MHz */
;;;27     	DrvSPI_SetClockFreq(eDRVSPI_PORT3, 25000000, 0);
00002a  2200              MOVS     r2,#0
00002c  4902              LDR      r1,|L17.56|
00002e  2003              MOVS     r0,#3
000030  f7fffffe          BL       DrvSPI_SetClockFreq
;;;28     }
000034  bd10              POP      {r4,pc}
;;;29     
                          ENDP

000036  0000              DCW      0x0000
                  |L17.56|
                          DCD      0x017d7840

                          AREA ||i.lcdSetAddr||, CODE, READONLY, ALIGN=2

                  lcdSetAddr PROC
;;;52     // Set Address to LCD
;;;53     void lcdSetAddr(unsigned char PA, unsigned char CA)
000000  4a3b              LDR      r2,|L18.240|
;;;54     {
;;;55     	// Set PA
;;;56     
;;;57     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1; 	
000002  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000004  6892              LDR      r2,[r2,#8]
000006  0892              LSRS     r2,r2,#2
000008  0092              LSLS     r2,r2,#2
00000a  1c52              ADDS     r2,r2,#1
00000c  4b38              LDR      r3,|L18.240|
00000e  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
000010  609a              STR      r2,[r3,#8]
;;;58     	SPI_PORT[eDRVSPI_PORT3]->TX[0] = 0xB0 | PA;	
000012  22b0              MOVS     r2,#0xb0
000014  4302              ORRS     r2,r2,r0
000016  4b36              LDR      r3,|L18.240|
000018  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00001a  621a              STR      r2,[r3,#0x20]
;;;59     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
00001c  4a34              LDR      r2,|L18.240|
00001e  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000020  6812              LDR      r2,[r2,#0]
000022  0852              LSRS     r2,r2,#1
000024  0052              LSLS     r2,r2,#1
000026  1c52              ADDS     r2,r2,#1
000028  4b31              LDR      r3,|L18.240|
00002a  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00002c  601a              STR      r2,[r3,#0]
;;;60       while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );	 //check data out?
00002e  bf00              NOP      
                  |L18.48|
000030  4a2f              LDR      r2,|L18.240|
000032  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000034  6812              LDR      r2,[r2,#0]
000036  07d2              LSLS     r2,r2,#31
000038  0fd2              LSRS     r2,r2,#31
00003a  2a00              CMP      r2,#0
00003c  d1f8              BNE      |L18.48|
;;;61     	// Set CA MSB
;;;62     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
00003e  4a2c              LDR      r2,|L18.240|
000040  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000042  6892              LDR      r2,[r2,#8]
000044  0892              LSRS     r2,r2,#2
000046  0092              LSLS     r2,r2,#2
000048  4b29              LDR      r3,|L18.240|
00004a  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00004c  609a              STR      r2,[r3,#8]
;;;63     
;;;64     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1;	
00004e  4a28              LDR      r2,|L18.240|
000050  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000052  6892              LDR      r2,[r2,#8]
000054  0892              LSRS     r2,r2,#2
000056  0092              LSLS     r2,r2,#2
000058  1c52              ADDS     r2,r2,#1
00005a  4b25              LDR      r3,|L18.240|
00005c  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00005e  609a              STR      r2,[r3,#8]
;;;65     	SPI_PORT[eDRVSPI_PORT3]->TX[0] =0x10 |(CA>>4)&0xF;
000060  060a              LSLS     r2,r1,#24
000062  0f12              LSRS     r2,r2,#28
000064  2310              MOVS     r3,#0x10
000066  431a              ORRS     r2,r2,r3
000068  4b21              LDR      r3,|L18.240|
00006a  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00006c  621a              STR      r2,[r3,#0x20]
;;;66     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
00006e  4a20              LDR      r2,|L18.240|
000070  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000072  6812              LDR      r2,[r2,#0]
000074  0852              LSRS     r2,r2,#1
000076  0052              LSLS     r2,r2,#1
000078  1c52              ADDS     r2,r2,#1
00007a  4b1d              LDR      r3,|L18.240|
00007c  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00007e  601a              STR      r2,[r3,#0]
;;;67       while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );	  //check data out?
000080  bf00              NOP      
                  |L18.130|
000082  4a1b              LDR      r2,|L18.240|
000084  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000086  6812              LDR      r2,[r2,#0]
000088  07d2              LSLS     r2,r2,#31
00008a  0fd2              LSRS     r2,r2,#31
00008c  2a00              CMP      r2,#0
00008e  d1f8              BNE      |L18.130|
;;;68      	// Set CA LSB
;;;69     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
000090  4a17              LDR      r2,|L18.240|
000092  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000094  6892              LDR      r2,[r2,#8]
000096  0892              LSRS     r2,r2,#2
000098  0092              LSLS     r2,r2,#2
00009a  4b15              LDR      r3,|L18.240|
00009c  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00009e  609a              STR      r2,[r3,#8]
;;;70     
;;;71     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1;
0000a0  4a13              LDR      r2,|L18.240|
0000a2  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
0000a4  6892              LDR      r2,[r2,#8]
0000a6  0892              LSRS     r2,r2,#2
0000a8  0092              LSLS     r2,r2,#2
0000aa  1c52              ADDS     r2,r2,#1
0000ac  4b10              LDR      r3,|L18.240|
0000ae  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
0000b0  609a              STR      r2,[r3,#8]
;;;72     	SPI_PORT[eDRVSPI_PORT3]->TX[0] =0x00 | (CA & 0xF);		
0000b2  070a              LSLS     r2,r1,#28
0000b4  0f12              LSRS     r2,r2,#28
0000b6  4b0e              LDR      r3,|L18.240|
0000b8  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
0000ba  621a              STR      r2,[r3,#0x20]
;;;73     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
0000bc  4a0c              LDR      r2,|L18.240|
0000be  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
0000c0  6812              LDR      r2,[r2,#0]
0000c2  0852              LSRS     r2,r2,#1
0000c4  0052              LSLS     r2,r2,#1
0000c6  1c52              ADDS     r2,r2,#1
0000c8  4b09              LDR      r3,|L18.240|
0000ca  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
0000cc  601a              STR      r2,[r3,#0]
;;;74       while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );	  //check data out?
0000ce  bf00              NOP      
                  |L18.208|
0000d0  4a07              LDR      r2,|L18.240|
0000d2  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
0000d4  6812              LDR      r2,[r2,#0]
0000d6  07d2              LSLS     r2,r2,#31
0000d8  0fd2              LSRS     r2,r2,#31
0000da  2a00              CMP      r2,#0
0000dc  d1f8              BNE      |L18.208|
;;;75     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
0000de  4a04              LDR      r2,|L18.240|
0000e0  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
0000e2  6892              LDR      r2,[r2,#8]
0000e4  0892              LSRS     r2,r2,#2
0000e6  0092              LSLS     r2,r2,#2
0000e8  4b01              LDR      r3,|L18.240|
0000ea  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
0000ec  609a              STR      r2,[r3,#8]
;;;76     }
0000ee  4770              BX       lr
;;;77     
                          ENDP

                  |L18.240|
                          DCD      SPI_PORT

                          AREA ||i.lcdWriteCommand||, CODE, READONLY, ALIGN=2

                  lcdWriteCommand PROC
;;;29     
;;;30     void lcdWriteCommand(unsigned char temp)
000000  b510              PUSH     {r4,lr}
;;;31     {
000002  4604              MOV      r4,r0
;;;32      	// Write Data
;;;33     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1;	      //chip select
000004  4815              LDR      r0,|L19.92|
000006  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000008  6880              LDR      r0,[r0,#8]
00000a  0880              LSRS     r0,r0,#2
00000c  0080              LSLS     r0,r0,#2
00000e  1c40              ADDS     r0,r0,#1
000010  4912              LDR      r1,|L19.92|
000012  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000014  6088              STR      r0,[r1,#8]
;;;34     	SPI_PORT[eDRVSPI_PORT3]->TX[0]=temp;    	//write command
000016  4811              LDR      r0,|L19.92|
000018  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
00001a  6204              STR      r4,[r0,#0x20]
;;;35     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
00001c  480f              LDR      r0,|L19.92|
00001e  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000020  6800              LDR      r0,[r0,#0]
000022  0840              LSRS     r0,r0,#1
000024  0040              LSLS     r0,r0,#1
000026  1c40              ADDS     r0,r0,#1
000028  490c              LDR      r1,|L19.92|
00002a  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
00002c  6008              STR      r0,[r1,#0]
;;;36       while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 ); //check data out?
00002e  bf00              NOP      
                  |L19.48|
000030  480a              LDR      r0,|L19.92|
000032  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000034  6800              LDR      r0,[r0,#0]
000036  07c0              LSLS     r0,r0,#31
000038  0fc0              LSRS     r0,r0,#31
00003a  2800              CMP      r0,#0
00003c  d1f8              BNE      |L19.48|
;;;37     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;	
00003e  4807              LDR      r0,|L19.92|
000040  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000042  6880              LDR      r0,[r0,#8]
000044  0880              LSRS     r0,r0,#2
000046  0080              LSLS     r0,r0,#2
000048  4904              LDR      r1,|L19.92|
00004a  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
00004c  6088              STR      r0,[r1,#8]
;;;38     	while(DrvSPI_IsBusy(eDRVSPI_PORT3) != 0); 
00004e  bf00              NOP      
                  |L19.80|
000050  2003              MOVS     r0,#3
000052  f7fffffe          BL       DrvSPI_IsBusy
000056  2800              CMP      r0,#0
000058  d1fa              BNE      |L19.80|
;;;39     }
00005a  bd10              POP      {r4,pc}
;;;40     
                          ENDP

                  |L19.92|
                          DCD      SPI_PORT

                          AREA ||i.lcdWriteData||, CODE, READONLY, ALIGN=2

                  lcdWriteData PROC
;;;41     // Wrtie data to LCD 
;;;42     void lcdWriteData(unsigned char temp)
000000  4914              LDR      r1,|L20.84|
;;;43     {
;;;44     	// Write Data
;;;45     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1;	   //chip select
000002  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000004  6889              LDR      r1,[r1,#8]
000006  0889              LSRS     r1,r1,#2
000008  0089              LSLS     r1,r1,#2
00000a  1c49              ADDS     r1,r1,#1
00000c  4a11              LDR      r2,|L20.84|
00000e  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000010  6091              STR      r1,[r2,#8]
;;;46     	SPI_PORT[eDRVSPI_PORT3]->TX[0] =0x100 | temp;    	//write data
000012  21ff              MOVS     r1,#0xff
000014  3101              ADDS     r1,#1
000016  4301              ORRS     r1,r1,r0
000018  4a0e              LDR      r2,|L20.84|
00001a  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
00001c  6211              STR      r1,[r2,#0x20]
;;;47     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
00001e  490d              LDR      r1,|L20.84|
000020  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000022  6809              LDR      r1,[r1,#0]
000024  0849              LSRS     r1,r1,#1
000026  0049              LSLS     r1,r1,#1
000028  1c49              ADDS     r1,r1,#1
00002a  4a0a              LDR      r2,|L20.84|
00002c  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
00002e  6011              STR      r1,[r2,#0]
;;;48       while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 ); //check data out?
000030  bf00              NOP      
                  |L20.50|
000032  4908              LDR      r1,|L20.84|
000034  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000036  6809              LDR      r1,[r1,#0]
000038  07c9              LSLS     r1,r1,#31
00003a  0fc9              LSRS     r1,r1,#31
00003c  2900              CMP      r1,#0
00003e  d1f8              BNE      |L20.50|
;;;49     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
000040  4904              LDR      r1,|L20.84|
000042  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000044  6889              LDR      r1,[r1,#8]
000046  0889              LSRS     r1,r1,#2
000048  0089              LSLS     r1,r1,#2
00004a  4a02              LDR      r2,|L20.84|
00004c  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
00004e  6091              STR      r1,[r2,#8]
;;;50     }
000050  4770              BX       lr
;;;51     
                          ENDP

000052  0000              DCW      0x0000
                  |L20.84|
                          DCD      SPI_PORT

                          AREA ||i.printC||, CODE, READONLY, ALIGN=2

                  printC PROC
;;;102    
;;;103    void printC(int16_t x, int16_t y, unsigned char ascii_code)
000000  b5fc              PUSH     {r2-r7,lr}
;;;104    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4617              MOV      r7,r2
;;;105      int8_t i;
;;;106      unsigned char temp;	    
;;;107      for(i=0;i<8;i++) {
000008  2400              MOVS     r4,#0
00000a  e017              B        |L21.60|
                  |L21.12|
;;;108    	lcdSetAddr((y/8),(LCD_Xmax+1-x-i));
00000c  17ea              ASRS     r2,r5,#31
00000e  0f52              LSRS     r2,r2,#29
000010  1952              ADDS     r2,r2,r5
000012  0552              LSLS     r2,r2,#21
000014  0e10              LSRS     r0,r2,#24
000016  2281              MOVS     r2,#0x81
000018  1b92              SUBS     r2,r2,r6
00001a  1b12              SUBS     r2,r2,r4
00001c  b2d1              UXTB     r1,r2
00001e  9500              STR      r5,[sp,#0]
000020  f7fffffe          BL       lcdSetAddr
;;;109    	temp=Font8x16[(ascii_code-0x20)*16+i];	 
000024  4638              MOV      r0,r7
000026  3820              SUBS     r0,r0,#0x20
000028  0100              LSLS     r0,r0,#4
00002a  1900              ADDS     r0,r0,r4
00002c  4914              LDR      r1,|L21.128|
00002e  5c08              LDRB     r0,[r1,r0]
000030  9001              STR      r0,[sp,#4]
;;;110    	lcdWriteData(temp);
000032  9801              LDR      r0,[sp,#4]
000034  f7fffffe          BL       lcdWriteData
000038  1c60              ADDS     r0,r4,#1              ;107
00003a  b244              SXTB     r4,r0                 ;107
                  |L21.60|
00003c  2c08              CMP      r4,#8                 ;107
00003e  dbe5              BLT      |L21.12|
;;;111        }
;;;112    
;;;113        for(i=0;i<8;i++) {
000040  2400              MOVS     r4,#0
000042  e019              B        |L21.120|
                  |L21.68|
;;;114    	lcdSetAddr((y/8)+1,(LCD_Xmax+1-x-i));	 
000044  17ea              ASRS     r2,r5,#31
000046  0f52              LSRS     r2,r2,#29
000048  1952              ADDS     r2,r2,r5
00004a  10d2              ASRS     r2,r2,#3
00004c  1c52              ADDS     r2,r2,#1
00004e  b2d0              UXTB     r0,r2
000050  2281              MOVS     r2,#0x81
000052  1b92              SUBS     r2,r2,r6
000054  1b12              SUBS     r2,r2,r4
000056  b2d1              UXTB     r1,r2
000058  9500              STR      r5,[sp,#0]
00005a  f7fffffe          BL       lcdSetAddr
;;;115    	temp=Font8x16[(ascii_code-0x20)*16+i+8];
00005e  4638              MOV      r0,r7
000060  3820              SUBS     r0,r0,#0x20
000062  0100              LSLS     r0,r0,#4
000064  1900              ADDS     r0,r0,r4
000066  3008              ADDS     r0,r0,#8
000068  4905              LDR      r1,|L21.128|
00006a  5c08              LDRB     r0,[r1,r0]
00006c  9001              STR      r0,[sp,#4]
;;;116    	lcdWriteData(temp);
00006e  9801              LDR      r0,[sp,#4]
000070  f7fffffe          BL       lcdWriteData
000074  1c60              ADDS     r0,r4,#1              ;113
000076  b244              SXTB     r4,r0                 ;113
                  |L21.120|
000078  2c08              CMP      r4,#8                 ;113
00007a  dbe3              BLT      |L21.68|
;;;117        }
;;;118    }
00007c  bdfc              POP      {r2-r7,pc}
;;;119    
                          ENDP

00007e  0000              DCW      0x0000
                  |L21.128|
                          DCD      Font8x16

                          AREA ||i.printC_5x7||, CODE, READONLY, ALIGN=2

                  printC_5x7 PROC
;;;120    // print char function using Font5x7
;;;121    void printC_5x7 (int16_t x, int16_t y, unsigned char ascii_code) 
000000  b5f8              PUSH     {r3-r7,lr}
;;;122    {
000002  4607              MOV      r7,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;123    	uint8_t i;
;;;124    	if (x<(LCD_Xmax-5) && y<(LCD_Ymax-7)) {
000008  2f7b              CMP      r7,#0x7b
00000a  da25              BGE      |L22.88|
00000c  2c39              CMP      r4,#0x39
00000e  da23              BGE      |L22.88|
;;;125    	   if      (ascii_code<0x20) ascii_code=0x20;
000010  2d20              CMP      r5,#0x20
000012  da01              BGE      |L22.24|
000014  2520              MOVS     r5,#0x20
000016  e006              B        |L22.38|
                  |L22.24|
;;;126         else if (ascii_code>0x7F) ascii_code=0x20;
000018  2d7f              CMP      r5,#0x7f
00001a  dd01              BLE      |L22.32|
00001c  2520              MOVS     r5,#0x20
00001e  e002              B        |L22.38|
                  |L22.32|
;;;127    	   else           ascii_code=ascii_code-0x20;
000020  4628              MOV      r0,r5
000022  3820              SUBS     r0,r0,#0x20
000024  b2c5              UXTB     r5,r0
                  |L22.38|
;;;128    	   for (i=0;i<5;i++) {
000026  2600              MOVS     r6,#0
000028  e014              B        |L22.84|
                  |L22.42|
;;;129    			  lcdSetAddr((y/8),(LCD_Xmax+1-x-i)); 
00002a  17e2              ASRS     r2,r4,#31
00002c  0f52              LSRS     r2,r2,#29
00002e  1912              ADDS     r2,r2,r4
000030  0552              LSLS     r2,r2,#21
000032  0e10              LSRS     r0,r2,#24
000034  2281              MOVS     r2,#0x81
000036  1bd2              SUBS     r2,r2,r7
000038  1b92              SUBS     r2,r2,r6
00003a  b2d1              UXTB     r1,r2
00003c  9400              STR      r4,[sp,#0]
00003e  f7fffffe          BL       lcdSetAddr
;;;130            lcdWriteData(Font5x7[ascii_code*5+i]);
000042  00a9              LSLS     r1,r5,#2
000044  1869              ADDS     r1,r5,r1
000046  1989              ADDS     r1,r1,r6
000048  4a04              LDR      r2,|L22.92|
00004a  5c50              LDRB     r0,[r2,r1]
00004c  f7fffffe          BL       lcdWriteData
000050  1c70              ADDS     r0,r6,#1              ;128
000052  b2c6              UXTB     r6,r0                 ;128
                  |L22.84|
000054  2e05              CMP      r6,#5                 ;128
000056  dbe8              BLT      |L22.42|
                  |L22.88|
;;;131    		 }
;;;132    	}
;;;133    }
000058  bdf8              POP      {r3-r7,pc}
;;;134    
                          ENDP

00005a  0000              DCW      0x0000
                  |L22.92|
                          DCD      Font5x7

                          AREA ||i.printS||, CODE, READONLY, ALIGN=1

                  printS PROC
;;;141    
;;;142    void printS(int16_t x, int16_t y, char text[])
000000  b5f8              PUSH     {r3-r7,lr}
;;;143    {
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
000006  4615              MOV      r5,r2
;;;144    	int8_t i;
;;;145    	for (i=0;i<strlen(text);i++) 
000008  2400              MOVS     r4,#0
00000a  e008              B        |L23.30|
                  |L23.12|
;;;146    		printC(x+i*8, y,text[i]);
00000c  5d2a              LDRB     r2,[r5,r4]
00000e  00e1              LSLS     r1,r4,#3
000010  1989              ADDS     r1,r1,r6
000012  b208              SXTH     r0,r1
000014  4639              MOV      r1,r7
000016  f7fffffe          BL       printC
00001a  1c60              ADDS     r0,r4,#1              ;145
00001c  b244              SXTB     r4,r0                 ;145
                  |L23.30|
00001e  4628              MOV      r0,r5                 ;145
000020  f7fffffe          BL       strlen
000024  42a0              CMP      r0,r4                 ;145
000026  d8f1              BHI      |L23.12|
;;;147    }
000028  bdf8              POP      {r3-r7,pc}
;;;148    
                          ENDP


                          AREA ||i.printS_5x7||, CODE, READONLY, ALIGN=1

                  printS_5x7 PROC
;;;148    
;;;149    void printS_5x7(int16_t x, int16_t y, char text[])
000000  b5f8              PUSH     {r3-r7,lr}
;;;150    {
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
000006  4614              MOV      r4,r2
;;;151    	uint8_t i;
;;;152    	for (i=0;i<strlen(text);i++) {
000008  2500              MOVS     r5,#0
00000a  e008              B        |L24.30|
                  |L24.12|
;;;153    		printC_5x7(x,y,text[i]);
00000c  5d62              LDRB     r2,[r4,r5]
00000e  4639              MOV      r1,r7
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       printC_5x7
;;;154    	  x=x+5;
000016  1d70              ADDS     r0,r6,#5
000018  b206              SXTH     r6,r0
00001a  1c68              ADDS     r0,r5,#1              ;152
00001c  b2c5              UXTB     r5,r0                 ;152
                  |L24.30|
00001e  4620              MOV      r0,r4                 ;152
000020  f7fffffe          BL       strlen
000024  42a8              CMP      r0,r5                 ;152
000026  d8f1              BHI      |L24.12|
;;;155    	}
;;;156    }
000028  bdf8              POP      {r3-r7,pc}
;;;157    
                          ENDP


                          AREA ||i.print_Line||, CODE, READONLY, ALIGN=1

                  print_Line PROC
;;;134    
;;;135    void print_Line(int8_t line, char text[])
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;137    	int8_t i;
;;;138    	for (i=0;i<strlen(text);i++) 
000006  2400              MOVS     r4,#0
000008  e006              B        |L25.24|
                  |L25.10|
;;;139    		printC(i*8,line*16,text[i]);
00000a  5d2a              LDRB     r2,[r5,r4]
00000c  0131              LSLS     r1,r6,#4
00000e  00e0              LSLS     r0,r4,#3
000010  f7fffffe          BL       printC
000014  1c60              ADDS     r0,r4,#1              ;138
000016  b244              SXTB     r4,r0                 ;138
                  |L25.24|
000018  4628              MOV      r0,r5                 ;138
00001a  f7fffffe          BL       strlen
00001e  42a0              CMP      r0,r4                 ;138
000020  d8f3              BHI      |L25.10|
;;;140    }
000022  bd70              POP      {r4-r6,pc}
;;;141    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  DisplayBuffer
                          %        1024

                          AREA ||.data||, DATA, ALIGN=2

                  Font5x7
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  0000005f          DCB      0x00,0x00,0x00,0x5f
000008  00000007          DCB      0x00,0x00,0x00,0x07
00000c  00070014          DCB      0x00,0x07,0x00,0x14
000010  7f147f14          DCB      0x7f,0x14,0x7f,0x14
000014  242a7f2a          DCB      0x24,0x2a,0x7f,0x2a
000018  12231308          DCB      0x12,0x23,0x13,0x08
00001c  64623649          DCB      0x64,0x62,0x36,0x49
000020  55225000          DCB      0x55,0x22,0x50,0x00
000024  05030000          DCB      0x05,0x03,0x00,0x00
000028  001c2241          DCB      0x00,0x1c,0x22,0x41
00002c  00004122          DCB      0x00,0x00,0x41,0x22
000030  1c00082a          DCB      0x1c,0x00,0x08,0x2a
000034  1c2a0808          DCB      0x1c,0x2a,0x08,0x08
000038  083e0808          DCB      0x08,0x3e,0x08,0x08
00003c  00503000          DCB      0x00,0x50,0x30,0x00
000040  00080808          DCB      0x00,0x08,0x08,0x08
000044  08080060          DCB      0x08,0x08,0x00,0x60
000048  60000020          DCB      0x60,0x00,0x00,0x20
00004c  10080402          DCB      0x10,0x08,0x04,0x02
000050  3e514945          DCB      0x3e,0x51,0x49,0x45
000054  3e00427f          DCB      0x3e,0x00,0x42,0x7f
000058  40004261          DCB      0x40,0x00,0x42,0x61
00005c  51494621          DCB      0x51,0x49,0x46,0x21
000060  41454b31          DCB      0x41,0x45,0x4b,0x31
000064  1814127f          DCB      0x18,0x14,0x12,0x7f
000068  10274545          DCB      0x10,0x27,0x45,0x45
00006c  45393c4a          DCB      0x45,0x39,0x3c,0x4a
000070  49493001          DCB      0x49,0x49,0x30,0x01
000074  71090503          DCB      0x71,0x09,0x05,0x03
000078  36494949          DCB      0x36,0x49,0x49,0x49
00007c  36064949          DCB      0x36,0x06,0x49,0x49
000080  291e0036          DCB      0x29,0x1e,0x00,0x36
000084  36000000          DCB      0x36,0x00,0x00,0x00
000088  56360000          DCB      0x56,0x36,0x00,0x00
00008c  00081422          DCB      0x00,0x08,0x14,0x22
000090  41141414          DCB      0x41,0x14,0x14,0x14
000094  14144122          DCB      0x14,0x14,0x41,0x22
000098  14080002          DCB      0x14,0x08,0x00,0x02
00009c  01510906          DCB      0x01,0x51,0x09,0x06
0000a0  32497941          DCB      0x32,0x49,0x79,0x41
0000a4  3e7e1111          DCB      0x3e,0x7e,0x11,0x11
0000a8  117e7f49          DCB      0x11,0x7e,0x7f,0x49
0000ac  4949363e          DCB      0x49,0x49,0x36,0x3e
0000b0  41414122          DCB      0x41,0x41,0x41,0x22
0000b4  7f414122          DCB      0x7f,0x41,0x41,0x22
0000b8  1c7f4949          DCB      0x1c,0x7f,0x49,0x49
0000bc  49417f09          DCB      0x49,0x41,0x7f,0x09
0000c0  0901013e          DCB      0x09,0x01,0x01,0x3e
0000c4  41415132          DCB      0x41,0x41,0x51,0x32
0000c8  7f080808          DCB      0x7f,0x08,0x08,0x08
0000cc  7f00417f          DCB      0x7f,0x00,0x41,0x7f
0000d0  41002040          DCB      0x41,0x00,0x20,0x40
0000d4  413f017f          DCB      0x41,0x3f,0x01,0x7f
0000d8  08142241          DCB      0x08,0x14,0x22,0x41
0000dc  7f404040          DCB      0x7f,0x40,0x40,0x40
0000e0  407f0204          DCB      0x40,0x7f,0x02,0x04
0000e4  027f7f04          DCB      0x02,0x7f,0x7f,0x04
0000e8  08107f3e          DCB      0x08,0x10,0x7f,0x3e
0000ec  4141413e          DCB      0x41,0x41,0x41,0x3e
0000f0  7f090909          DCB      0x7f,0x09,0x09,0x09
0000f4  063e4151          DCB      0x06,0x3e,0x41,0x51
0000f8  215e7f09          DCB      0x21,0x5e,0x7f,0x09
0000fc  19294646          DCB      0x19,0x29,0x46,0x46
000100  49494931          DCB      0x49,0x49,0x49,0x31
000104  01017f01          DCB      0x01,0x01,0x7f,0x01
000108  013f4040          DCB      0x01,0x3f,0x40,0x40
00010c  403f1f20          DCB      0x40,0x3f,0x1f,0x20
000110  40201f7f          DCB      0x40,0x20,0x1f,0x7f
000114  2018207f          DCB      0x20,0x18,0x20,0x7f
000118  63140814          DCB      0x63,0x14,0x08,0x14
00011c  63030478          DCB      0x63,0x03,0x04,0x78
000120  04036151          DCB      0x04,0x03,0x61,0x51
000124  49454300          DCB      0x49,0x45,0x43,0x00
000128  007f4141          DCB      0x00,0x7f,0x41,0x41
00012c  02040810          DCB      0x02,0x04,0x08,0x10
000130  2041417f          DCB      0x20,0x41,0x41,0x7f
000134  00000402          DCB      0x00,0x00,0x04,0x02
000138  01020440          DCB      0x01,0x02,0x04,0x40
00013c  40404040          DCB      0x40,0x40,0x40,0x40
000140  00010204          DCB      0x00,0x01,0x02,0x04
000144  00205454          DCB      0x00,0x20,0x54,0x54
000148  54787f48          DCB      0x54,0x78,0x7f,0x48
00014c  44443838          DCB      0x44,0x44,0x38,0x38
000150  44444420          DCB      0x44,0x44,0x44,0x20
000154  38444448          DCB      0x38,0x44,0x44,0x48
000158  7f385454          DCB      0x7f,0x38,0x54,0x54
00015c  5418087e          DCB      0x54,0x18,0x08,0x7e
000160  09010208          DCB      0x09,0x01,0x02,0x08
000164  1454543c          DCB      0x14,0x54,0x54,0x3c
000168  7f080404          DCB      0x7f,0x08,0x04,0x04
00016c  7800447d          DCB      0x78,0x00,0x44,0x7d
000170  40002040          DCB      0x40,0x00,0x20,0x40
000174  443d0000          DCB      0x44,0x3d,0x00,0x00
000178  7f102844          DCB      0x7f,0x10,0x28,0x44
00017c  00417f40          DCB      0x00,0x41,0x7f,0x40
000180  007c0418          DCB      0x00,0x7c,0x04,0x18
000184  04787c08          DCB      0x04,0x78,0x7c,0x08
000188  04047838          DCB      0x04,0x04,0x78,0x38
00018c  44444438          DCB      0x44,0x44,0x44,0x38
000190  7c141414          DCB      0x7c,0x14,0x14,0x14
000194  08081414          DCB      0x08,0x08,0x14,0x14
000198  187c7c08          DCB      0x18,0x7c,0x7c,0x08
00019c  04040848          DCB      0x04,0x04,0x08,0x48
0001a0  54545420          DCB      0x54,0x54,0x54,0x20
0001a4  043f4440          DCB      0x04,0x3f,0x44,0x40
0001a8  203c4040          DCB      0x20,0x3c,0x40,0x40
0001ac  207c1c20          DCB      0x20,0x7c,0x1c,0x20
0001b0  40201c3c          DCB      0x40,0x20,0x1c,0x3c
0001b4  4030403c          DCB      0x40,0x30,0x40,0x3c
0001b8  44281028          DCB      0x44,0x28,0x10,0x28
0001bc  440c5050          DCB      0x44,0x0c,0x50,0x50
0001c0  503c4464          DCB      0x50,0x3c,0x44,0x64
0001c4  544c4400          DCB      0x54,0x4c,0x44,0x00
0001c8  08364100          DCB      0x08,0x36,0x41,0x00
0001cc  00007f00          DCB      0x00,0x00,0x7f,0x00
0001d0  00004136          DCB      0x00,0x00,0x41,0x36
0001d4  08000808          DCB      0x08,0x00,0x08,0x08
0001d8  2a1c0808          DCB      0x2a,0x1c,0x08,0x08
0001dc  1c2a0808          DCB      0x1c,0x2a,0x08,0x08
                  Font8x16
0001e0  00000000          DCB      0x00,0x00,0x00,0x00
0001e4  00000000          DCB      0x00,0x00,0x00,0x00
0001e8  00000000          DCB      0x00,0x00,0x00,0x00
0001ec  00000000          DCB      0x00,0x00,0x00,0x00
0001f0  f0000000          DCB      0xf0,0x00,0x00,0x00
0001f4  00000000          DCB      0x00,0x00,0x00,0x00
0001f8  cf000000          DCB      0xcf,0x00,0x00,0x00
0001fc  00000000          DCB      0x00,0x00,0x00,0x00
000200  00000000          DCB      0x00,0x00,0x00,0x00
000204  00000000          DCB      0x00,0x00,0x00,0x00
000208  f00000f0          DCB      0xf0,0x00,0x00,0xf0
00020c  00000000          DCB      0x00,0x00,0x00,0x00
000210  000000c0          DCB      0x00,0x00,0x00,0xc0
000214  30c03000          DCB      0x30,0xc0,0x30,0x00
000218  c839cf39          DCB      0xc8,0x39,0xcf,0x39
00021c  0f090100          DCB      0x0f,0x09,0x01,0x00
000220  e01010f8          DCB      0xe0,0x10,0x10,0xf8
000224  10106000          DCB      0x10,0x10,0x60,0x00
000228  304142ff          DCB      0x30,0x41,0x42,0xff
00022c  42443800          DCB      0x42,0x44,0x38,0x00
000230  c02010e0          DCB      0xc0,0x20,0x10,0xe0
000234  20e01800          DCB      0x20,0xe0,0x18,0x00
000238  01c2310c          DCB      0x01,0xc2,0x31,0x0c
00023c  73884438          DCB      0x73,0x88,0x44,0x38
000240  00e01010          DCB      0x00,0xe0,0x10,0x10
000244  e0000000          DCB      0xe0,0x00,0x00,0x00
000248  7885828d          DCB      0x78,0x85,0x82,0x8d
00024c  70a29e42          DCB      0x70,0xa2,0x9e,0x42
000250  00000000          DCB      0x00,0x00,0x00,0x00
000254  00000000          DCB      0x00,0x00,0x00,0x00
000258  f0000000          DCB      0xf0,0x00,0x00,0x00
00025c  00000000          DCB      0x00,0x00,0x00,0x00
000260  c0300804          DCB      0xc0,0x30,0x08,0x04
000264  00000000          DCB      0x00,0x00,0x00,0x00
000268  1f608000          DCB      0x1f,0x60,0x80,0x00
00026c  00000000          DCB      0x00,0x00,0x00,0x00
000270  040830c0          DCB      0x04,0x08,0x30,0xc0
000274  00000000          DCB      0x00,0x00,0x00,0x00
000278  0080601f          DCB      0x00,0x80,0x60,0x1f
00027c  00000000          DCB      0x00,0x00,0x00,0x00
000280  00000000          DCB      0x00,0x00,0x00,0x00
000284  00000000          DCB      0x00,0x00,0x00,0x00
000288  4428fe28          DCB      0x44,0x28,0xfe,0x28
00028c  44000000          DCB      0x44,0x00,0x00,0x00
000290  00000080          DCB      0x00,0x00,0x00,0x80
000294  00000000          DCB      0x00,0x00,0x00,0x00
000298  080808ff          DCB      0x08,0x08,0x08,0xff
00029c  08080800          DCB      0x08,0x08,0x08,0x00
0002a0  00000000          DCB      0x00,0x00,0x00,0x00
0002a4  00000000          DCB      0x00,0x00,0x00,0x00
0002a8  b0700000          DCB      0xb0,0x70,0x00,0x00
0002ac  00000000          DCB      0x00,0x00,0x00,0x00
0002b0  00000000          DCB      0x00,0x00,0x00,0x00
0002b4  00000000          DCB      0x00,0x00,0x00,0x00
0002b8  80808080          DCB      0x80,0x80,0x80,0x80
0002bc  00000000          DCB      0x00,0x00,0x00,0x00
0002c0  00000000          DCB      0x00,0x00,0x00,0x00
0002c4  00000000          DCB      0x00,0x00,0x00,0x00
0002c8  c0c00000          DCB      0xc0,0xc0,0x00,0x00
0002cc  00000000          DCB      0x00,0x00,0x00,0x00
0002d0  00008070          DCB      0x00,0x00,0x80,0x70
0002d4  00000000          DCB      0x00,0x00,0x00,0x00
0002d8  e01c0300          DCB      0xe0,0x1c,0x03,0x00
0002dc  00000000          DCB      0x00,0x00,0x00,0x00
0002e0  c0201010          DCB      0xc0,0x20,0x10,0x10
0002e4  20c00000          DCB      0x20,0xc0,0x00,0x00
0002e8  3f408080          DCB      0x3f,0x40,0x80,0x80
0002ec  403f0000          DCB      0x40,0x3f,0x00,0x00
0002f0  20f00000          DCB      0x20,0xf0,0x00,0x00
0002f4  00000000          DCB      0x00,0x00,0x00,0x00
0002f8  80ff8000          DCB      0x80,0xff,0x80,0x00
0002fc  00000000          DCB      0x00,0x00,0x00,0x00
000300  60101010          DCB      0x60,0x10,0x10,0x10
000304  20c00000          DCB      0x20,0xc0,0x00,0x00
000308  c0a09088          DCB      0xc0,0xa0,0x90,0x88
00030c  86c10000          DCB      0x86,0xc1,0x00,0x00
000310  20101010          DCB      0x20,0x10,0x10,0x10
000314  e0000000          DCB      0xe0,0x00,0x00,0x00
000318  80808283          DCB      0x80,0x80,0x82,0x83
00031c  44380000          DCB      0x44,0x38,0x00,0x00
000320  00008060          DCB      0x00,0x00,0x80,0x60
000324  f0000000          DCB      0xf0,0x00,0x00,0x00
000328  18161110          DCB      0x18,0x16,0x11,0x10
00032c  ff100000          DCB      0xff,0x10,0x00,0x00
000330  00f01010          DCB      0x00,0xf0,0x10,0x10
000334  10100000          DCB      0x10,0x10,0x00,0x00
000338  80818181          DCB      0x80,0x81,0x81,0x81
00033c  423c0000          DCB      0x42,0x3c,0x00,0x00
000340  80402010          DCB      0x80,0x40,0x20,0x10
000344  10100000          DCB      0x10,0x10,0x00,0x00
000348  3f428181          DCB      0x3f,0x42,0x81,0x81
00034c  423c0000          DCB      0x42,0x3c,0x00,0x00
000350  70101010          DCB      0x70,0x10,0x10,0x10
000354  90700000          DCB      0x90,0x70,0x00,0x00
000358  0000e01c          DCB      0x00,0x00,0xe0,0x1c
00035c  03000000          DCB      0x03,0x00,0x00,0x00
000360  c0201010          DCB      0xc0,0x20,0x10,0x10
000364  20c00000          DCB      0x20,0xc0,0x00,0x00
000368  38458282          DCB      0x38,0x45,0x82,0x82
00036c  45380000          DCB      0x45,0x38,0x00,0x00
000370  c0201010          DCB      0xc0,0x20,0x10,0x10
000374  20c00000          DCB      0x20,0xc0,0x00,0x00
000378  83848848          DCB      0x83,0x84,0x88,0x48
00037c  241f0000          DCB      0x24,0x1f,0x00,0x00
000380  00000000          DCB      0x00,0x00,0x00,0x00
000384  00000000          DCB      0x00,0x00,0x00,0x00
000388  c3c30000          DCB      0xc3,0xc3,0x00,0x00
00038c  00000000          DCB      0x00,0x00,0x00,0x00
000390  c0c00000          DCB      0xc0,0xc0,0x00,0x00
000394  00000000          DCB      0x00,0x00,0x00,0x00
000398  b0700000          DCB      0xb0,0x70,0x00,0x00
00039c  00000000          DCB      0x00,0x00,0x00,0x00
0003a0  00000000          DCB      0x00,0x00,0x00,0x00
0003a4  00000000          DCB      0x00,0x00,0x00,0x00
0003a8  10282844          DCB      0x10,0x28,0x28,0x44
0003ac  44820000          DCB      0x44,0x82,0x00,0x00
0003b0  00000000          DCB      0x00,0x00,0x00,0x00
0003b4  00000000          DCB      0x00,0x00,0x00,0x00
0003b8  88888888          DCB      0x88,0x88,0x88,0x88
0003bc  88888888          DCB      0x88,0x88,0x88,0x88
0003c0  00000000          DCB      0x00,0x00,0x00,0x00
0003c4  00000000          DCB      0x00,0x00,0x00,0x00
0003c8  82444428          DCB      0x82,0x44,0x44,0x28
0003cc  28100000          DCB      0x28,0x10,0x00,0x00
0003d0  e0101010          DCB      0xe0,0x10,0x10,0x10
0003d4  20c00000          DCB      0x20,0xc0,0x00,0x00
0003d8  0000d806          DCB      0x00,0x00,0xd8,0x06
0003dc  01000000          DCB      0x01,0x00,0x00,0x00
0003e0  c0201090          DCB      0xc0,0x20,0x10,0x90
0003e4  9010a0c0          DCB      0x90,0x10,0xa0,0xc0
0003e8  3f408f90          DCB      0x3f,0x40,0x8f,0x90
0003ec  908f505f          DCB      0x90,0x8f,0x50,0x5f
0003f0  00008070          DCB      0x00,0x00,0x80,0x70
0003f4  80000000          DCB      0x80,0x00,0x00,0x00
0003f8  80f08f08          DCB      0x80,0xf0,0x8f,0x08
0003fc  8ff08000          DCB      0x8f,0xf0,0x80,0x00
000400  10f01010          DCB      0x10,0xf0,0x10,0x10
000404  1020c000          DCB      0x10,0x20,0xc0,0x00
000408  80ff8282          DCB      0x80,0xff,0x82,0x82
00040c  82453800          DCB      0x82,0x45,0x38,0x00
000410  c0201010          DCB      0xc0,0x20,0x10,0x10
000414  10207000          DCB      0x10,0x20,0x70,0x00
000418  3f408080          DCB      0x3f,0x40,0x80,0x80
00041c  80804000          DCB      0x80,0x80,0x40,0x00
000420  10f01010          DCB      0x10,0xf0,0x10,0x10
000424  10608000          DCB      0x10,0x60,0x80,0x00
000428  80ff8080          DCB      0x80,0xff,0x80,0x80
00042c  80601f00          DCB      0x80,0x60,0x1f,0x00
000430  10f01010          DCB      0x10,0xf0,0x10,0x10
000434  10107000          DCB      0x10,0x10,0x70,0x00
000438  80ff8282          DCB      0x80,0xff,0x82,0x82
00043c  8287e000          DCB      0x82,0x87,0xe0,0x00
000440  10f01010          DCB      0x10,0xf0,0x10,0x10
000444  10107000          DCB      0x10,0x10,0x70,0x00
000448  80ff8202          DCB      0x80,0xff,0x82,0x02
00044c  02070000          DCB      0x02,0x07,0x00,0x00
000450  c0201010          DCB      0xc0,0x20,0x10,0x10
000454  20700000          DCB      0x20,0x70,0x00,0x00
000458  3f408080          DCB      0x3f,0x40,0x80,0x80
00045c  847c0400          DCB      0x84,0x7c,0x04,0x00
000460  10f01000          DCB      0x10,0xf0,0x10,0x00
000464  10f01000          DCB      0x10,0xf0,0x10,0x00
000468  80ff8202          DCB      0x80,0xff,0x82,0x02
00046c  82ff8000          DCB      0x82,0xff,0x80,0x00
000470  10f01000          DCB      0x10,0xf0,0x10,0x00
000474  00000000          DCB      0x00,0x00,0x00,0x00
000478  80ff8000          DCB      0x80,0xff,0x80,0x00
00047c  00000000          DCB      0x00,0x00,0x00,0x00
000480  000010f0          DCB      0x00,0x00,0x10,0xf0
000484  10000000          DCB      0x10,0x00,0x00,0x00
000488  4080807f          DCB      0x40,0x80,0x80,0x7f
00048c  00000000          DCB      0x00,0x00,0x00,0x00
000490  10f01080          DCB      0x10,0xf0,0x10,0x80
000494  50301000          DCB      0x50,0x30,0x10,0x00
000498  80ff830c          DCB      0x80,0xff,0x83,0x0c
00049c  b0c08000          DCB      0xb0,0xc0,0x80,0x00
0004a0  10f01000          DCB      0x10,0xf0,0x10,0x00
0004a4  00000000          DCB      0x00,0x00,0x00,0x00
0004a8  80ff8080          DCB      0x80,0xff,0x80,0x80
0004ac  80c02000          DCB      0x80,0xc0,0x20,0x00
0004b0  10f08000          DCB      0x10,0xf0,0x80,0x00
0004b4  80f01000          DCB      0x80,0xf0,0x10,0x00
0004b8  80ff833c          DCB      0x80,0xff,0x83,0x3c
0004bc  83ff8000          DCB      0x83,0xff,0x80,0x00
0004c0  10f0c000          DCB      0x10,0xf0,0xc0,0x00
0004c4  10f01000          DCB      0x10,0xf0,0x10,0x00
0004c8  80ff800f          DCB      0x80,0xff,0x80,0x0f
0004cc  30ff0000          DCB      0x30,0xff,0x00,0x00
0004d0  80601010          DCB      0x80,0x60,0x10,0x10
0004d4  10608000          DCB      0x10,0x60,0x80,0x00
0004d8  1f608080          DCB      0x1f,0x60,0x80,0x80
0004dc  80601f00          DCB      0x80,0x60,0x1f,0x00
0004e0  10f01010          DCB      0x10,0xf0,0x10,0x10
0004e4  1020c000          DCB      0x10,0x20,0xc0,0x00
0004e8  80ff8404          DCB      0x80,0xff,0x84,0x04
0004ec  04020100          DCB      0x04,0x02,0x01,0x00
0004f0  e0180404          DCB      0xe0,0x18,0x04,0x04
0004f4  0418e000          DCB      0x04,0x18,0xe0,0x00
0004f8  07182020          DCB      0x07,0x18,0x20,0x20
0004fc  60988700          DCB      0x60,0x98,0x87,0x00
000500  10f01010          DCB      0x10,0xf0,0x10,0x10
000504  1020c000          DCB      0x10,0x20,0xc0,0x00
000508  80ff840c          DCB      0x80,0xff,0x84,0x0c
00050c  34c28100          DCB      0x34,0xc2,0x81,0x00
000510  c0201010          DCB      0xc0,0x20,0x10,0x10
000514  10207000          DCB      0x10,0x20,0x70,0x00
000518  e0418282          DCB      0xe0,0x41,0x82,0x82
00051c  84483000          DCB      0x84,0x48,0x30,0x00
000520  301010f0          DCB      0x30,0x10,0x10,0xf0
000524  10103000          DCB      0x10,0x10,0x30,0x00
000528  000080ff          DCB      0x00,0x00,0x80,0xff
00052c  80000000          DCB      0x80,0x00,0x00,0x00
000530  10f01000          DCB      0x10,0xf0,0x10,0x00
000534  10f01000          DCB      0x10,0xf0,0x10,0x00
000538  007f8080          DCB      0x00,0x7f,0x80,0x80
00053c  807f0000          DCB      0x80,0x7f,0x00,0x00
000540  10f01000          DCB      0x10,0xf0,0x10,0x00
000544  10f01000          DCB      0x10,0xf0,0x10,0x00
000548  00011ee0          DCB      0x00,0x01,0x1e,0xe0
00054c  1e010000          DCB      0x1e,0x01,0x00,0x00
000550  10f010c0          DCB      0x10,0xf0,0x10,0xc0
000554  10f01000          DCB      0x10,0xf0,0x10,0x00
000558  000ff00f          DCB      0x00,0x0f,0xf0,0x0f
00055c  f00f0000          DCB      0xf0,0x0f,0x00,0x00
000560  10709000          DCB      0x10,0x70,0x90,0x00
000564  90701000          DCB      0x90,0x70,0x10,0x00
000568  80e09906          DCB      0x80,0xe0,0x99,0x06
00056c  99e08000          DCB      0x99,0xe0,0x80,0x00
000570  10709000          DCB      0x10,0x70,0x90,0x00
000574  90701000          DCB      0x90,0x70,0x10,0x00
000578  000083fc          DCB      0x00,0x00,0x83,0xfc
00057c  83000000          DCB      0x83,0x00,0x00,0x00
000580  70101010          DCB      0x70,0x10,0x10,0x10
000584  10d03000          DCB      0x10,0xd0,0x30,0x00
000588  c0b08886          DCB      0xc0,0xb0,0x88,0x86
00058c  8180e000          DCB      0x81,0x80,0xe0,0x00
000590  fc040400          DCB      0xfc,0x04,0x04,0x00
000594  00000000          DCB      0x00,0x00,0x00,0x00
000598  ff808000          DCB      0xff,0x80,0x80,0x00
00059c  00000000          DCB      0x00,0x00,0x00,0x00
0005a0  70800000          DCB      0x70,0x80,0x00,0x00
0005a4  00000000          DCB      0x00,0x00,0x00,0x00
0005a8  00031ce0          DCB      0x00,0x03,0x1c,0xe0
0005ac  00000000          DCB      0x00,0x00,0x00,0x00
0005b0  0404fc00          DCB      0x04,0x04,0xfc,0x00
0005b4  00000000          DCB      0x00,0x00,0x00,0x00
0005b8  8080ff00          DCB      0x80,0x80,0xff,0x00
0005bc  00000000          DCB      0x00,0x00,0x00,0x00
0005c0  00000000          DCB      0x00,0x00,0x00,0x00
0005c4  00000000          DCB      0x00,0x00,0x00,0x00
0005c8  80601806          DCB      0x80,0x60,0x18,0x06
0005cc  18608000          DCB      0x18,0x60,0x80,0x00
0005d0  00000000          DCB      0x00,0x00,0x00,0x00
0005d4  00000000          DCB      0x00,0x00,0x00,0x00
0005d8  80808080          DCB      0x80,0x80,0x80,0x80
0005dc  80808080          DCB      0x80,0x80,0x80,0x80
0005e0  00000000          DCB      0x00,0x00,0x00,0x00
0005e4  00000000          DCB      0x00,0x00,0x00,0x00
0005e8  20604080          DCB      0x20,0x60,0x40,0x80
0005ec  00000000          DCB      0x00,0x00,0x00,0x00
0005f0  00000000          DCB      0x00,0x00,0x00,0x00
0005f4  00000000          DCB      0x00,0x00,0x00,0x00
0005f8  66918949          DCB      0x66,0x91,0x89,0x49
0005fc  fe800000          DCB      0xfe,0x80,0x00,0x00
000600  10f00000          DCB      0x10,0xf0,0x00,0x00
000604  00000000          DCB      0x00,0x00,0x00,0x00
000608  007f8181          DCB      0x00,0x7f,0x81,0x81
00060c  423c0000          DCB      0x42,0x3c,0x00,0x00
000610  00000000          DCB      0x00,0x00,0x00,0x00
000614  00000000          DCB      0x00,0x00,0x00,0x00
000618  3c428181          DCB      0x3c,0x42,0x81,0x81
00061c  81420000          DCB      0x81,0x42,0x00,0x00
000620  00000010          DCB      0x00,0x00,0x00,0x10
000624  f0000000          DCB      0xf0,0x00,0x00,0x00
000628  3c428181          DCB      0x3c,0x42,0x81,0x81
00062c  7f800000          DCB      0x7f,0x80,0x00,0x00
000630  00000000          DCB      0x00,0x00,0x00,0x00
000634  00000000          DCB      0x00,0x00,0x00,0x00
000638  3c4a8989          DCB      0x3c,0x4a,0x89,0x89
00063c  8a4c0000          DCB      0x8a,0x4c,0x00,0x00
000640  0000e010          DCB      0x00,0x00,0xe0,0x10
000644  10200000          DCB      0x10,0x20,0x00,0x00
000648  0181ff81          DCB      0x01,0x81,0xff,0x81
00064c  01000000          DCB      0x01,0x00,0x00,0x00
000650  80404040          DCB      0x80,0x40,0x40,0x40
000654  80400000          DCB      0x80,0x40,0x00,0x00
000658  53aca4a4          DCB      0x53,0xac,0xa4,0xa4
00065c  a3400000          DCB      0xa3,0x40,0x00,0x00
000660  10f00000          DCB      0x10,0xf0,0x00,0x00
000664  00000000          DCB      0x00,0x00,0x00,0x00
000668  80ff0101          DCB      0x80,0xff,0x01,0x01
00066c  fe800000          DCB      0xfe,0x80,0x00,0x00
000670  00b00000          DCB      0x00,0xb0,0x00,0x00
000674  00000000          DCB      0x00,0x00,0x00,0x00
000678  81ff8000          DCB      0x81,0xff,0x80,0x00
00067c  00000000          DCB      0x00,0x00,0x00,0x00
000680  000080cc          DCB      0x00,0x00,0x80,0xcc
000684  00000000          DCB      0x00,0x00,0x00,0x00
000688  4080807f          DCB      0x40,0x80,0x80,0x7f
00068c  00000000          DCB      0x00,0x00,0x00,0x00
000690  10f00000          DCB      0x10,0xf0,0x00,0x00
000694  00000000          DCB      0x00,0x00,0x00,0x00
000698  80ff9825          DCB      0x80,0xff,0x98,0x25
00069c  c3810000          DCB      0xc3,0x81,0x00,0x00
0006a0  10f00000          DCB      0x10,0xf0,0x00,0x00
0006a4  00000000          DCB      0x00,0x00,0x00,0x00
0006a8  80ff8000          DCB      0x80,0xff,0x80,0x00
0006ac  00000000          DCB      0x00,0x00,0x00,0x00
0006b0  00000000          DCB      0x00,0x00,0x00,0x00
0006b4  00000000          DCB      0x00,0x00,0x00,0x00
0006b8  81fe01fe          DCB      0x81,0xfe,0x01,0xfe
0006bc  01fe8000          DCB      0x01,0xfe,0x80,0x00
0006c0  00000000          DCB      0x00,0x00,0x00,0x00
0006c4  00000000          DCB      0x00,0x00,0x00,0x00
0006c8  81fe0101          DCB      0x81,0xfe,0x01,0x01
0006cc  fe800000          DCB      0xfe,0x80,0x00,0x00
0006d0  00000000          DCB      0x00,0x00,0x00,0x00
0006d4  00000000          DCB      0x00,0x00,0x00,0x00
0006d8  3c428181          DCB      0x3c,0x42,0x81,0x81
0006dc  423c0000          DCB      0x42,0x3c,0x00,0x00
0006e0  40804040          DCB      0x40,0x80,0x40,0x40
0006e4  80000000          DCB      0x80,0x00,0x00,0x00
0006e8  80ffa020          DCB      0x80,0xff,0xa0,0x20
0006ec  100f0000          DCB      0x10,0x0f,0x00,0x00
0006f0  00804040          DCB      0x00,0x80,0x40,0x40
0006f4  80400000          DCB      0x80,0x40,0x00,0x00
0006f8  0f1020a0          DCB      0x0f,0x10,0x20,0xa0
0006fc  ff800000          DCB      0xff,0x80,0x00,0x00
000700  00000000          DCB      0x00,0x00,0x00,0x00
000704  00000000          DCB      0x00,0x00,0x00,0x00
000708  81ff8201          DCB      0x81,0xff,0x82,0x01
00070c  01000000          DCB      0x01,0x00,0x00,0x00
000710  00000000          DCB      0x00,0x00,0x00,0x00
000714  00000000          DCB      0x00,0x00,0x00,0x00
000718  e6498991          DCB      0xe6,0x49,0x89,0x91
00071c  92670000          DCB      0x92,0x67,0x00,0x00
000720  0000c000          DCB      0x00,0x00,0xc0,0x00
000724  00000000          DCB      0x00,0x00,0x00,0x00
000728  01017f81          DCB      0x01,0x01,0x7f,0x81
00072c  81400000          DCB      0x81,0x40,0x00,0x00
000730  00000000          DCB      0x00,0x00,0x00,0x00
000734  00000000          DCB      0x00,0x00,0x00,0x00
000738  017f8081          DCB      0x01,0x7f,0x80,0x81
00073c  7f800000          DCB      0x7f,0x80,0x00,0x00
000740  00000000          DCB      0x00,0x00,0x00,0x00
000744  00000000          DCB      0x00,0x00,0x00,0x00
000748  010739c0          DCB      0x01,0x07,0x39,0xc0
00074c  39070100          DCB      0x39,0x07,0x01,0x00
000750  00000000          DCB      0x00,0x00,0x00,0x00
000754  00000000          DCB      0x00,0x00,0x00,0x00
000758  011fe11c          DCB      0x01,0x1f,0xe1,0x1c
00075c  e11f0100          DCB      0xe1,0x1f,0x01,0x00
000760  00000000          DCB      0x00,0x00,0x00,0x00
000764  00000000          DCB      0x00,0x00,0x00,0x00
000768  81e71818          DCB      0x81,0xe7,0x18,0x18
00076c  e7810000          DCB      0xe7,0x81,0x00,0x00
000770  40c04000          DCB      0x40,0xc0,0x40,0x00
000774  40c04000          DCB      0x40,0xc0,0x40,0x00
000778  80814638          DCB      0x80,0x81,0x46,0x38
00077c  06010000          DCB      0x06,0x01,0x00,0x00
000780  00000000          DCB      0x00,0x00,0x00,0x00
000784  00000000          DCB      0x00,0x00,0x00,0x00
000788  c3a19189          DCB      0xc3,0xa1,0x91,0x89
00078c  85c30000          DCB      0x85,0xc3,0x00,0x00
000790  00f00800          DCB      0x00,0xf0,0x08,0x00
000794  00000000          DCB      0x00,0x00,0x00,0x00
000798  027d8000          DCB      0x02,0x7d,0x80,0x00
00079c  00000000          DCB      0x00,0x00,0x00,0x00
0007a0  f0000000          DCB      0xf0,0x00,0x00,0x00
0007a4  00000000          DCB      0x00,0x00,0x00,0x00
0007a8  ff000000          DCB      0xff,0x00,0x00,0x00
0007ac  00000000          DCB      0x00,0x00,0x00,0x00
0007b0  08f00000          DCB      0x08,0xf0,0x00,0x00
0007b4  00000000          DCB      0x00,0x00,0x00,0x00
0007b8  807d0200          DCB      0x80,0x7d,0x02,0x00
0007bc  00000000          DCB      0x00,0x00,0x00,0x00
0007c0  00000000          DCB      0x00,0x00,0x00,0x00
0007c4  00000000          DCB      0x00,0x00,0x00,0x00
0007c8  c0202060          DCB      0xc0,0x20,0x20,0x60
0007cc  c0808060          DCB      0xc0,0x80,0x80,0x60
                  SPI_PORT
                          DCD      0x40030000
                          DCD      0x40034000
                          DCD      0x40130000
                          DCD      0x40134000
