; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\sys.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sys.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\ -I..\ff8\src\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC1xx\Include -I..\..\..\..\Library\Device\Nuvoton\NUC1xx\Source -I..\..\..\..\Library\ -I..\..\..\..\Library\NUC1xx\Include -I..\..\..\..\Library\NUC1xx-LB_002\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Nuvoton\NUC1xx -D__UVISION_VERSION=524 --omf_browse=.\obj\sys.crf ..\..\..\..\Library\NUC1xx\Source\SYS.c]
                          THUMB

                          AREA ||i.BOD_IRQHandler||, CODE, READONLY, ALIGN=2

                  BOD_IRQHandler PROC
;;;510    /*---------------------------------------------------------------------------------------------------------*/
;;;511    void BOD_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;512    {
;;;513        SYS->BODCR.BOD_INTF = 1;
000002  2005              MOVS     r0,#5
000004  0700              LSLS     r0,r0,#28
000006  6980              LDR      r0,[r0,#0x18]
000008  2110              MOVS     r1,#0x10
00000a  4388              BICS     r0,r0,r1
00000c  3010              ADDS     r0,r0,#0x10
00000e  2105              MOVS     r1,#5
000010  0709              LSLS     r1,r1,#28
000012  6188              STR      r0,[r1,#0x18]
;;;514        if (BOD_callbackFn != NULL)
000014  4803              LDR      r0,|L1.36|
000016  6800              LDR      r0,[r0,#0]  ; BOD_callbackFn
000018  2800              CMP      r0,#0
00001a  d002              BEQ      |L1.34|
;;;515            BOD_callbackFn();
00001c  4801              LDR      r0,|L1.36|
00001e  6800              LDR      r0,[r0,#0]  ; BOD_callbackFn
000020  4780              BLX      r0
                  |L1.34|
;;;516    }
000022  bd10              POP      {r4,pc}
;;;517    
                          ENDP

                  |L1.36|
                          DCD      BOD_callbackFn

                          AREA ||i.DrvSYS_ClearClockSwitchStatus||, CODE, READONLY, ALIGN=2

                  DrvSYS_ClearClockSwitchStatus PROC
;;;1402   /*---------------------------------------------------------------------------------------------------------*/
;;;1403   void DrvSYS_ClearClockSwitchStatus(void)
000000  4803              LDR      r0,|L2.16|
;;;1404   {
;;;1405        SYSCLK->CLKSTATUS.CLK_SW_FAIL = 1;
000002  68c0              LDR      r0,[r0,#0xc]
000004  2180              MOVS     r1,#0x80
000006  4388              BICS     r0,r0,r1
000008  3080              ADDS     r0,r0,#0x80
00000a  4901              LDR      r1,|L2.16|
00000c  60c8              STR      r0,[r1,#0xc]
;;;1406   }
00000e  4770              BX       lr
;;;1407   
                          ENDP

                  |L2.16|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_ClearResetSource||, CODE, READONLY, ALIGN=1

                  DrvSYS_ClearResetSource PROC
;;;144    /*---------------------------------------------------------------------------------------------------------*/
;;;145    uint32_t DrvSYS_ClearResetSource(uint32_t u32Src)
000000  4601              MOV      r1,r0
;;;146    {
;;;147        *((__IO uint32_t *) &SYS->RSTSRC) = u32Src;
000002  2005              MOVS     r0,#5
000004  0700              LSLS     r0,r0,#28
000006  6041              STR      r1,[r0,#4]
;;;148        return 0;
000008  2000              MOVS     r0,#0
;;;149    }
00000a  4770              BX       lr
;;;150    
                          ENDP


                          AREA ||i.DrvSYS_Delay||, CODE, READONLY, ALIGN=2

                  DrvSYS_Delay PROC
;;;1308   /*---------------------------------------------------------------------------------------------------------*/
;;;1309   void DrvSYS_Delay(uint32_t us)
000000  4908              LDR      r1,|L4.36|
;;;1310   {
;;;1311       SysTick->LOAD = us * CyclesPerUs;
000002  6809              LDR      r1,[r1,#0]  ; CyclesPerUs
000004  4341              MULS     r1,r0,r1
000006  4a08              LDR      r2,|L4.40|
000008  6151              STR      r1,[r2,#0x14]
;;;1312       SysTick->VAL  = (0x00);
00000a  2100              MOVS     r1,#0
00000c  6191              STR      r1,[r2,#0x18]
;;;1313       SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
00000e  2105              MOVS     r1,#5
000010  6111              STR      r1,[r2,#0x10]
;;;1314   
;;;1315       /* Waiting for down-count to zero */
;;;1316       while((SysTick->CTRL & (1 << 16)) == 0);
000012  bf00              NOP      
                  |L4.20|
000014  4904              LDR      r1,|L4.40|
000016  6909              LDR      r1,[r1,#0x10]
000018  2201              MOVS     r2,#1
00001a  0412              LSLS     r2,r2,#16
00001c  4011              ANDS     r1,r1,r2
00001e  2900              CMP      r1,#0
000020  d0f8              BEQ      |L4.20|
;;;1317   }
000022  4770              BX       lr
;;;1318   
                          ENDP

                  |L4.36|
                          DCD      CyclesPerUs
                  |L4.40|
                          DCD      0xe000e000

                          AREA ||i.DrvSYS_DisableBODLowPowerMode||, CODE, READONLY, ALIGN=1

                  DrvSYS_DisableBODLowPowerMode PROC
;;;348    /*---------------------------------------------------------------------------------------------------------*/
;;;349    void DrvSYS_DisableBODLowPowerMode(void)
000000  2005              MOVS     r0,#5
;;;350    {
;;;351        SYS->BODCR.BOD_LPM = 0;
000002  0700              LSLS     r0,r0,#28
000004  6980              LDR      r0,[r0,#0x18]
000006  2120              MOVS     r1,#0x20
000008  4388              BICS     r0,r0,r1
00000a  2105              MOVS     r1,#5
00000c  0709              LSLS     r1,r1,#28
00000e  6188              STR      r0,[r1,#0x18]
;;;352    }
000010  4770              BX       lr
;;;353    
                          ENDP


                          AREA ||i.DrvSYS_DisableHighPerformanceMode||, CODE, READONLY, ALIGN=1

                  DrvSYS_DisableHighPerformanceMode PROC
;;;1290   /*---------------------------------------------------------------------------------------------------------*/
;;;1291   void DrvSYS_DisableHighPerformanceMode(void)
000000  2005              MOVS     r0,#5
;;;1292   {   
;;;1293       SYS->CPR.HPE = 0;
000002  0700              LSLS     r0,r0,#28
000004  6900              LDR      r0,[r0,#0x10]
000006  0840              LSRS     r0,r0,#1
000008  0040              LSLS     r0,r0,#1
00000a  2105              MOVS     r1,#5
00000c  0709              LSLS     r1,r1,#28
00000e  6108              STR      r0,[r1,#0x10]
;;;1294   }
000010  4770              BX       lr
;;;1295   
                          ENDP


                          AREA ||i.DrvSYS_DisableLowVoltReset||, CODE, READONLY, ALIGN=1

                  DrvSYS_DisableLowVoltReset PROC
;;;412    /*---------------------------------------------------------------------------------------------------------*/
;;;413    void DrvSYS_DisableLowVoltReset(void)
000000  2005              MOVS     r0,#5
;;;414    {
;;;415        SYS->BODCR.LVR_EN = 0;
000002  0700              LSLS     r0,r0,#28
000004  6980              LDR      r0,[r0,#0x18]
000006  2180              MOVS     r1,#0x80
000008  4388              BICS     r0,r0,r1
00000a  2105              MOVS     r1,#5
00000c  0709              LSLS     r1,r1,#28
00000e  6188              STR      r0,[r1,#0x18]
;;;416    }
000010  4770              BX       lr
;;;417    
                          ENDP


                          AREA ||i.DrvSYS_DisablePOR||, CODE, READONLY, ALIGN=2

                  DrvSYS_DisablePOR PROC
;;;492    /*---------------------------------------------------------------------------------------------------------*/
;;;493    void DrvSYS_DisablePOR(void)
000000  4801              LDR      r0,|L8.8|
;;;494    {
;;;495        SYS->PORCR = 0x5AA5;
000002  0701              LSLS     r1,r0,#28
000004  6248              STR      r0,[r1,#0x24]
;;;496    }
000006  4770              BX       lr
;;;497    
                          ENDP

                  |L8.8|
                          DCD      0x00005aa5

                          AREA ||i.DrvSYS_DisableTemperatureSensor||, CODE, READONLY, ALIGN=1

                  DrvSYS_DisableTemperatureSensor PROC
;;;446    /*---------------------------------------------------------------------------------------------------------*/
;;;447    void DrvSYS_DisableTemperatureSensor(void)
000000  2005              MOVS     r0,#5
;;;448    {
;;;449        SYS->TEMPCR.VTEMP_EN = 0;
000002  0700              LSLS     r0,r0,#28
000004  69c0              LDR      r0,[r0,#0x1c]
000006  0840              LSRS     r0,r0,#1
000008  0040              LSLS     r0,r0,#1
00000a  2105              MOVS     r1,#5
00000c  0709              LSLS     r1,r1,#28
00000e  61c8              STR      r0,[r1,#0x1c]
;;;450    }
000010  4770              BX       lr
;;;451    
                          ENDP


                          AREA ||i.DrvSYS_EnableBODLowPowerMode||, CODE, READONLY, ALIGN=1

                  DrvSYS_EnableBODLowPowerMode PROC
;;;325    /*---------------------------------------------------------------------------------------------------------*/
;;;326    void DrvSYS_EnableBODLowPowerMode(void)
000000  2005              MOVS     r0,#5
;;;327    {
;;;328        SYS->BODCR.BOD_LPM = 1;
000002  0700              LSLS     r0,r0,#28
000004  6980              LDR      r0,[r0,#0x18]
000006  2120              MOVS     r1,#0x20
000008  4388              BICS     r0,r0,r1
00000a  3020              ADDS     r0,r0,#0x20
00000c  2105              MOVS     r1,#5
00000e  0709              LSLS     r1,r1,#28
000010  6188              STR      r0,[r1,#0x18]
;;;329    }
000012  4770              BX       lr
;;;330    
                          ENDP


                          AREA ||i.DrvSYS_EnableHighPerformanceMode||, CODE, READONLY, ALIGN=1

                  DrvSYS_EnableHighPerformanceMode PROC
;;;1265   /*---------------------------------------------------------------------------------------------------------*/
;;;1266   void DrvSYS_EnableHighPerformanceMode(void)
000000  2005              MOVS     r0,#5
;;;1267   {   
;;;1268       SYS->CPR.HPE = 1;
000002  0700              LSLS     r0,r0,#28
000004  6900              LDR      r0,[r0,#0x10]
000006  0840              LSRS     r0,r0,#1
000008  0040              LSLS     r0,r0,#1
00000a  1c40              ADDS     r0,r0,#1
00000c  2105              MOVS     r1,#5
00000e  0709              LSLS     r1,r1,#28
000010  6108              STR      r0,[r1,#0x10]
;;;1269   }
000012  4770              BX       lr
;;;1270   
                          ENDP


                          AREA ||i.DrvSYS_EnableLowVoltReset||, CODE, READONLY, ALIGN=1

                  DrvSYS_EnableLowVoltReset PROC
;;;389    /*---------------------------------------------------------------------------------------------------------*/
;;;390    void DrvSYS_EnableLowVoltReset(void)
000000  2005              MOVS     r0,#5
;;;391    {
;;;392        SYS->BODCR.LVR_EN = 1;
000002  0700              LSLS     r0,r0,#28
000004  6980              LDR      r0,[r0,#0x18]
000006  2180              MOVS     r1,#0x80
000008  4388              BICS     r0,r0,r1
00000a  3080              ADDS     r0,r0,#0x80
00000c  2105              MOVS     r1,#5
00000e  0709              LSLS     r1,r1,#28
000010  6188              STR      r0,[r1,#0x18]
;;;393    }
000012  4770              BX       lr
;;;394    
                          ENDP


                          AREA ||i.DrvSYS_EnablePOR||, CODE, READONLY, ALIGN=1

                  DrvSYS_EnablePOR PROC
;;;469    /*---------------------------------------------------------------------------------------------------------*/
;;;470    void DrvSYS_EnablePOR(void)
000000  2000              MOVS     r0,#0
;;;471    {
;;;472        SYS->PORCR = 0;
000002  2105              MOVS     r1,#5
000004  0709              LSLS     r1,r1,#28
000006  6248              STR      r0,[r1,#0x24]
;;;473    }
000008  4770              BX       lr
;;;474    
                          ENDP


                          AREA ||i.DrvSYS_EnableTemperatureSensor||, CODE, READONLY, ALIGN=1

                  DrvSYS_EnableTemperatureSensor PROC
;;;429    /*---------------------------------------------------------------------------------------------------------*/
;;;430    void DrvSYS_EnableTemperatureSensor(void)
000000  2005              MOVS     r0,#5
;;;431    {
;;;432        SYS->TEMPCR.VTEMP_EN = 1;
000002  0700              LSLS     r0,r0,#28
000004  69c0              LDR      r0,[r0,#0x1c]
000006  0840              LSRS     r0,r0,#1
000008  0040              LSLS     r0,r0,#1
00000a  1c40              ADDS     r0,r0,#1
00000c  2105              MOVS     r1,#5
00000e  0709              LSLS     r1,r1,#28
000010  61c8              STR      r0,[r1,#0x1c]
;;;433    }
000012  4770              BX       lr
;;;434    
                          ENDP


                          AREA ||i.DrvSYS_EnterPowerDown||, CODE, READONLY, ALIGN=2

                  DrvSYS_EnterPowerDown PROC
;;;911    /*---------------------------------------------------------------------------------------------------------*/
;;;912    void DrvSYS_EnterPowerDown(E_SYS_PD_TYPE ePDType)
000000  490c              LDR      r1,|L15.52|
;;;913    {   
;;;914        SYSCLK->PWRCON.PWR_DOWN_EN = 0;
000002  6809              LDR      r1,[r1,#0]
000004  2280              MOVS     r2,#0x80
000006  4391              BICS     r1,r1,r2
000008  4a0a              LDR      r2,|L15.52|
00000a  6011              STR      r1,[r2,#0]
;;;915        SYSCLK->PWRCON.PD_WAIT_CPU = ePDType;
00000c  4611              MOV      r1,r2
00000e  6809              LDR      r1,[r1,#0]
000010  22ff              MOVS     r2,#0xff
000012  3201              ADDS     r2,#1
000014  4391              BICS     r1,r1,r2
000016  0202              LSLS     r2,r0,#8
000018  23ff              MOVS     r3,#0xff
00001a  3301              ADDS     r3,#1
00001c  401a              ANDS     r2,r2,r3
00001e  4311              ORRS     r1,r1,r2
000020  4a04              LDR      r2,|L15.52|
000022  6011              STR      r1,[r2,#0]
;;;916        SYSCLK->PWRCON.PWR_DOWN_EN = 1;
000024  4611              MOV      r1,r2
000026  6809              LDR      r1,[r1,#0]
000028  2280              MOVS     r2,#0x80
00002a  4391              BICS     r1,r1,r2
00002c  3180              ADDS     r1,r1,#0x80
00002e  4a01              LDR      r2,|L15.52|
000030  6011              STR      r1,[r2,#0]
;;;917    }
000032  4770              BX       lr
;;;918    
                          ENDP

                  |L15.52|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_GetBODState||, CODE, READONLY, ALIGN=1

                  DrvSYS_GetBODState PROC
;;;366    /*---------------------------------------------------------------------------------------------------------*/
;;;367    uint32_t DrvSYS_GetBODState(void)
000000  2005              MOVS     r0,#5
;;;368    {
;;;369        return SYS->BODCR.BOD_OUT;
000002  0700              LSLS     r0,r0,#28
000004  6980              LDR      r0,[r0,#0x18]
000006  0640              LSLS     r0,r0,#25
000008  0fc0              LSRS     r0,r0,#31
;;;370    }
00000a  4770              BX       lr
;;;371    
                          ENDP


                          AREA ||i.DrvSYS_GetChipClockSourceStatus||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetChipClockSourceStatus PROC
;;;1336   /*---------------------------------------------------------------------------------------------------------*/
;;;1337   int32_t DrvSYS_GetChipClockSourceStatus(E_SYS_CHIP_CLKSRC eClkSrc)
000000  b500              PUSH     {lr}
;;;1338   {
000002  4602              MOV      r2,r0
;;;1339       int32_t status;
;;;1340   
;;;1341       switch(eClkSrc)
000004  0013              MOVS     r3,r2
000006  f7fffffe          BL       __ARM_common_switch8
00000a  0504              DCB      0x05,0x04
00000c  090e1318          DCB      0x09,0x0e,0x13,0x18
000010  1d00              DCB      0x1d,0x00
;;;1342       {
;;;1343           case E_SYS_XTL12M:  
;;;1344               status = SYSCLK->CLKSTATUS.XTL12M_STB;
000012  480f              LDR      r0,|L17.80|
000014  68c0              LDR      r0,[r0,#0xc]
000016  07c1              LSLS     r1,r0,#31
000018  0fc9              LSRS     r1,r1,#31
;;;1345               break;
00001a  e015              B        |L17.72|
;;;1346           case E_SYS_XTL32K:
;;;1347               status = SYSCLK->CLKSTATUS.XTL32K_STB;
00001c  480c              LDR      r0,|L17.80|
00001e  68c0              LDR      r0,[r0,#0xc]
000020  0780              LSLS     r0,r0,#30
000022  0fc1              LSRS     r1,r0,#31
;;;1348               break;
000024  e010              B        |L17.72|
;;;1349           case E_SYS_OSC22M:
;;;1350               status = SYSCLK->CLKSTATUS.OSC22M_STB;
000026  480a              LDR      r0,|L17.80|
000028  68c0              LDR      r0,[r0,#0xc]
00002a  06c0              LSLS     r0,r0,#27
00002c  0fc1              LSRS     r1,r0,#31
;;;1351               break;
00002e  e00b              B        |L17.72|
;;;1352           case E_SYS_OSC10K:
;;;1353               status = SYSCLK->CLKSTATUS.OSC10K_STB;
000030  4807              LDR      r0,|L17.80|
000032  68c0              LDR      r0,[r0,#0xc]
000034  0700              LSLS     r0,r0,#28
000036  0fc1              LSRS     r1,r0,#31
;;;1354               break;
000038  e006              B        |L17.72|
;;;1355           case E_SYS_PLL:
;;;1356               status = SYSCLK->CLKSTATUS.PLL_STB;
00003a  4805              LDR      r0,|L17.80|
00003c  68c0              LDR      r0,[r0,#0xc]
00003e  0740              LSLS     r0,r0,#29
000040  0fc1              LSRS     r1,r0,#31
;;;1357               break;
000042  e001              B        |L17.72|
;;;1358           default:
;;;1359               return E_DRVSYS_ERR_ARGUMENT;
000044  4803              LDR      r0,|L17.84|
                  |L17.70|
;;;1360       }
;;;1361   
;;;1362       return status;
;;;1363   }
000046  bd00              POP      {pc}
                  |L17.72|
000048  bf00              NOP                            ;1345
00004a  4608              MOV      r0,r1                 ;1362
00004c  e7fb              B        |L17.70|
;;;1364   
                          ENDP

00004e  0000              DCW      0x0000
                  |L17.80|
                          DCD      0x50000200
                  |L17.84|
                          DCD      0xffff9603

                          AREA ||i.DrvSYS_GetClockSwitchStatus||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetClockSwitchStatus PROC
;;;1382   /*---------------------------------------------------------------------------------------------------------*/
;;;1383   uint32_t DrvSYS_GetClockSwitchStatus(void)
000000  4802              LDR      r0,|L18.12|
;;;1384   {   
;;;1385       return SYSCLK->CLKSTATUS.CLK_SW_FAIL;
000002  68c0              LDR      r0,[r0,#0xc]
000004  0600              LSLS     r0,r0,#24
000006  0fc0              LSRS     r0,r0,#31
;;;1386   }
000008  4770              BX       lr
;;;1387   
                          ENDP

00000a  0000              DCW      0x0000
                  |L18.12|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_GetExtClockFreq||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetExtClockFreq PROC
;;;967    /*---------------------------------------------------------------------------------------------------------*/
;;;968    uint32_t DrvSYS_GetExtClockFreq(void)
000000  4800              LDR      r0,|L19.4|
;;;969    {   
;;;970        return __XTAL;
;;;971    }
000002  4770              BX       lr
;;;972    
                          ENDP

                  |L19.4|
                          DCD      0x00b71b00

                          AREA ||i.DrvSYS_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetHCLKFreq PROC
;;;1110   /*---------------------------------------------------------------------------------------------------------*/
;;;1111   uint32_t DrvSYS_GetHCLKFreq(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1112   {
;;;1113       
;;;1114       uint32_t u32Freqout = 0, u32AHBDivider;
000002  2500              MOVS     r5,#0
;;;1115   
;;;1116       if (SYSCLK->CLKSEL0.HCLK_S == 0)        /* external 12MHz crystal clock */
000004  4816              LDR      r0,|L20.96|
000006  6900              LDR      r0,[r0,#0x10]
000008  0740              LSLS     r0,r0,#29
00000a  0f40              LSRS     r0,r0,#29
00000c  2800              CMP      r0,#0
00000e  d101              BNE      |L20.20|
;;;1117       {
;;;1118           u32Freqout = __XTAL;    
000010  4d14              LDR      r5,|L20.100|
000012  e01a              B        |L20.74|
                  |L20.20|
;;;1119       }
;;;1120       else if(SYSCLK->CLKSEL0.HCLK_S == 1)    /* external 32KHz crystal clock */ 
000014  4812              LDR      r0,|L20.96|
000016  6900              LDR      r0,[r0,#0x10]
000018  0740              LSLS     r0,r0,#29
00001a  0f40              LSRS     r0,r0,#29
00001c  2801              CMP      r0,#1
00001e  d101              BNE      |L20.36|
;;;1121       {
;;;1122           u32Freqout = __RTC_XTAL;
000020  03c5              LSLS     r5,r0,#15
000022  e012              B        |L20.74|
                  |L20.36|
;;;1123       }
;;;1124       else if(SYSCLK->CLKSEL0.HCLK_S == 2)    /* PLL clock */
000024  480e              LDR      r0,|L20.96|
000026  6900              LDR      r0,[r0,#0x10]
000028  0740              LSLS     r0,r0,#29
00002a  0f40              LSRS     r0,r0,#29
00002c  2802              CMP      r0,#2
00002e  d103              BNE      |L20.56|
;;;1125       {
;;;1126           u32Freqout = DrvSYS_GetPLLClockFreq();
000030  f7fffffe          BL       DrvSYS_GetPLLClockFreq
000034  4605              MOV      r5,r0
000036  e008              B        |L20.74|
                  |L20.56|
;;;1127       }
;;;1128       else if(SYSCLK->CLKSEL0.HCLK_S == 3)    /* internal 10KHz oscillator clock */
000038  4809              LDR      r0,|L20.96|
00003a  6900              LDR      r0,[r0,#0x10]
00003c  0740              LSLS     r0,r0,#29
00003e  0f40              LSRS     r0,r0,#29
000040  2803              CMP      r0,#3
000042  d101              BNE      |L20.72|
;;;1129       {
;;;1130           u32Freqout = __IRC10K;
000044  4d08              LDR      r5,|L20.104|
000046  e000              B        |L20.74|
                  |L20.72|
;;;1131       }
;;;1132       else                                    /* internal 22MHz oscillator clock */
;;;1133       {
;;;1134           u32Freqout = __IRC22M;
000048  4d08              LDR      r5,|L20.108|
                  |L20.74|
;;;1135       
;;;1136       }
;;;1137       u32AHBDivider = SYSCLK->CLKDIV.HCLK_N + 1 ;
00004a  4805              LDR      r0,|L20.96|
00004c  6980              LDR      r0,[r0,#0x18]
00004e  0700              LSLS     r0,r0,#28
000050  0f00              LSRS     r0,r0,#28
000052  1c44              ADDS     r4,r0,#1
;;;1138       
;;;1139       return (u32Freqout/u32AHBDivider);  
000054  4621              MOV      r1,r4
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       __aeabi_uidivmod
;;;1140   }
00005c  bd70              POP      {r4-r6,pc}
;;;1141   
                          ENDP

00005e  0000              DCW      0x0000
                  |L20.96|
                          DCD      0x50000200
                  |L20.100|
                          DCD      0x00b71b00
                  |L20.104|
                          DCD      0x00002710
                  |L20.108|
                          DCD      0x01518000

                          AREA ||i.DrvSYS_GetPLLClockFreq||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetPLLClockFreq PROC
;;;1076   /*---------------------------------------------------------------------------------------------------------*/
;;;1077   uint32_t DrvSYS_GetPLLClockFreq(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;1078   {
;;;1079       uint32_t u32Freq =0, u32PLLSrc;
000002  2500              MOVS     r5,#0
;;;1080       uint32_t au32Map[4] = {1, 2, 2, 4};
000004  4b18              LDR      r3,|L21.104|
000006  cb0f              LDM      r3,{r0-r3}
000008  466c              MOV      r4,sp
00000a  c40f              STM      r4!,{r0-r3}
;;;1081   
;;;1082       if (SYSCLK->PLLCON.PLL_SRC == 1)
00000c  4817              LDR      r0,|L21.108|
00000e  6a00              LDR      r0,[r0,#0x20]
000010  0300              LSLS     r0,r0,#12
000012  0fc0              LSRS     r0,r0,#31
000014  2800              CMP      r0,#0
000016  d001              BEQ      |L21.28|
;;;1083       {
;;;1084           u32PLLSrc = __IRC22M;   
000018  4c15              LDR      r4,|L21.112|
00001a  e000              B        |L21.30|
                  |L21.28|
;;;1085       }
;;;1086       else
;;;1087       {
;;;1088           u32PLLSrc = __XTAL;
00001c  4c15              LDR      r4,|L21.116|
                  |L21.30|
;;;1089       }
;;;1090   
;;;1091       if (SYSCLK->PLLCON.PD ==1)  
00001e  4813              LDR      r0,|L21.108|
000020  6a00              LDR      r0,[r0,#0x20]
000022  03c0              LSLS     r0,r0,#15
000024  0fc0              LSRS     r0,r0,#31
000026  2800              CMP      r0,#0
000028  d001              BEQ      |L21.46|
;;;1092           u32Freq = 0;    
00002a  2500              MOVS     r5,#0
00002c  e019              B        |L21.98|
                  |L21.46|
;;;1093       else        
;;;1094           u32Freq = u32PLLSrc * (SYSCLK->PLLCON.FB_DV+2) / (SYSCLK->PLLCON.IN_DV+2) / au32Map[SYSCLK->PLLCON.OUT_DV];
00002e  4a0f              LDR      r2,|L21.108|
000030  6a12              LDR      r2,[r2,#0x20]
000032  0492              LSLS     r2,r2,#18
000034  0ed2              LSRS     r2,r2,#27
000036  1c91              ADDS     r1,r2,#2
000038  4a0c              LDR      r2,|L21.108|
00003a  6a12              LDR      r2,[r2,#0x20]
00003c  05d2              LSLS     r2,r2,#23
00003e  0dd2              LSRS     r2,r2,#23
000040  1c92              ADDS     r2,r2,#2
000042  4362              MULS     r2,r4,r2
000044  4610              MOV      r0,r2
000046  f7fffffe          BL       __aeabi_uidivmod
00004a  4606              MOV      r6,r0
00004c  4807              LDR      r0,|L21.108|
00004e  6a00              LDR      r0,[r0,#0x20]
000050  0400              LSLS     r0,r0,#16
000052  0f80              LSRS     r0,r0,#30
000054  0080              LSLS     r0,r0,#2
000056  466a              MOV      r2,sp
000058  5811              LDR      r1,[r2,r0]
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       __aeabi_uidivmod
000060  4605              MOV      r5,r0
                  |L21.98|
;;;1095   
;;;1096       return u32Freq;
000062  4628              MOV      r0,r5
;;;1097   }
000064  b004              ADD      sp,sp,#0x10
000066  bd70              POP      {r4-r6,pc}
;;;1098   
                          ENDP

                  |L21.104|
                          DCD      ||.constdata||
                  |L21.108|
                          DCD      0x50000200
                  |L21.112|
                          DCD      0x01518000
                  |L21.116|
                          DCD      0x00b71b00

                          AREA ||i.DrvSYS_GetPLLContent||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetPLLContent PROC
;;;989    /*---------------------------------------------------------------------------------------------------------*/
;;;990    uint32_t DrvSYS_GetPLLContent(E_SYS_PLL_CLKSRC ePllSrc, uint32_t u32PllClk)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;991    {
000002  b083              SUB      sp,sp,#0xc
000004  460c              MOV      r4,r1
;;;992        uint32_t u32NR, u32NF, u32NO;
;;;993        
;;;994        uint32_t u32PllSrcClk = __XTAL, u32Register=0;
000006  4828              LDR      r0,|L22.168|
000008  9002              STR      r0,[sp,#8]
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;995    
;;;996        if ( (u32PllClk <= FREQ_200MHZ) && (u32PllClk > FREQ_100MHZ) )
00000e  4827              LDR      r0,|L22.172|
000010  4284              CMP      r4,r0
000012  d804              BHI      |L22.30|
000014  1040              ASRS     r0,r0,#1
000016  4284              CMP      r4,r0
000018  d901              BLS      |L22.30|
;;;997        {
;;;998            u32NO = 0;
00001a  2700              MOVS     r7,#0
00001c  e014              B        |L22.72|
                  |L22.30|
;;;999        }
;;;1000       else if ( (u32PllClk <= FREQ_100MHZ) && (u32PllClk > FREQ_50MHZ) )
00001e  4824              LDR      r0,|L22.176|
000020  4284              CMP      r4,r0
000022  d805              BHI      |L22.48|
000024  1040              ASRS     r0,r0,#1
000026  4284              CMP      r4,r0
000028  d902              BLS      |L22.48|
;;;1001       {
;;;1002           u32NO = 1;
00002a  2701              MOVS     r7,#1
;;;1003           u32PllClk = u32PllClk << 1;
00002c  0064              LSLS     r4,r4,#1
00002e  e00b              B        |L22.72|
                  |L22.48|
;;;1004       }
;;;1005       else if ( (u32PllClk <= FREQ_50MHZ) && (u32PllClk >= FREQ_25MHZ) )
000030  4820              LDR      r0,|L22.180|
000032  4284              CMP      r4,r0
000034  d805              BHI      |L22.66|
000036  1040              ASRS     r0,r0,#1
000038  4284              CMP      r4,r0
00003a  d302              BCC      |L22.66|
;;;1006       {
;;;1007           u32NO = 3;
00003c  2703              MOVS     r7,#3
;;;1008           u32PllClk = u32PllClk << 2;
00003e  00a4              LSLS     r4,r4,#2
000040  e002              B        |L22.72|
                  |L22.66|
;;;1009       }
;;;1010       else
;;;1011       {
;;;1012           return 0xC22E;  
000042  481d              LDR      r0,|L22.184|
                  |L22.68|
;;;1013       } 
;;;1014           
;;;1015       if (ePllSrc == E_SYS_EXTERNAL_12M)
;;;1016           u32PllSrcClk = __XTAL;
;;;1017       else if (ePllSrc == E_SYS_INTERNAL_22M)
;;;1018           u32PllSrcClk = __IRC22M; 
;;;1019   
;;;1020       u32NF = u32PllClk / 1000000;
;;;1021       u32NR = u32PllSrcClk / 1000000; 
;;;1022       
;;;1023       while(1)
;;;1024       {
;;;1025           if ( (u32NR & 0x01) || (u32NF & 0x01) || (u32NR == 2) || (u32NF == 2) )
;;;1026           {
;;;1027               break;
;;;1028           }
;;;1029           else
;;;1030           {
;;;1031               u32NR >>= 1;
;;;1032               u32NF >>= 1;
;;;1033           }   
;;;1034       }    
;;;1035           
;;;1036       u32Register = (u32NO<<14) | ((u32NR - 2)<<9) | (u32NF - 2);
;;;1037   
;;;1038       /* Return the nearest value */
;;;1039       return u32Register;
;;;1040   }
000044  b005              ADD      sp,sp,#0x14
000046  bdf0              POP      {r4-r7,pc}
                  |L22.72|
000048  9803              LDR      r0,[sp,#0xc]          ;1015
00004a  2800              CMP      r0,#0                 ;1015
00004c  d102              BNE      |L22.84|
00004e  4816              LDR      r0,|L22.168|
000050  9002              STR      r0,[sp,#8]            ;1016
000052  e004              B        |L22.94|
                  |L22.84|
000054  9803              LDR      r0,[sp,#0xc]          ;1017
000056  2801              CMP      r0,#1                 ;1017
000058  d101              BNE      |L22.94|
00005a  4818              LDR      r0,|L22.188|
00005c  9002              STR      r0,[sp,#8]            ;1018
                  |L22.94|
00005e  4918              LDR      r1,|L22.192|
000060  4620              MOV      r0,r4                 ;1020
000062  f7fffffe          BL       __aeabi_uidivmod
000066  4606              MOV      r6,r0                 ;1020
000068  4915              LDR      r1,|L22.192|
00006a  9802              LDR      r0,[sp,#8]            ;1021
00006c  f7fffffe          BL       __aeabi_uidivmod
000070  4605              MOV      r5,r0                 ;1021
000072  e00e              B        |L22.146|
                  |L22.116|
000074  07e8              LSLS     r0,r5,#31             ;1025
000076  0fc0              LSRS     r0,r0,#31             ;1025
000078  2800              CMP      r0,#0                 ;1025
00007a  d107              BNE      |L22.140|
00007c  07f0              LSLS     r0,r6,#31             ;1025
00007e  0fc0              LSRS     r0,r0,#31             ;1025
000080  2800              CMP      r0,#0                 ;1025
000082  d103              BNE      |L22.140|
000084  2d02              CMP      r5,#2                 ;1025
000086  d001              BEQ      |L22.140|
000088  2e02              CMP      r6,#2                 ;1025
00008a  d100              BNE      |L22.142|
                  |L22.140|
00008c  e002              B        |L22.148|
                  |L22.142|
00008e  086d              LSRS     r5,r5,#1              ;1031
000090  0876              LSRS     r6,r6,#1              ;1032
                  |L22.146|
000092  e7ef              B        |L22.116|
                  |L22.148|
000094  bf00              NOP                            ;1027
000096  03b8              LSLS     r0,r7,#14             ;1036
000098  1ea9              SUBS     r1,r5,#2              ;1036
00009a  0249              LSLS     r1,r1,#9              ;1036
00009c  4308              ORRS     r0,r0,r1              ;1036
00009e  1eb1              SUBS     r1,r6,#2              ;1036
0000a0  4308              ORRS     r0,r0,r1              ;1036
0000a2  9001              STR      r0,[sp,#4]            ;1036
0000a4  9801              LDR      r0,[sp,#4]            ;1039
0000a6  e7cd              B        |L22.68|
;;;1041   
                          ENDP

                  |L22.168|
                          DCD      0x00b71b00
                  |L22.172|
                          DCD      0x0bebc200
                  |L22.176|
                          DCD      0x05f5e100
                  |L22.180|
                          DCD      0x02faf080
                  |L22.184|
                          DCD      0x0000c22e
                  |L22.188|
                          DCD      0x01518000
                  |L22.192|
                          DCD      0x000f4240

                          AREA ||i.DrvSYS_GetResetSource||, CODE, READONLY, ALIGN=1

                  DrvSYS_GetResetSource PROC
;;;128    /*---------------------------------------------------------------------------------------------------------*/
;;;129    uint32_t DrvSYS_GetResetSource(void)
000000  2005              MOVS     r0,#5
;;;130    {
;;;131        return *((__IO uint32_t *) &SYS->RSTSRC);
000002  0700              LSLS     r0,r0,#28
000004  6840              LDR      r0,[r0,#4]
;;;132    }
000006  4770              BX       lr
;;;133    
                          ENDP


                          AREA ||i.DrvSYS_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetVersion PROC
;;;31     /*---------------------------------------------------------------------------------------------------------*/
;;;32     uint32_t DrvSYS_GetVersion(void)
000000  4800              LDR      r0,|L24.4|
;;;33     {
;;;34         return DRVSYS_VERSION_NUM;
;;;35     }
000002  4770              BX       lr
;;;36     
                          ENDP

                  |L24.4|
                          DCD      0x00010203

                          AREA ||i.DrvSYS_IsProtectedRegLocked||, CODE, READONLY, ALIGN=2

                  DrvSYS_IsProtectedRegLocked PROC
;;;111    /*---------------------------------------------------------------------------------------------------------*/
;;;112    int32_t DrvSYS_IsProtectedRegLocked(void)
000000  4802              LDR      r0,|L25.12|
;;;113    {
;;;114        return (SYS->REGWRPROT & 0x01);
000002  6800              LDR      r0,[r0,#0]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
;;;115    }
000008  4770              BX       lr
;;;116    
                          ENDP

00000a  0000              DCW      0x0000
                  |L25.12|
                          DCD      0x50000100

                          AREA ||i.DrvSYS_LockProtectedReg||, CODE, READONLY, ALIGN=2

                  DrvSYS_LockProtectedReg PROC
;;;89     /*---------------------------------------------------------------------------------------------------------*/
;;;90     int32_t DrvSYS_LockProtectedReg(void)
000000  2000              MOVS     r0,#0
;;;91     {
;;;92         uint32_t lockbit;
;;;93         
;;;94         SYS->REGWRPROT = 0x00;
000002  4a06              LDR      r2,|L26.28|
000004  6010              STR      r0,[r2,#0]
;;;95     
;;;96         lockbit = SYS->REGWRPROT & 0x01;
000006  4610              MOV      r0,r2
000008  6800              LDR      r0,[r0,#0]
00000a  07c1              LSLS     r1,r0,#31
00000c  0fc9              LSRS     r1,r1,#31
;;;97         return (lockbit)? E_DRVSYS_ERR_LOCK_FAIL : 0;
00000e  2900              CMP      r1,#0
000010  d001              BEQ      |L26.22|
000012  4803              LDR      r0,|L26.32|
                  |L26.20|
;;;98     }
000014  4770              BX       lr
                  |L26.22|
000016  2000              MOVS     r0,#0                 ;97
000018  e7fc              B        |L26.20|
;;;99     
                          ENDP

00001a  0000              DCW      0x0000
                  |L26.28|
                          DCD      0x50000100
                  |L26.32|
                          DCD      0xffff9602

                          AREA ||i.DrvSYS_Open||, CODE, READONLY, ALIGN=2

                  DrvSYS_Open PROC
;;;1166   /*---------------------------------------------------------------------------------------------------------*/
;;;1167   int32_t DrvSYS_Open(uint32_t u32Hclk)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1168   {
000002  4604              MOV      r4,r0
;;;1169       uint32_t u32PllCr;  
;;;1170       volatile uint32_t delayCnt;
;;;1171       E_SYS_PLL_CLKSRC ePllSrc = E_SYS_EXTERNAL_12M;
000004  2500              MOVS     r5,#0
;;;1172   
;;;1173       if ( (u32Hclk > FREQ_50MHZ) || (u32Hclk < FREQ_25MHZ) )
000006  482a              LDR      r0,|L27.176|
000008  4284              CMP      r4,r0
00000a  d802              BHI      |L27.18|
00000c  1040              ASRS     r0,r0,#1
00000e  4284              CMP      r4,r0
000010  d201              BCS      |L27.22|
                  |L27.18|
;;;1174       {
;;;1175           return E_DRVSYS_ERR_OUT_OF_RANGE;
000012  4828              LDR      r0,|L27.180|
                  |L27.20|
;;;1176       }
;;;1177           
;;;1178       /* Check the status of Register Write-Protection Function */
;;;1179       if (DrvSYS_IsProtectedRegLocked() == 0)
;;;1180       {
;;;1181           return E_DRVSYS_ERR_REG_PROTECTED;
;;;1182       }
;;;1183       
;;;1184       if (SYSCLK->PLLCON.PLL_SRC == 0)
;;;1185       {
;;;1186           SYSCLK->PWRCON.XTL12M_EN = 1;
;;;1187           ePllSrc = E_SYS_EXTERNAL_12M;
;;;1188       }
;;;1189       else
;;;1190       {
;;;1191           SYSCLK->PWRCON.OSC22M_EN = 1;
;;;1192           ePllSrc = E_SYS_INTERNAL_22M;
;;;1193       }
;;;1194   
;;;1195       u32PllCr = DrvSYS_GetPLLContent(ePllSrc, u32Hclk);
;;;1196       
;;;1197       /*Delay for 12M or 22M stable*/
;;;1198       for (delayCnt=0;delayCnt<10000;delayCnt++);
;;;1199   
;;;1200       DrvSYS_SetPLLContent(u32PllCr);
;;;1201       SYSCLK->PLLCON.OE     = 0;
;;;1202       SYSCLK->PLLCON.PD     = 0;
;;;1203       
;;;1204       /*Delay for PLL stable*/
;;;1205       for (delayCnt=0;delayCnt<10000;delayCnt++);
;;;1206   
;;;1207       /* Change HCLK clock source to be PLL. */
;;;1208       DrvSYS_SelectHCLKSource(2);
;;;1209       
;;;1210       return E_SUCCESS;
;;;1211   }
000014  bdf8              POP      {r3-r7,pc}
                  |L27.22|
000016  f7fffffe          BL       DrvSYS_IsProtectedRegLocked
00001a  2800              CMP      r0,#0                 ;1179
00001c  d102              BNE      |L27.36|
00001e  4825              LDR      r0,|L27.180|
000020  1c40              ADDS     r0,r0,#1              ;1181
000022  e7f7              B        |L27.20|
                  |L27.36|
000024  4824              LDR      r0,|L27.184|
000026  6a00              LDR      r0,[r0,#0x20]         ;1184
000028  0300              LSLS     r0,r0,#12             ;1184
00002a  0fc0              LSRS     r0,r0,#31             ;1184
00002c  2800              CMP      r0,#0                 ;1184
00002e  d108              BNE      |L27.66|
000030  4821              LDR      r0,|L27.184|
000032  6800              LDR      r0,[r0,#0]            ;1186
000034  0840              LSRS     r0,r0,#1              ;1186
000036  0040              LSLS     r0,r0,#1              ;1186
000038  1c40              ADDS     r0,r0,#1              ;1186
00003a  491f              LDR      r1,|L27.184|
00003c  6008              STR      r0,[r1,#0]            ;1186
00003e  2500              MOVS     r5,#0                 ;1187
000040  e007              B        |L27.82|
                  |L27.66|
000042  481d              LDR      r0,|L27.184|
000044  6800              LDR      r0,[r0,#0]            ;1191
000046  2104              MOVS     r1,#4                 ;1191
000048  4388              BICS     r0,r0,r1              ;1191
00004a  1d00              ADDS     r0,r0,#4              ;1191
00004c  491a              LDR      r1,|L27.184|
00004e  6008              STR      r0,[r1,#0]            ;1191
000050  2501              MOVS     r5,#1                 ;1192
                  |L27.82|
000052  4621              MOV      r1,r4                 ;1195
000054  4628              MOV      r0,r5                 ;1195
000056  f7fffffe          BL       DrvSYS_GetPLLContent
00005a  4606              MOV      r6,r0                 ;1195
00005c  2000              MOVS     r0,#0                 ;1198
00005e  9000              STR      r0,[sp,#0]            ;1198
000060  e002              B        |L27.104|
                  |L27.98|
000062  9800              LDR      r0,[sp,#0]            ;1198
000064  1c40              ADDS     r0,r0,#1              ;1198
000066  9000              STR      r0,[sp,#0]            ;1198
                  |L27.104|
000068  4914              LDR      r1,|L27.188|
00006a  9800              LDR      r0,[sp,#0]            ;1198
00006c  4288              CMP      r0,r1                 ;1198
00006e  d3f8              BCC      |L27.98|
000070  4630              MOV      r0,r6                 ;1200
000072  f7fffffe          BL       DrvSYS_SetPLLContent
000076  4810              LDR      r0,|L27.184|
000078  6a00              LDR      r0,[r0,#0x20]         ;1201
00007a  2101              MOVS     r1,#1                 ;1201
00007c  0489              LSLS     r1,r1,#18             ;1201
00007e  4388              BICS     r0,r0,r1              ;1201
000080  490d              LDR      r1,|L27.184|
000082  6208              STR      r0,[r1,#0x20]         ;1201
000084  4608              MOV      r0,r1                 ;1202
000086  6a00              LDR      r0,[r0,#0x20]         ;1202
000088  01c9              LSLS     r1,r1,#7              ;1202
00008a  4388              BICS     r0,r0,r1              ;1202
00008c  490a              LDR      r1,|L27.184|
00008e  6208              STR      r0,[r1,#0x20]         ;1202
000090  2000              MOVS     r0,#0                 ;1205
000092  9000              STR      r0,[sp,#0]            ;1205
000094  e002              B        |L27.156|
                  |L27.150|
000096  9800              LDR      r0,[sp,#0]            ;1205
000098  1c40              ADDS     r0,r0,#1              ;1205
00009a  9000              STR      r0,[sp,#0]            ;1205
                  |L27.156|
00009c  4907              LDR      r1,|L27.188|
00009e  9800              LDR      r0,[sp,#0]            ;1205
0000a0  4288              CMP      r0,r1                 ;1205
0000a2  d3f8              BCC      |L27.150|
0000a4  2002              MOVS     r0,#2                 ;1208
0000a6  f7fffffe          BL       DrvSYS_SelectHCLKSource
0000aa  2000              MOVS     r0,#0                 ;1210
0000ac  e7b2              B        |L27.20|
;;;1212   
                          ENDP

0000ae  0000              DCW      0x0000
                  |L27.176|
                          DCD      0x02faf080
                  |L27.180|
                          DCD      0xffff9606
                  |L27.184|
                          DCD      0x50000200
                  |L27.188|
                          DCD      0x00002710

                          AREA ||i.DrvSYS_ReadProductID||, CODE, READONLY, ALIGN=1

                  DrvSYS_ReadProductID PROC
;;;47     /*---------------------------------------------------------------------------------------------------------*/
;;;48     uint32_t DrvSYS_ReadProductID(void)
000000  2005              MOVS     r0,#5
;;;49     {   
;;;50         return SYS->PDID;
000002  0700              LSLS     r0,r0,#28
000004  6800              LDR      r0,[r0,#0]
;;;51     }
000006  4770              BX       lr
;;;52     
                          ENDP


                          AREA ||i.DrvSYS_ResetCPU||, CODE, READONLY, ALIGN=1

                  DrvSYS_ResetCPU PROC
;;;213    /*---------------------------------------------------------------------------------------------------------*/
;;;214    void DrvSYS_ResetCPU(void)
000000  2005              MOVS     r0,#5
;;;215    {
;;;216        SYS->IPRSTC1.CPU_RST = 1;
000002  0700              LSLS     r0,r0,#28
000004  6880              LDR      r0,[r0,#8]
000006  2102              MOVS     r1,#2
000008  4388              BICS     r0,r0,r1
00000a  1c80              ADDS     r0,r0,#2
00000c  2105              MOVS     r1,#5
00000e  0709              LSLS     r1,r1,#28
000010  6088              STR      r0,[r1,#8]
;;;217    }
000012  4770              BX       lr
;;;218    
                          ENDP


                          AREA ||i.DrvSYS_ResetChip||, CODE, READONLY, ALIGN=1

                  DrvSYS_ResetChip PROC
;;;236    /*---------------------------------------------------------------------------------------------------------*/
;;;237    void DrvSYS_ResetChip(void)
000000  2005              MOVS     r0,#5
;;;238    {
;;;239        SYS->IPRSTC1.CHIP_RST = 1;
000002  0700              LSLS     r0,r0,#28
000004  6880              LDR      r0,[r0,#8]
000006  0840              LSRS     r0,r0,#1
000008  0040              LSLS     r0,r0,#1
00000a  1c40              ADDS     r0,r0,#1
00000c  2105              MOVS     r1,#5
00000e  0709              LSLS     r1,r1,#28
000010  6088              STR      r0,[r1,#8]
;;;240    }
000012  4770              BX       lr
;;;241    
                          ENDP


                          AREA ||i.DrvSYS_ResetIP||, CODE, READONLY, ALIGN=1

                  DrvSYS_ResetIP PROC
;;;173    /*---------------------------------------------------------------------------------------------------------*/
;;;174    void DrvSYS_ResetIP(E_SYS_IP_RST eIpRst)
000000  2820              CMP      r0,#0x20
;;;175    {   
;;;176        uint32_t u32Reg;
;;;177    
;;;178        if (eIpRst == E_SYS_PDMA_RST)
000002  d110              BNE      |L31.38|
;;;179        {
;;;180            SYS->IPRSTC1.PDMA_RST = 1;
000004  2205              MOVS     r2,#5
000006  0712              LSLS     r2,r2,#28
000008  6892              LDR      r2,[r2,#8]
00000a  2304              MOVS     r3,#4
00000c  439a              BICS     r2,r2,r3
00000e  1d12              ADDS     r2,r2,#4
000010  2305              MOVS     r3,#5
000012  071b              LSLS     r3,r3,#28
000014  609a              STR      r2,[r3,#8]
;;;181            SYS->IPRSTC1.PDMA_RST = 0;
000016  461a              MOV      r2,r3
000018  6892              LDR      r2,[r2,#8]
00001a  2304              MOVS     r3,#4
00001c  439a              BICS     r2,r2,r3
00001e  2305              MOVS     r3,#5
000020  071b              LSLS     r3,r3,#28
000022  609a              STR      r2,[r3,#8]
000024  e022              B        |L31.108|
                  |L31.38|
;;;182        }
;;;183        else if (eIpRst == E_SYS_EBI_RST)
000026  2821              CMP      r0,#0x21
000028  d110              BNE      |L31.76|
;;;184        {
;;;185            SYS->IPRSTC1.EBI_RST = 1;
00002a  2205              MOVS     r2,#5
00002c  0712              LSLS     r2,r2,#28
00002e  6892              LDR      r2,[r2,#8]
000030  2308              MOVS     r3,#8
000032  439a              BICS     r2,r2,r3
000034  3208              ADDS     r2,r2,#8
000036  2305              MOVS     r3,#5
000038  071b              LSLS     r3,r3,#28
00003a  609a              STR      r2,[r3,#8]
;;;186            SYS->IPRSTC1.EBI_RST = 0;   
00003c  461a              MOV      r2,r3
00003e  6892              LDR      r2,[r2,#8]
000040  2308              MOVS     r3,#8
000042  439a              BICS     r2,r2,r3
000044  2305              MOVS     r3,#5
000046  071b              LSLS     r3,r3,#28
000048  609a              STR      r2,[r3,#8]
00004a  e00f              B        |L31.108|
                  |L31.76|
;;;187        }
;;;188        else
;;;189        {
;;;190            u32Reg = *((__IO uint32_t *) &SYS->IPRSTC2);
00004c  2205              MOVS     r2,#5
00004e  0712              LSLS     r2,r2,#28
000050  68d1              LDR      r1,[r2,#0xc]
;;;191            *((__IO uint32_t *) &SYS->IPRSTC2) = u32Reg | (1<<eIpRst);
000052  2201              MOVS     r2,#1
000054  4082              LSLS     r2,r2,r0
000056  430a              ORRS     r2,r2,r1
000058  2305              MOVS     r3,#5
00005a  071b              LSLS     r3,r3,#28
00005c  60da              STR      r2,[r3,#0xc]
;;;192            *((__IO uint32_t *) &SYS->IPRSTC2) = u32Reg & ~(1<<eIpRst);
00005e  2201              MOVS     r2,#1
000060  4082              LSLS     r2,r2,r0
000062  460b              MOV      r3,r1
000064  4393              BICS     r3,r3,r2
000066  2205              MOVS     r2,#5
000068  0712              LSLS     r2,r2,#28
00006a  60d3              STR      r3,[r2,#0xc]
                  |L31.108|
;;;193        }
;;;194    }
00006c  4770              BX       lr
;;;195    
                          ENDP


                          AREA ||i.DrvSYS_SelectBODVolt||, CODE, READONLY, ALIGN=1

                  DrvSYS_SelectBODVolt PROC
;;;260    /*---------------------------------------------------------------------------------------------------------*/
;;;261    void DrvSYS_SelectBODVolt(uint8_t u8Volt)
000000  2105              MOVS     r1,#5
;;;262    {
;;;263        SYS->BODCR.BOD_VL = u8Volt;
000002  0709              LSLS     r1,r1,#28
000004  6989              LDR      r1,[r1,#0x18]
000006  2206              MOVS     r2,#6
000008  4391              BICS     r1,r1,r2
00000a  0042              LSLS     r2,r0,#1
00000c  2306              MOVS     r3,#6
00000e  401a              ANDS     r2,r2,r3
000010  4311              ORRS     r1,r1,r2
000012  2205              MOVS     r2,#5
000014  0712              LSLS     r2,r2,#28
000016  6191              STR      r1,[r2,#0x18]
;;;264    }
000018  4770              BX       lr
;;;265    
                          ENDP


                          AREA ||i.DrvSYS_SelectHCLKSource||, CODE, READONLY, ALIGN=2

                  DrvSYS_SelectHCLKSource PROC
;;;597    /*---------------------------------------------------------------------------------------------------------*/
;;;598    int32_t DrvSYS_SelectHCLKSource(uint8_t u8ClkSrcSel)
000000  b510              PUSH     {r4,lr}
;;;599    {
000002  4604              MOV      r4,r0
;;;600        if ((u8ClkSrcSel > 7) || ((u8ClkSrcSel > 3) && (u8ClkSrcSel < 7)))
000004  2c07              CMP      r4,#7
000006  dc03              BGT      |L33.16|
000008  2c03              CMP      r4,#3
00000a  dd03              BLE      |L33.20|
00000c  2c07              CMP      r4,#7
00000e  da01              BGE      |L33.20|
                  |L33.16|
;;;601        {
;;;602            return E_DRVSYS_ERR_ARGUMENT;
000010  4807              LDR      r0,|L33.48|
                  |L33.18|
;;;603        }
;;;604        else
;;;605        {
;;;606            SYSCLK->CLKSEL0.HCLK_S = u8ClkSrcSel;
;;;607        }
;;;608        
;;;609        SystemCoreClockUpdate();
;;;610        
;;;611        return 0;
;;;612    }
000012  bd10              POP      {r4,pc}
                  |L33.20|
000014  4807              LDR      r0,|L33.52|
000016  6900              LDR      r0,[r0,#0x10]         ;606
000018  08c0              LSRS     r0,r0,#3              ;606
00001a  00c0              LSLS     r0,r0,#3              ;606
00001c  0761              LSLS     r1,r4,#29             ;606
00001e  0f49              LSRS     r1,r1,#29             ;606
000020  4308              ORRS     r0,r0,r1              ;606
000022  4904              LDR      r1,|L33.52|
000024  6108              STR      r0,[r1,#0x10]         ;606
000026  f7fffffe          BL       SystemCoreClockUpdate
00002a  2000              MOVS     r0,#0                 ;611
00002c  e7f1              B        |L33.18|
;;;613    
                          ENDP

00002e  0000              DCW      0x0000
                  |L33.48|
                          DCD      0xffff9603
                  |L33.52|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SelectIPClockSource||, CODE, READONLY, ALIGN=2

                  DrvSYS_SelectIPClockSource PROC
;;;696    /*---------------------------------------------------------------------------------------------------------*/
;;;697    int32_t DrvSYS_SelectIPClockSource(E_SYS_IP_CLKSRC eIpClkSrc, uint8_t u8ClkSrcSel)
000000  b510              PUSH     {r4,lr}
;;;698    {
000002  4602              MOV      r2,r0
;;;699        
;;;700        switch(eIpClkSrc)
000004  0013              MOVS     r3,r2
000006  f7fffffe          BL       __ARM_common_switch8
00000a  0d97              DCB      0x0d,0x97
00000c  8c7f7265          DCB      0x8c,0x7f,0x72,0x65
000010  584b3e33          DCB      0x58,0x4b,0x3e,0x33
000014  1308281d          DCB      0x13,0x08,0x28,0x1d
000018  a100              DCB      0xa1,0x00
;;;701        {
;;;702            case E_SYS_FRQDIV_CLKSRC:  
;;;703                SYSCLK->CLKSEL2.FRQDIV_S = u8ClkSrcSel;
00001a  484f              LDR      r0,|L34.344|
00001c  69c0              LDR      r0,[r0,#0x1c]
00001e  230c              MOVS     r3,#0xc
000020  4398              BICS     r0,r0,r3
000022  008b              LSLS     r3,r1,#2
000024  240c              MOVS     r4,#0xc
000026  4023              ANDS     r3,r3,r4
000028  4318              ORRS     r0,r0,r3
00002a  4b4b              LDR      r3,|L34.344|
00002c  61d8              STR      r0,[r3,#0x1c]
;;;704                break;
00002e  e08f              B        |L34.336|
;;;705            case E_SYS_I2S_CLKSRC:
;;;706                SYSCLK->CLKSEL2.I2S_S = u8ClkSrcSel;
000030  4849              LDR      r0,|L34.344|
000032  69c0              LDR      r0,[r0,#0x1c]
000034  0880              LSRS     r0,r0,#2
000036  0080              LSLS     r0,r0,#2
000038  078b              LSLS     r3,r1,#30
00003a  0f9b              LSRS     r3,r3,#30
00003c  4318              ORRS     r0,r0,r3
00003e  4b46              LDR      r3,|L34.344|
000040  61d8              STR      r0,[r3,#0x1c]
;;;707                break;
000042  e085              B        |L34.336|
;;;708            case E_SYS_PWM67_CLKSRC:  
;;;709                SYSCLK->CLKSEL2.PWM67_S = u8ClkSrcSel;
000044  4844              LDR      r0,|L34.344|
000046  69c0              LDR      r0,[r0,#0x1c]
000048  23c0              MOVS     r3,#0xc0
00004a  4398              BICS     r0,r0,r3
00004c  018b              LSLS     r3,r1,#6
00004e  24c0              MOVS     r4,#0xc0
000050  4023              ANDS     r3,r3,r4
000052  4318              ORRS     r0,r0,r3
000054  4b40              LDR      r3,|L34.344|
000056  61d8              STR      r0,[r3,#0x1c]
;;;710                break;
000058  e07a              B        |L34.336|
;;;711            case E_SYS_PWM45_CLKSRC:
;;;712                SYSCLK->CLKSEL2.PWM45_S = u8ClkSrcSel;
00005a  483f              LDR      r0,|L34.344|
00005c  69c0              LDR      r0,[r0,#0x1c]
00005e  2330              MOVS     r3,#0x30
000060  4398              BICS     r0,r0,r3
000062  010b              LSLS     r3,r1,#4
000064  2430              MOVS     r4,#0x30
000066  4023              ANDS     r3,r3,r4
000068  4318              ORRS     r0,r0,r3
00006a  4b3b              LDR      r3,|L34.344|
00006c  61d8              STR      r0,[r3,#0x1c]
;;;713                break;
00006e  e06f              B        |L34.336|
;;;714            case E_SYS_PWM23_CLKSRC:  
;;;715                SYSCLK->CLKSEL1.PWM23_S = u8ClkSrcSel;
000070  4839              LDR      r0,|L34.344|
000072  6940              LDR      r0,[r0,#0x14]
000074  0080              LSLS     r0,r0,#2
000076  0880              LSRS     r0,r0,#2
000078  078b              LSLS     r3,r1,#30
00007a  0f9b              LSRS     r3,r3,#30
00007c  079b              LSLS     r3,r3,#30
00007e  4318              ORRS     r0,r0,r3
000080  4b35              LDR      r3,|L34.344|
000082  6158              STR      r0,[r3,#0x14]
;;;716                break;
000084  e064              B        |L34.336|
;;;717            case E_SYS_PWM01_CLKSRC:
;;;718                SYSCLK->CLKSEL1.PWM01_S = u8ClkSrcSel;
000086  4834              LDR      r0,|L34.344|
000088  6940              LDR      r0,[r0,#0x14]
00008a  2303              MOVS     r3,#3
00008c  071b              LSLS     r3,r3,#28
00008e  4398              BICS     r0,r0,r3
000090  070b              LSLS     r3,r1,#28
000092  2403              MOVS     r4,#3
000094  0724              LSLS     r4,r4,#28
000096  4023              ANDS     r3,r3,r4
000098  4318              ORRS     r0,r0,r3
00009a  4b2f              LDR      r3,|L34.344|
00009c  6158              STR      r0,[r3,#0x14]
;;;719                break;
00009e  e057              B        |L34.336|
;;;720            case E_SYS_UART_CLKSRC:
;;;721                SYSCLK->CLKSEL1.UART_S = u8ClkSrcSel;
0000a0  482d              LDR      r0,|L34.344|
0000a2  6940              LDR      r0,[r0,#0x14]
0000a4  2303              MOVS     r3,#3
0000a6  061b              LSLS     r3,r3,#24
0000a8  4398              BICS     r0,r0,r3
0000aa  060b              LSLS     r3,r1,#24
0000ac  2403              MOVS     r4,#3
0000ae  0624              LSLS     r4,r4,#24
0000b0  4023              ANDS     r3,r3,r4
0000b2  4318              ORRS     r0,r0,r3
0000b4  4b28              LDR      r3,|L34.344|
0000b6  6158              STR      r0,[r3,#0x14]
;;;722                break;
0000b8  e04a              B        |L34.336|
;;;723            case E_SYS_TMR3_CLKSRC:
;;;724                SYSCLK->CLKSEL1.TMR3_S = u8ClkSrcSel;
0000ba  4827              LDR      r0,|L34.344|
0000bc  6940              LDR      r0,[r0,#0x14]
0000be  2307              MOVS     r3,#7
0000c0  051b              LSLS     r3,r3,#20
0000c2  4398              BICS     r0,r0,r3
0000c4  050b              LSLS     r3,r1,#20
0000c6  2407              MOVS     r4,#7
0000c8  0524              LSLS     r4,r4,#20
0000ca  4023              ANDS     r3,r3,r4
0000cc  4318              ORRS     r0,r0,r3
0000ce  4b22              LDR      r3,|L34.344|
0000d0  6158              STR      r0,[r3,#0x14]
;;;725                break;
0000d2  e03d              B        |L34.336|
;;;726            case E_SYS_TMR2_CLKSRC:
;;;727                SYSCLK->CLKSEL1.TMR2_S = u8ClkSrcSel;
0000d4  4820              LDR      r0,|L34.344|
0000d6  6940              LDR      r0,[r0,#0x14]
0000d8  2307              MOVS     r3,#7
0000da  041b              LSLS     r3,r3,#16
0000dc  4398              BICS     r0,r0,r3
0000de  040b              LSLS     r3,r1,#16
0000e0  2407              MOVS     r4,#7
0000e2  0424              LSLS     r4,r4,#16
0000e4  4023              ANDS     r3,r3,r4
0000e6  4318              ORRS     r0,r0,r3
0000e8  4b1b              LDR      r3,|L34.344|
0000ea  6158              STR      r0,[r3,#0x14]
;;;728                break;
0000ec  e030              B        |L34.336|
;;;729            case E_SYS_TMR1_CLKSRC:
;;;730                SYSCLK->CLKSEL1.TMR1_S = u8ClkSrcSel;
0000ee  481a              LDR      r0,|L34.344|
0000f0  6940              LDR      r0,[r0,#0x14]
0000f2  2307              MOVS     r3,#7
0000f4  031b              LSLS     r3,r3,#12
0000f6  4398              BICS     r0,r0,r3
0000f8  030b              LSLS     r3,r1,#12
0000fa  2407              MOVS     r4,#7
0000fc  0324              LSLS     r4,r4,#12
0000fe  4023              ANDS     r3,r3,r4
000100  4318              ORRS     r0,r0,r3
000102  4b15              LDR      r3,|L34.344|
000104  6158              STR      r0,[r3,#0x14]
;;;731                break;
000106  e023              B        |L34.336|
;;;732            case E_SYS_TMR0_CLKSRC:
;;;733                SYSCLK->CLKSEL1.TMR0_S = u8ClkSrcSel;
000108  4813              LDR      r0,|L34.344|
00010a  6940              LDR      r0,[r0,#0x14]
00010c  2307              MOVS     r3,#7
00010e  021b              LSLS     r3,r3,#8
000110  4398              BICS     r0,r0,r3
000112  020b              LSLS     r3,r1,#8
000114  2407              MOVS     r4,#7
000116  0224              LSLS     r4,r4,#8
000118  4023              ANDS     r3,r3,r4
00011a  4318              ORRS     r0,r0,r3
00011c  4b0e              LDR      r3,|L34.344|
00011e  6158              STR      r0,[r3,#0x14]
;;;734                break;
000120  e016              B        |L34.336|
;;;735            case E_SYS_ADC_CLKSRC:
;;;736                SYSCLK->CLKSEL1.ADC_S = u8ClkSrcSel;
000122  480d              LDR      r0,|L34.344|
000124  6940              LDR      r0,[r0,#0x14]
000126  230c              MOVS     r3,#0xc
000128  4398              BICS     r0,r0,r3
00012a  008b              LSLS     r3,r1,#2
00012c  240c              MOVS     r4,#0xc
00012e  4023              ANDS     r3,r3,r4
000130  4318              ORRS     r0,r0,r3
000132  4b09              LDR      r3,|L34.344|
000134  6158              STR      r0,[r3,#0x14]
;;;737                break;
000136  e00b              B        |L34.336|
;;;738            case E_SYS_WDT_CLKSRC:
;;;739                SYSCLK->CLKSEL1.WDT_S = u8ClkSrcSel;
000138  4807              LDR      r0,|L34.344|
00013a  6940              LDR      r0,[r0,#0x14]
00013c  0880              LSRS     r0,r0,#2
00013e  0080              LSLS     r0,r0,#2
000140  078b              LSLS     r3,r1,#30
000142  0f9b              LSRS     r3,r3,#30
000144  4318              ORRS     r0,r0,r3
000146  4b04              LDR      r3,|L34.344|
000148  6158              STR      r0,[r3,#0x14]
;;;740                break;
00014a  e001              B        |L34.336|
;;;741            default:
;;;742                return E_DRVSYS_ERR_IPSRC;
00014c  4803              LDR      r0,|L34.348|
                  |L34.334|
;;;743        }
;;;744        
;;;745        return E_SUCCESS;
;;;746    }
00014e  bd10              POP      {r4,pc}
                  |L34.336|
000150  bf00              NOP                            ;704
000152  2000              MOVS     r0,#0                 ;745
000154  e7fb              B        |L34.334|
;;;747    
                          ENDP

000156  0000              DCW      0x0000
                  |L34.344|
                          DCD      0x50000200
                  |L34.348|
                          DCD      0xffff9604

                          AREA ||i.DrvSYS_SelectPLLSource||, CODE, READONLY, ALIGN=2

                  DrvSYS_SelectPLLSource PROC
;;;932    /*---------------------------------------------------------------------------------------------------------*/
;;;933    void DrvSYS_SelectPLLSource(E_SYS_PLL_CLKSRC ePllSrc)
000000  4906              LDR      r1,|L35.28|
;;;934    {
;;;935        SYSCLK->PLLCON.PLL_SRC = ePllSrc;
000002  6a09              LDR      r1,[r1,#0x20]
000004  2201              MOVS     r2,#1
000006  04d2              LSLS     r2,r2,#19
000008  4391              BICS     r1,r1,r2
00000a  04c2              LSLS     r2,r0,#19
00000c  2301              MOVS     r3,#1
00000e  04db              LSLS     r3,r3,#19
000010  401a              ANDS     r2,r2,r3
000012  4311              ORRS     r1,r1,r2
000014  4a01              LDR      r2,|L35.28|
000016  6211              STR      r1,[r2,#0x20]
;;;936    }
000018  4770              BX       lr
;;;937    
                          ENDP

00001a  0000              DCW      0x0000
                  |L35.28|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SelectSysTickSource||, CODE, READONLY, ALIGN=2

                  DrvSYS_SelectSysTickSource PROC
;;;636    /*---------------------------------------------------------------------------------------------------------*/
;;;637    int32_t DrvSYS_SelectSysTickSource(uint8_t u8ClkSrcSel)
000000  4601              MOV      r1,r0
;;;638    {
;;;639        if ((u8ClkSrcSel > 7) || ((u8ClkSrcSel > 3) && (u8ClkSrcSel < 7)))
000002  2907              CMP      r1,#7
000004  dc03              BGT      |L36.14|
000006  2903              CMP      r1,#3
000008  dd03              BLE      |L36.18|
00000a  2907              CMP      r1,#7
00000c  da01              BGE      |L36.18|
                  |L36.14|
;;;640        {
;;;641            return E_DRVSYS_ERR_ARGUMENT;
00000e  4807              LDR      r0,|L36.44|
                  |L36.16|
;;;642        }
;;;643        else
;;;644        {
;;;645            SYSCLK->CLKSEL0.STCLK_S = u8ClkSrcSel;
;;;646        }
;;;647        return 0;
;;;648    }
000010  4770              BX       lr
                  |L36.18|
000012  4807              LDR      r0,|L36.48|
000014  6900              LDR      r0,[r0,#0x10]         ;645
000016  2238              MOVS     r2,#0x38              ;645
000018  4390              BICS     r0,r0,r2              ;645
00001a  00ca              LSLS     r2,r1,#3              ;645
00001c  2338              MOVS     r3,#0x38              ;645
00001e  401a              ANDS     r2,r2,r3              ;645
000020  4310              ORRS     r0,r0,r2              ;645
000022  4a03              LDR      r2,|L36.48|
000024  6110              STR      r0,[r2,#0x10]         ;645
000026  2000              MOVS     r0,#0                 ;647
000028  e7f2              B        |L36.16|
;;;649    
                          ENDP

00002a  0000              DCW      0x0000
                  |L36.44|
                          DCD      0xffff9603
                  |L36.48|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetBODFunction||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetBODFunction PROC
;;;286    /*---------------------------------------------------------------------------------------------------------*/
;;;287    void DrvSYS_SetBODFunction(int32_t i32Enable, int32_t i32Mode, BOD_CALLBACK bodcallbackFn)
000000  b570              PUSH     {r4-r6,lr}
;;;288    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;289        SYS->BODCR.BOD_EN = i32Enable;
000008  2005              MOVS     r0,#5
00000a  0700              LSLS     r0,r0,#28
00000c  6980              LDR      r0,[r0,#0x18]
00000e  0840              LSRS     r0,r0,#1
000010  0040              LSLS     r0,r0,#1
000012  07e1              LSLS     r1,r4,#31
000014  0fc9              LSRS     r1,r1,#31
000016  4308              ORRS     r0,r0,r1
000018  2105              MOVS     r1,#5
00001a  0709              LSLS     r1,r1,#28
00001c  6188              STR      r0,[r1,#0x18]
;;;290    
;;;291        if (i32Enable)
00001e  2c00              CMP      r4,#0
000020  d019              BEQ      |L37.86|
;;;292        {
;;;293            SYS->BODCR.BOD_RSTEN = i32Mode;
000022  4608              MOV      r0,r1
000024  6980              LDR      r0,[r0,#0x18]
000026  2108              MOVS     r1,#8
000028  4388              BICS     r0,r0,r1
00002a  00e9              LSLS     r1,r5,#3
00002c  2208              MOVS     r2,#8
00002e  4011              ANDS     r1,r1,r2
000030  4308              ORRS     r0,r0,r1
000032  2105              MOVS     r1,#5
000034  0709              LSLS     r1,r1,#28
000036  6188              STR      r0,[r1,#0x18]
;;;294        
;;;295            if (i32Mode)
000038  2d00              CMP      r5,#0
00003a  d003              BEQ      |L37.68|
;;;296            {       
;;;297                NVIC_DisableIRQ(BOD_IRQn);
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       NVIC_DisableIRQ
000042  e008              B        |L37.86|
                  |L37.68|
;;;298            }
;;;299            else
;;;300            { 
;;;301                BOD_callbackFn = bodcallbackFn;
000044  4804              LDR      r0,|L37.88|
000046  6006              STR      r6,[r0,#0]  ; BOD_callbackFn
;;;302                NVIC_SetPriority(BOD_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
000048  2102              MOVS     r1,#2
00004a  2000              MOVS     r0,#0
00004c  f7fffffe          BL       NVIC_SetPriority
;;;303                NVIC_EnableIRQ(BOD_IRQn);
000050  2000              MOVS     r0,#0
000052  f7fffffe          BL       NVIC_EnableIRQ
                  |L37.86|
;;;304            }
;;;305        }   
;;;306    }
000056  bd70              POP      {r4-r6,pc}
;;;307    
                          ENDP

                  |L37.88|
                          DCD      BOD_callbackFn

                          AREA ||i.DrvSYS_SetClockDivider||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetClockDivider PROC
;;;762    /*---------------------------------------------------------------------------------------------------------*/
;;;763    int32_t DrvSYS_SetClockDivider(E_SYS_IP_DIV eIpDiv , int32_t i32value)
000000  b570              PUSH     {r4-r6,lr}
;;;764    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;765        if (eIpDiv == E_SYS_ADC_DIV)
000006  2c00              CMP      r4,#0
000008  d10c              BNE      |L38.36|
;;;766        {
;;;767            SYSCLK->CLKDIV.ADC_N = i32value;
00000a  481d              LDR      r0,|L38.128|
00000c  6980              LDR      r0,[r0,#0x18]
00000e  21ff              MOVS     r1,#0xff
000010  0409              LSLS     r1,r1,#16
000012  4388              BICS     r0,r0,r1
000014  0429              LSLS     r1,r5,#16
000016  22ff              MOVS     r2,#0xff
000018  0412              LSLS     r2,r2,#16
00001a  4011              ANDS     r1,r1,r2
00001c  4308              ORRS     r0,r0,r1
00001e  4918              LDR      r1,|L38.128|
000020  6188              STR      r0,[r1,#0x18]
000022  e02b              B        |L38.124|
                  |L38.36|
;;;768        }
;;;769        else if(eIpDiv == E_SYS_UART_DIV)
000024  2c01              CMP      r4,#1
000026  d10c              BNE      |L38.66|
;;;770        {
;;;771            SYSCLK->CLKDIV.UART_N = i32value;
000028  4815              LDR      r0,|L38.128|
00002a  6980              LDR      r0,[r0,#0x18]
00002c  210f              MOVS     r1,#0xf
00002e  0209              LSLS     r1,r1,#8
000030  4388              BICS     r0,r0,r1
000032  0229              LSLS     r1,r5,#8
000034  220f              MOVS     r2,#0xf
000036  0212              LSLS     r2,r2,#8
000038  4011              ANDS     r1,r1,r2
00003a  4308              ORRS     r0,r0,r1
00003c  4910              LDR      r1,|L38.128|
00003e  6188              STR      r0,[r1,#0x18]
000040  e01c              B        |L38.124|
                  |L38.66|
;;;772        }
;;;773        else if(eIpDiv == E_SYS_USB_DIV)
000042  2c02              CMP      r4,#2
000044  d10a              BNE      |L38.92|
;;;774        {
;;;775            SYSCLK->CLKDIV.USB_N = i32value;
000046  480e              LDR      r0,|L38.128|
000048  6980              LDR      r0,[r0,#0x18]
00004a  21f0              MOVS     r1,#0xf0
00004c  4388              BICS     r0,r0,r1
00004e  0129              LSLS     r1,r5,#4
000050  22f0              MOVS     r2,#0xf0
000052  4011              ANDS     r1,r1,r2
000054  4308              ORRS     r0,r0,r1
000056  490a              LDR      r1,|L38.128|
000058  6188              STR      r0,[r1,#0x18]
00005a  e00f              B        |L38.124|
                  |L38.92|
;;;776        }
;;;777        else if(eIpDiv == E_SYS_HCLK_DIV)
00005c  2c03              CMP      r4,#3
00005e  d10b              BNE      |L38.120|
;;;778        {
;;;779            SYSCLK->CLKDIV.HCLK_N = i32value;
000060  4807              LDR      r0,|L38.128|
000062  6980              LDR      r0,[r0,#0x18]
000064  0900              LSRS     r0,r0,#4
000066  0100              LSLS     r0,r0,#4
000068  0729              LSLS     r1,r5,#28
00006a  0f09              LSRS     r1,r1,#28
00006c  4308              ORRS     r0,r0,r1
00006e  4904              LDR      r1,|L38.128|
000070  6188              STR      r0,[r1,#0x18]
;;;780            SystemCoreClockUpdate();
000072  f7fffffe          BL       SystemCoreClockUpdate
000076  e001              B        |L38.124|
                  |L38.120|
;;;781        }
;;;782        else
;;;783            return E_DRVSYS_ERR_IPDIV;
000078  4802              LDR      r0,|L38.132|
                  |L38.122|
;;;784    
;;;785        return E_SUCCESS;
;;;786    }
00007a  bd70              POP      {r4-r6,pc}
                  |L38.124|
00007c  2000              MOVS     r0,#0                 ;785
00007e  e7fc              B        |L38.122|
;;;787    
                          ENDP

                  |L38.128|
                          DCD      0x50000200
                  |L38.132|
                          DCD      0xffff9605

                          AREA ||i.DrvSYS_SetFreqDividerOutput||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetFreqDividerOutput PROC
;;;1229   /*---------------------------------------------------------------------------------------------------------*/
;;;1230   int32_t DrvSYS_SetFreqDividerOutput(int32_t i32Flag, uint8_t u8Divider)
000000  b530              PUSH     {r4,r5,lr}
;;;1231   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1232       if (u8Divider > 15)
000006  2d0f              CMP      r5,#0xf
000008  dd01              BLE      |L39.14|
;;;1233           return E_DRVSYS_ERR_ARGUMENT;
00000a  480e              LDR      r0,|L39.68|
                  |L39.12|
;;;1234   
;;;1235       if (i32Flag)
;;;1236       {
;;;1237           SYSCLK->FRQDIV.FSEL = u8Divider;
;;;1238       }
;;;1239       SYSCLK->FRQDIV.FDIV_EN = i32Flag;
;;;1240       DrvSYS_SetIPClock(E_SYS_FDIV_CLK, i32Flag);
;;;1241   
;;;1242       return E_SUCCESS;
;;;1243   }
00000c  bd30              POP      {r4,r5,pc}
                  |L39.14|
00000e  2c00              CMP      r4,#0                 ;1235
000010  d008              BEQ      |L39.36|
000012  480d              LDR      r0,|L39.72|
000014  6a40              LDR      r0,[r0,#0x24]         ;1237
000016  0900              LSRS     r0,r0,#4              ;1237
000018  0100              LSLS     r0,r0,#4              ;1237
00001a  0729              LSLS     r1,r5,#28             ;1237
00001c  0f09              LSRS     r1,r1,#28             ;1237
00001e  4308              ORRS     r0,r0,r1              ;1237
000020  4909              LDR      r1,|L39.72|
000022  6248              STR      r0,[r1,#0x24]         ;1237
                  |L39.36|
000024  4808              LDR      r0,|L39.72|
000026  6a40              LDR      r0,[r0,#0x24]         ;1239
000028  2110              MOVS     r1,#0x10              ;1239
00002a  4388              BICS     r0,r0,r1              ;1239
00002c  0121              LSLS     r1,r4,#4              ;1239
00002e  2210              MOVS     r2,#0x10              ;1239
000030  4011              ANDS     r1,r1,r2              ;1239
000032  4308              ORRS     r0,r0,r1              ;1239
000034  4904              LDR      r1,|L39.72|
000036  6248              STR      r0,[r1,#0x24]         ;1239
000038  4621              MOV      r1,r4                 ;1240
00003a  2006              MOVS     r0,#6                 ;1240
00003c  f7fffffe          BL       DrvSYS_SetIPClock
000040  2000              MOVS     r0,#0                 ;1242
000042  e7e3              B        |L39.12|
;;;1244   
                          ENDP

                  |L39.68|
                          DCD      0xffff9603
                  |L39.72|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetIPClock||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetIPClock PROC
;;;543    /*---------------------------------------------------------------------------------------------------------*/
;;;544    void DrvSYS_SetIPClock(E_SYS_IP_CLK eIpClk, int32_t i32Enable)
000000  b530              PUSH     {r4,r5,lr}
;;;545    {   
;;;546        uint32_t u32Reg;
;;;547    
;;;548        if (eIpClk == E_SYS_PDMA_CLK)
000002  2821              CMP      r0,#0x21
000004  d10a              BNE      |L40.28|
;;;549        {
;;;550            SYSCLK->AHBCLK.PDMA_EN = i32Enable;
000006  4b1b              LDR      r3,|L40.116|
000008  685b              LDR      r3,[r3,#4]
00000a  2402              MOVS     r4,#2
00000c  43a3              BICS     r3,r3,r4
00000e  004c              LSLS     r4,r1,#1
000010  2502              MOVS     r5,#2
000012  402c              ANDS     r4,r4,r5
000014  4323              ORRS     r3,r3,r4
000016  4c17              LDR      r4,|L40.116|
000018  6063              STR      r3,[r4,#4]
00001a  e029              B        |L40.112|
                  |L40.28|
;;;551        }
;;;552        else if (eIpClk == E_SYS_EBI_CLK)
00001c  2823              CMP      r0,#0x23
00001e  d10a              BNE      |L40.54|
;;;553        {
;;;554            SYSCLK->AHBCLK.EBI_EN = i32Enable;
000020  4b14              LDR      r3,|L40.116|
000022  685b              LDR      r3,[r3,#4]
000024  2408              MOVS     r4,#8
000026  43a3              BICS     r3,r3,r4
000028  00cc              LSLS     r4,r1,#3
00002a  2508              MOVS     r5,#8
00002c  402c              ANDS     r4,r4,r5
00002e  4323              ORRS     r3,r3,r4
000030  4c10              LDR      r4,|L40.116|
000032  6063              STR      r3,[r4,#4]
000034  e01c              B        |L40.112|
                  |L40.54|
;;;555        }
;;;556        else if (eIpClk == E_SYS_ISP_CLK)
000036  2822              CMP      r0,#0x22
000038  d10a              BNE      |L40.80|
;;;557        {
;;;558            SYSCLK->AHBCLK.ISP_EN = i32Enable;
00003a  4b0e              LDR      r3,|L40.116|
00003c  685b              LDR      r3,[r3,#4]
00003e  2404              MOVS     r4,#4
000040  43a3              BICS     r3,r3,r4
000042  008c              LSLS     r4,r1,#2
000044  2504              MOVS     r5,#4
000046  402c              ANDS     r4,r4,r5
000048  4323              ORRS     r3,r3,r4
00004a  4c0a              LDR      r4,|L40.116|
00004c  6063              STR      r3,[r4,#4]
00004e  e00f              B        |L40.112|
                  |L40.80|
;;;559        }
;;;560        else
;;;561        {
;;;562            u32Reg = *((__IO uint32_t *) &SYSCLK->APBCLK);
000050  4b08              LDR      r3,|L40.116|
000052  689a              LDR      r2,[r3,#8]
;;;563            
;;;564            if (i32Enable)
000054  2900              CMP      r1,#0
000056  d005              BEQ      |L40.100|
;;;565            {
;;;566                *((__IO uint32_t *) &SYSCLK->APBCLK) = u32Reg | (1<<eIpClk);
000058  2301              MOVS     r3,#1
00005a  4083              LSLS     r3,r3,r0
00005c  4313              ORRS     r3,r3,r2
00005e  4c05              LDR      r4,|L40.116|
000060  60a3              STR      r3,[r4,#8]
000062  e005              B        |L40.112|
                  |L40.100|
;;;567            }
;;;568            else
;;;569            {
;;;570                *((__IO uint32_t *) &SYSCLK->APBCLK) = u32Reg & ~(1<<eIpClk);
000064  2301              MOVS     r3,#1
000066  4083              LSLS     r3,r3,r0
000068  4614              MOV      r4,r2
00006a  439c              BICS     r4,r4,r3
00006c  4b01              LDR      r3,|L40.116|
00006e  609c              STR      r4,[r3,#8]
                  |L40.112|
;;;571            }
;;;572        }
;;;573    }
000070  bd30              POP      {r4,r5,pc}
;;;574    
                          ENDP

000072  0000              DCW      0x0000
                  |L40.116|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetOscCtrl||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetOscCtrl PROC
;;;808    /*---------------------------------------------------------------------------------------------------------*/
;;;809    int32_t DrvSYS_SetOscCtrl(E_SYS_CHIP_CLKSRC eClkSrc, int32_t i32Enable)
000000  b510              PUSH     {r4,lr}
;;;810    {   
000002  4602              MOV      r2,r0
;;;811        switch(eClkSrc)
000004  2a00              CMP      r2,#0
000006  d006              BEQ      |L41.22|
000008  2a01              CMP      r2,#1
00000a  d00e              BEQ      |L41.42|
00000c  2a02              CMP      r2,#2
00000e  d017              BEQ      |L41.64|
000010  2a03              CMP      r2,#3
000012  d12b              BNE      |L41.108|
000014  e01f              B        |L41.86|
                  |L41.22|
;;;812        {
;;;813            case E_SYS_XTL12M:
;;;814                SYSCLK->PWRCON.XTL12M_EN = i32Enable;
000016  4818              LDR      r0,|L41.120|
000018  6800              LDR      r0,[r0,#0]
00001a  0840              LSRS     r0,r0,#1
00001c  0040              LSLS     r0,r0,#1
00001e  07cb              LSLS     r3,r1,#31
000020  0fdb              LSRS     r3,r3,#31
000022  4318              ORRS     r0,r0,r3
000024  4b14              LDR      r3,|L41.120|
000026  6018              STR      r0,[r3,#0]
;;;815                break;
000028  e022              B        |L41.112|
                  |L41.42|
;;;816            case E_SYS_XTL32K:
;;;817                SYSCLK->PWRCON.XTL32K_EN = i32Enable;
00002a  4813              LDR      r0,|L41.120|
00002c  6800              LDR      r0,[r0,#0]
00002e  2302              MOVS     r3,#2
000030  4398              BICS     r0,r0,r3
000032  004b              LSLS     r3,r1,#1
000034  2402              MOVS     r4,#2
000036  4023              ANDS     r3,r3,r4
000038  4318              ORRS     r0,r0,r3
00003a  4b0f              LDR      r3,|L41.120|
00003c  6018              STR      r0,[r3,#0]
;;;818                break;
00003e  e017              B        |L41.112|
                  |L41.64|
;;;819            case E_SYS_OSC22M:
;;;820                SYSCLK->PWRCON.OSC22M_EN = i32Enable;
000040  480d              LDR      r0,|L41.120|
000042  6800              LDR      r0,[r0,#0]
000044  2304              MOVS     r3,#4
000046  4398              BICS     r0,r0,r3
000048  008b              LSLS     r3,r1,#2
00004a  2404              MOVS     r4,#4
00004c  4023              ANDS     r3,r3,r4
00004e  4318              ORRS     r0,r0,r3
000050  4b09              LDR      r3,|L41.120|
000052  6018              STR      r0,[r3,#0]
;;;821                break;
000054  e00c              B        |L41.112|
                  |L41.86|
;;;822            case E_SYS_OSC10K:
;;;823                SYSCLK->PWRCON.OSC10K_EN = i32Enable;
000056  4808              LDR      r0,|L41.120|
000058  6800              LDR      r0,[r0,#0]
00005a  2308              MOVS     r3,#8
00005c  4398              BICS     r0,r0,r3
00005e  00cb              LSLS     r3,r1,#3
000060  2408              MOVS     r4,#8
000062  4023              ANDS     r3,r3,r4
000064  4318              ORRS     r0,r0,r3
000066  4b04              LDR      r3,|L41.120|
000068  6018              STR      r0,[r3,#0]
;;;824                break;
00006a  e001              B        |L41.112|
                  |L41.108|
;;;825            default:
;;;826                return E_DRVSYS_ERR_ARGUMENT;
00006c  4803              LDR      r0,|L41.124|
                  |L41.110|
;;;827        }
;;;828        
;;;829        return E_SUCCESS;
;;;830    }
00006e  bd10              POP      {r4,pc}
                  |L41.112|
000070  bf00              NOP                            ;815
000072  2000              MOVS     r0,#0                 ;829
000074  e7fb              B        |L41.110|
;;;831    
                          ENDP

000076  0000              DCW      0x0000
                  |L41.120|
                          DCD      0x50000200
                  |L41.124|
                          DCD      0xffff9603

                          AREA ||i.DrvSYS_SetPLLContent||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetPLLContent PROC
;;;1056   /*---------------------------------------------------------------------------------------------------------*/
;;;1057   void DrvSYS_SetPLLContent(uint32_t u32PllContent)
000000  4911              LDR      r1,|L42.72|
;;;1058   {
;;;1059       SYSCLK->PLLCON.FB_DV  = (u32PllContent & 0x01FF);
000002  6a09              LDR      r1,[r1,#0x20]
000004  0a49              LSRS     r1,r1,#9
000006  0249              LSLS     r1,r1,#9
000008  05c2              LSLS     r2,r0,#23
00000a  0dd2              LSRS     r2,r2,#23
00000c  4311              ORRS     r1,r1,r2
00000e  4a0e              LDR      r2,|L42.72|
000010  6211              STR      r1,[r2,#0x20]
;;;1060       SYSCLK->PLLCON.IN_DV  = (u32PllContent >> 9) & 0x1F;
000012  4611              MOV      r1,r2
000014  6a09              LDR      r1,[r1,#0x20]
000016  221f              MOVS     r2,#0x1f
000018  0252              LSLS     r2,r2,#9
00001a  4391              BICS     r1,r1,r2
00001c  0a42              LSRS     r2,r0,#9
00001e  0252              LSLS     r2,r2,#9
000020  231f              MOVS     r3,#0x1f
000022  025b              LSLS     r3,r3,#9
000024  401a              ANDS     r2,r2,r3
000026  4311              ORRS     r1,r1,r2
000028  4a07              LDR      r2,|L42.72|
00002a  6211              STR      r1,[r2,#0x20]
;;;1061       SYSCLK->PLLCON.OUT_DV = (u32PllContent >> 14) & 0x03;
00002c  4611              MOV      r1,r2
00002e  6a09              LDR      r1,[r1,#0x20]
000030  2203              MOVS     r2,#3
000032  0392              LSLS     r2,r2,#14
000034  4391              BICS     r1,r1,r2
000036  0b82              LSRS     r2,r0,#14
000038  0392              LSLS     r2,r2,#14
00003a  2303              MOVS     r3,#3
00003c  039b              LSLS     r3,r3,#14
00003e  401a              ANDS     r2,r2,r3
000040  4311              ORRS     r1,r1,r2
000042  4a01              LDR      r2,|L42.72|
000044  6211              STR      r1,[r2,#0x20]
;;;1062   }
000046  4770              BX       lr
;;;1063   
                          ENDP

                  |L42.72|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetPLLMode||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetPLLMode PROC
;;;949    /*---------------------------------------------------------------------------------------------------------*/
;;;950    void DrvSYS_SetPLLMode(int32_t i32Flag)
000000  490b              LDR      r1,|L43.48|
;;;951    {
;;;952        SYSCLK->PLLCON.OE = i32Flag;
000002  6a09              LDR      r1,[r1,#0x20]
000004  2201              MOVS     r2,#1
000006  0492              LSLS     r2,r2,#18
000008  4391              BICS     r1,r1,r2
00000a  0482              LSLS     r2,r0,#18
00000c  2301              MOVS     r3,#1
00000e  049b              LSLS     r3,r3,#18
000010  401a              ANDS     r2,r2,r3
000012  4311              ORRS     r1,r1,r2
000014  4a06              LDR      r2,|L43.48|
000016  6211              STR      r1,[r2,#0x20]
;;;953        SYSCLK->PLLCON.PD = i32Flag;
000018  4611              MOV      r1,r2
00001a  6a09              LDR      r1,[r1,#0x20]
00001c  01d2              LSLS     r2,r2,#7
00001e  4391              BICS     r1,r1,r2
000020  0402              LSLS     r2,r0,#16
000022  109b              ASRS     r3,r3,#2
000024  401a              ANDS     r2,r2,r3
000026  4311              ORRS     r1,r1,r2
000028  4a01              LDR      r2,|L43.48|
00002a  6211              STR      r1,[r2,#0x20]
;;;954    }
00002c  4770              BX       lr
;;;955    
                          ENDP

00002e  0000              DCW      0x0000
                  |L43.48|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetPowerDownWakeUpInt||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetPowerDownWakeUpInt PROC
;;;874    /*---------------------------------------------------------------------------------------------------------*/
;;;875    void DrvSYS_SetPowerDownWakeUpInt(int32_t i32Enable, PWRWU_CALLBACK pdwucallbackFn, int32_t i32enWUDelay)
000000  b570              PUSH     {r4-r6,lr}
;;;876    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;877        SYSCLK->PWRCON.PD_WU_INT_EN = i32Enable;
000008  4816              LDR      r0,|L44.100|
00000a  6800              LDR      r0,[r0,#0]
00000c  2120              MOVS     r1,#0x20
00000e  4388              BICS     r0,r0,r1
000010  0161              LSLS     r1,r4,#5
000012  2220              MOVS     r2,#0x20
000014  4011              ANDS     r1,r1,r2
000016  4308              ORRS     r0,r0,r1
000018  4912              LDR      r1,|L44.100|
00001a  6008              STR      r0,[r1,#0]
;;;878        
;;;879        if (i32Enable)
00001c  2c00              CMP      r4,#0
00001e  d013              BEQ      |L44.72|
;;;880        {
;;;881            SYSCLK->PWRCON.PD_WU_DLY = i32enWUDelay;
000020  4608              MOV      r0,r1
000022  6800              LDR      r0,[r0,#0]
000024  2110              MOVS     r1,#0x10
000026  4388              BICS     r0,r0,r1
000028  0131              LSLS     r1,r6,#4
00002a  2210              MOVS     r2,#0x10
00002c  4011              ANDS     r1,r1,r2
00002e  4308              ORRS     r0,r0,r1
000030  490c              LDR      r1,|L44.100|
000032  6008              STR      r0,[r1,#0]
;;;882            PWRWU_callbackFn = pdwucallbackFn;
000034  480c              LDR      r0,|L44.104|
000036  6005              STR      r5,[r0,#0]  ; PWRWU_callbackFn
;;;883            NVIC_SetPriority(PWRWU_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
000038  2102              MOVS     r1,#2
00003a  201c              MOVS     r0,#0x1c
00003c  f7fffffe          BL       NVIC_SetPriority
;;;884            NVIC_EnableIRQ(PWRWU_IRQn);
000040  201c              MOVS     r0,#0x1c
000042  f7fffffe          BL       NVIC_EnableIRQ
000046  e00b              B        |L44.96|
                  |L44.72|
;;;885        }
;;;886        else
;;;887        { 
;;;888            SYSCLK->PWRCON.PD_WU_DLY = 0;
000048  4806              LDR      r0,|L44.100|
00004a  6800              LDR      r0,[r0,#0]
00004c  2110              MOVS     r1,#0x10
00004e  4388              BICS     r0,r0,r1
000050  4904              LDR      r1,|L44.100|
000052  6008              STR      r0,[r1,#0]
;;;889            PWRWU_callbackFn = NULL;
000054  2000              MOVS     r0,#0
000056  4904              LDR      r1,|L44.104|
000058  6008              STR      r0,[r1,#0]  ; PWRWU_callbackFn
;;;890            NVIC_DisableIRQ(PWRWU_IRQn);
00005a  201c              MOVS     r0,#0x1c
00005c  f7fffffe          BL       NVIC_DisableIRQ
                  |L44.96|
;;;891        }
;;;892    }
000060  bd70              POP      {r4-r6,pc}
;;;893    
                          ENDP

000062  0000              DCW      0x0000
                  |L44.100|
                          DCD      0x50000200
                  |L44.104|
                          DCD      PWRWU_callbackFn

                          AREA ||i.DrvSYS_UnlockProtectedReg||, CODE, READONLY, ALIGN=2

                  DrvSYS_UnlockProtectedReg PROC
;;;65     /*---------------------------------------------------------------------------------------------------------*/
;;;66     int32_t DrvSYS_UnlockProtectedReg(void)
000000  2059              MOVS     r0,#0x59
;;;67     {
;;;68         uint32_t lockbit;
;;;69         
;;;70         SYS->REGWRPROT = 0x59;
000002  4a08              LDR      r2,|L45.36|
000004  6010              STR      r0,[r2,#0]
;;;71         SYS->REGWRPROT = 0x16;
000006  2016              MOVS     r0,#0x16
000008  6010              STR      r0,[r2,#0]
;;;72         SYS->REGWRPROT = 0x88;
00000a  2088              MOVS     r0,#0x88
00000c  6010              STR      r0,[r2,#0]
;;;73     
;;;74         lockbit = SYS->REGWRPROT & 0x01;
00000e  4610              MOV      r0,r2
000010  6800              LDR      r0,[r0,#0]
000012  07c1              LSLS     r1,r0,#31
000014  0fc9              LSRS     r1,r1,#31
;;;75         return (lockbit)? 0 : E_DRVSYS_ERR_UNLOCK_FAIL;
000016  2900              CMP      r1,#0
000018  d001              BEQ      |L45.30|
00001a  2000              MOVS     r0,#0
                  |L45.28|
;;;76     } 
00001c  4770              BX       lr
                  |L45.30|
00001e  4802              LDR      r0,|L45.40|
000020  e7fc              B        |L45.28|
;;;77      
                          ENDP

000022  0000              DCW      0x0000
                  |L45.36|
                          DCD      0x50000100
                  |L45.40|
                          DCD      0xffff9601

                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_DisableIRQ PROC
;;;809     */
;;;810    static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;811    {
;;;812      NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L46.16|
00000a  6011              STR      r1,[r2,#0]
;;;813    }
00000c  4770              BX       lr
;;;814    
                          ENDP

00000e  0000              DCW      0x0000
                  |L46.16|
                          DCD      0xe000e180

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;796     */
;;;797    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;798    {
;;;799      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L47.16|
00000a  6011              STR      r1,[r2,#0]
;;;800    }
00000c  4770              BX       lr
;;;801    
                          ENDP

00000e  0000              DCW      0x0000
                  |L47.16|
                          DCD      0xe000e100

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;866     */
;;;867    static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;868    {
;;;869      if(IRQn < 0) {
000002  2800              CMP      r0,#0
000004  da19              BGE      |L48.58|
;;;870        SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
000006  4a1a              LDR      r2,|L48.112|
000008  0703              LSLS     r3,r0,#28
00000a  0f1b              LSRS     r3,r3,#28
00000c  3b08              SUBS     r3,r3,#8
00000e  089b              LSRS     r3,r3,#2
000010  009b              LSLS     r3,r3,#2
000012  58d2              LDR      r2,[r2,r3]
000014  0783              LSLS     r3,r0,#30
000016  0edc              LSRS     r4,r3,#27
000018  23ff              MOVS     r3,#0xff
00001a  40a3              LSLS     r3,r3,r4
00001c  439a              BICS     r2,r2,r3
00001e  078b              LSLS     r3,r1,#30
000020  0e1b              LSRS     r3,r3,#24
000022  0784              LSLS     r4,r0,#30
000024  0ee4              LSRS     r4,r4,#27
000026  40a3              LSLS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
00002a  4b11              LDR      r3,|L48.112|
00002c  0704              LSLS     r4,r0,#28
00002e  0f24              LSRS     r4,r4,#28
000030  3c08              SUBS     r4,r4,#8
000032  08a4              LSRS     r4,r4,#2
000034  00a4              LSLS     r4,r4,#2
000036  511a              STR      r2,[r3,r4]
000038  e018              B        |L48.108|
                  |L48.58|
;;;871            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;872      else {
;;;873        NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
00003a  4a0e              LDR      r2,|L48.116|
00003c  2303              MOVS     r3,#3
00003e  021b              LSLS     r3,r3,#8
000040  18d2              ADDS     r2,r2,r3
000042  0883              LSRS     r3,r0,#2
000044  009b              LSLS     r3,r3,#2
000046  58d2              LDR      r2,[r2,r3]
000048  0783              LSLS     r3,r0,#30
00004a  0edc              LSRS     r4,r3,#27
00004c  23ff              MOVS     r3,#0xff
00004e  40a3              LSLS     r3,r3,r4
000050  439a              BICS     r2,r2,r3
000052  078b              LSLS     r3,r1,#30
000054  0e1b              LSRS     r3,r3,#24
000056  0784              LSLS     r4,r0,#30
000058  0ee4              LSRS     r4,r4,#27
00005a  40a3              LSLS     r3,r3,r4
00005c  431a              ORRS     r2,r2,r3
00005e  4b05              LDR      r3,|L48.116|
000060  2403              MOVS     r4,#3
000062  0224              LSLS     r4,r4,#8
000064  191b              ADDS     r3,r3,r4
000066  0884              LSRS     r4,r0,#2
000068  00a4              LSLS     r4,r4,#2
00006a  511a              STR      r2,[r3,r4]
                  |L48.108|
;;;874            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;875    }
00006c  bd10              POP      {r4,pc}
;;;876    
                          ENDP

00006e  0000              DCW      0x0000
                  |L48.112|
                          DCD      0xe000ed1c
                  |L48.116|
                          DCD      0xe000e100

                          AREA ||i.PWRWU_IRQHandler||, CODE, READONLY, ALIGN=2

                  PWRWU_IRQHandler PROC
;;;842    /*---------------------------------------------------------------------------------------------------------*/
;;;843    void PWRWU_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;844    {
;;;845        SYSCLK->PWRCON.PD_WU_STS = 1;
000002  4807              LDR      r0,|L49.32|
000004  6800              LDR      r0,[r0,#0]
000006  2140              MOVS     r1,#0x40
000008  4388              BICS     r0,r0,r1
00000a  3040              ADDS     r0,r0,#0x40
00000c  4904              LDR      r1,|L49.32|
00000e  6008              STR      r0,[r1,#0]
;;;846        if (PWRWU_callbackFn != NULL)
000010  4804              LDR      r0,|L49.36|
000012  6800              LDR      r0,[r0,#0]  ; PWRWU_callbackFn
000014  2800              CMP      r0,#0
000016  d002              BEQ      |L49.30|
;;;847            PWRWU_callbackFn(); 
000018  4802              LDR      r0,|L49.36|
00001a  6800              LDR      r0,[r0,#0]  ; PWRWU_callbackFn
00001c  4780              BLX      r0
                  |L49.30|
;;;848    }
00001e  bd10              POP      {r4,pc}
;;;849    
                          ENDP

                  |L49.32|
                          DCD      0x50000200
                  |L49.36|
                          DCD      PWRWU_callbackFn

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000002
                          DCD      0x00000004

                          AREA ||.data||, DATA, ALIGN=2

                  BOD_callbackFn
                          DCD      0x00000000
                  PWRWU_callbackFn
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L301.24|
                  |L301.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L301.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L301.14|
                          ENDP

