; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\ -I..\ff8\src\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC1xx\Include -I..\..\..\..\Library\Device\Nuvoton\NUC1xx\Source -I..\..\..\..\Library\ -I..\..\..\..\Library\NUC1xx\Include -I..\..\..\..\Library\NUC1xx-LB_002\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Nuvoton\NUC1xx -D__UVISION_VERSION=524 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.Delay||, CODE, READONLY, ALIGN=1

                  Delay PROC
;;;543    
;;;544    void Delay(uint32_t delayCnt)
000000  e001              B        |L1.6|
                  |L1.2|
;;;545    {
;;;546        while(delayCnt--)
;;;547        {
;;;548            __NOP();
000002  bf00              NOP      
;;;549            __NOP();
000004  bf00              NOP      
                  |L1.6|
000006  4601              MOV      r1,r0                 ;546
000008  1e40              SUBS     r0,r0,#1              ;546
00000a  2900              CMP      r1,#0                 ;546
00000c  d1f9              BNE      |L1.2|
;;;550        }
;;;551    }
00000e  4770              BX       lr
;;;552    
                          ENDP


                          AREA ||i.I2C0_Callback_Tx||, CODE, READONLY, ALIGN=2

                  I2C0_Callback_Tx PROC
;;;94     /*---------------------------------------------------------------------------------------------------------*/
;;;95     void I2C0_Callback_Tx(uint32_t status)
000000  b538              PUSH     {r3-r5,lr}
;;;96     {
000002  4604              MOV      r4,r0
;;;97     	if (status == 0x08)						/* START has been transmitted */
000004  2c08              CMP      r4,#8
000006  d10e              BNE      |L2.38|
;;;98     	{
;;;99     		DrvI2C_WriteData(I2C_PORT0, Device_Addr0<<1);
000008  482a              LDR      r0,|L2.180|
00000a  7800              LDRB     r0,[r0,#0]  ; Device_Addr0
00000c  0640              LSLS     r0,r0,#25
00000e  0e01              LSRS     r1,r0,#24
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       DrvI2C_WriteData
;;;100    		DrvI2C_Ctrl(I2C_PORT0, 0, 0, 1, 0);
000016  2000              MOVS     r0,#0
000018  2301              MOVS     r3,#1
00001a  4602              MOV      r2,r0
00001c  4601              MOV      r1,r0
00001e  9000              STR      r0,[sp,#0]
000020  f7fffffe          BL       DrvI2C_Ctrl
000024  e044              B        |L2.176|
                  |L2.38|
;;;101    	}	
;;;102    	else if (status == 0x18)				/* SLA+W has been transmitted and ACK has been received */
000026  2c18              CMP      r4,#0x18
000028  d112              BNE      |L2.80|
;;;103    	{
;;;104    		DrvI2C_WriteData(I2C_PORT0, Tx_Data0[DataCnt0++]);
00002a  4823              LDR      r0,|L2.184|
00002c  7802              LDRB     r2,[r0,#0]  ; DataCnt0
00002e  7800              LDRB     r0,[r0,#0]  ; DataCnt0
000030  1c40              ADDS     r0,r0,#1
000032  4b21              LDR      r3,|L2.184|
000034  7018              STRB     r0,[r3,#0]
000036  4821              LDR      r0,|L2.188|
000038  5c81              LDRB     r1,[r0,r2]
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       DrvI2C_WriteData
;;;105    		DrvI2C_Ctrl(I2C_PORT0, 0, 0, 1, 0);
000040  2000              MOVS     r0,#0
000042  2301              MOVS     r3,#1
000044  4602              MOV      r2,r0
000046  4601              MOV      r1,r0
000048  9000              STR      r0,[sp,#0]
00004a  f7fffffe          BL       DrvI2C_Ctrl
00004e  e02f              B        |L2.176|
                  |L2.80|
;;;106    	}
;;;107    	else if (status == 0x20)				/* SLA+W has been transmitted and NACK has been received */
000050  2c20              CMP      r4,#0x20
000052  d107              BNE      |L2.100|
;;;108    	{
;;;109    		
;;;110    		DrvI2C_Ctrl(I2C_PORT0, 1, 1, 1, 0);
000054  2000              MOVS     r0,#0
000056  2301              MOVS     r3,#1
000058  461a              MOV      r2,r3
00005a  4619              MOV      r1,r3
00005c  9000              STR      r0,[sp,#0]
00005e  f7fffffe          BL       DrvI2C_Ctrl
000062  e025              B        |L2.176|
                  |L2.100|
;;;111    	}	
;;;112    	else if (status == 0x28)				/* DATA has been transmitted and ACK has been received */
000064  2c28              CMP      r4,#0x28
000066  d121              BNE      |L2.172|
;;;113    	{
;;;114    		if (DataCnt0 != 2)
000068  4813              LDR      r0,|L2.184|
00006a  7800              LDRB     r0,[r0,#0]  ; DataCnt0
00006c  2802              CMP      r0,#2
00006e  d012              BEQ      |L2.150|
;;;115    		{
;;;116    			DrvI2C_WriteData(I2C_PORT0, Tx_Data0[DataCnt0++]);
000070  4811              LDR      r0,|L2.184|
000072  7802              LDRB     r2,[r0,#0]  ; DataCnt0
000074  7800              LDRB     r0,[r0,#0]  ; DataCnt0
000076  1c40              ADDS     r0,r0,#1
000078  4b0f              LDR      r3,|L2.184|
00007a  7018              STRB     r0,[r3,#0]
00007c  480f              LDR      r0,|L2.188|
00007e  5c81              LDRB     r1,[r0,r2]
000080  2000              MOVS     r0,#0
000082  f7fffffe          BL       DrvI2C_WriteData
;;;117    			DrvI2C_Ctrl(I2C_PORT0, 0, 0, 1, 0);
000086  2000              MOVS     r0,#0
000088  2301              MOVS     r3,#1
00008a  4602              MOV      r2,r0
00008c  4601              MOV      r1,r0
00008e  9000              STR      r0,[sp,#0]
000090  f7fffffe          BL       DrvI2C_Ctrl
000094  e00c              B        |L2.176|
                  |L2.150|
;;;118    		}
;;;119    		else
;;;120    		{
;;;121    			DrvI2C_Ctrl(I2C_PORT0, 0, 1, 1, 0);
000096  2000              MOVS     r0,#0
000098  2301              MOVS     r3,#1
00009a  461a              MOV      r2,r3
00009c  4601              MOV      r1,r0
00009e  9000              STR      r0,[sp,#0]
0000a0  f7fffffe          BL       DrvI2C_Ctrl
;;;122    			EndFlag0 = 1;
0000a4  2001              MOVS     r0,#1
0000a6  4906              LDR      r1,|L2.192|
0000a8  6008              STR      r0,[r1,#0]  ; EndFlag0
0000aa  e001              B        |L2.176|
                  |L2.172|
;;;123    		}		
;;;124    	}
;;;125    	else
;;;126    	{
;;;127    		while(1);
0000ac  bf00              NOP      
                  |L2.174|
0000ae  e7fe              B        |L2.174|
                  |L2.176|
;;;128    		//printf("Status 0x%x is NOT processed\n", status);
;;;129    	}		
;;;130    }
0000b0  bd38              POP      {r3-r5,pc}
;;;131    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L2.180|
                          DCD      Device_Addr0
                  |L2.184|
                          DCD      DataCnt0
                  |L2.188|
                          DCD      Tx_Data0
                  |L2.192|
                          DCD      EndFlag0

                          AREA ||i.I2C_WriteWAU8822||, CODE, READONLY, ALIGN=2

                  I2C_WriteWAU8822 PROC
;;;149    /*---------------------------------------------------------------------------------------------------------*/
;;;150    static void I2C_WriteWAU8822(uint8_t u8addr, uint16_t u16data)
000000  b538              PUSH     {r3-r5,lr}
;;;151    {		
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;152    	DataCnt0 = 0;
000006  2000              MOVS     r0,#0
000008  490d              LDR      r1,|L3.64|
00000a  7008              STRB     r0,[r1,#0]
;;;153    	EndFlag0 = 0;
00000c  490d              LDR      r1,|L3.68|
00000e  6008              STR      r0,[r1,#0]  ; EndFlag0
;;;154    	
;;;155    	Tx_Data0[0] = (uint8_t)((u8addr << 1) | (u16data >> 8));
000010  0068              LSLS     r0,r5,#1
000012  1221              ASRS     r1,r4,#8
000014  4308              ORRS     r0,r0,r1
000016  490c              LDR      r1,|L3.72|
000018  7008              STRB     r0,[r1,#0]
;;;156    	Tx_Data0[1] = (uint8_t)(u16data & 0x00FF);
00001a  704c              STRB     r4,[r1,#1]
;;;157    
;;;158    	/* Install I2C0 call back function for write data to slave */
;;;159    	DrvI2C_InstallCallback(I2C_PORT0, I2CFUNC, I2C0_Callback_Tx);
00001c  4a0b              LDR      r2,|L3.76|
00001e  2100              MOVS     r1,#0
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       DrvI2C_InstallCallback
;;;160    		
;;;161    	/* I2C0 as master sends START signal */
;;;162    	DrvI2C_Ctrl(I2C_PORT0, 1, 0, 0, 0);
000026  2000              MOVS     r0,#0
000028  4603              MOV      r3,r0
00002a  4602              MOV      r2,r0
00002c  2101              MOVS     r1,#1
00002e  9000              STR      r0,[sp,#0]
000030  f7fffffe          BL       DrvI2C_Ctrl
;;;163    		
;;;164    	/* Wait I2C0 Tx Finish */
;;;165    	while (EndFlag0 == 0);
000034  bf00              NOP      
                  |L3.54|
000036  4803              LDR      r0,|L3.68|
000038  6800              LDR      r0,[r0,#0]  ; EndFlag0
00003a  2800              CMP      r0,#0
00003c  d0fb              BEQ      |L3.54|
;;;166    }
00003e  bd38              POP      {r3-r5,pc}
;;;167    
                          ENDP

                  |L3.64|
                          DCD      DataCnt0
                  |L3.68|
                          DCD      EndFlag0
                  |L3.72|
                          DCD      Tx_Data0
                  |L3.76|
                          DCD      I2C0_Callback_Tx

                          AREA ||i.InitWAU8822||, CODE, READONLY, ALIGN=2

                  InitWAU8822 PROC
;;;381    }
;;;382    void InitWAU8822(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;383    {
;;;384    	S_DRVI2S_DATA_T st;
;;;385    	/* Tri-state for FS and BCLK of CODEC */
;;;386    	DrvGPIO_Open(E_GPC, 0, E_IO_OPENDRAIN);
000002  2202              MOVS     r2,#2
000004  2100              MOVS     r1,#0
000006  4610              MOV      r0,r2
000008  f7fffffe          BL       DrvGPIO_Open
;;;387    	DrvGPIO_Open(E_GPC, 1, E_IO_OPENDRAIN);
00000c  2202              MOVS     r2,#2
00000e  2101              MOVS     r1,#1
000010  4610              MOV      r0,r2
000012  f7fffffe          BL       DrvGPIO_Open
;;;388    	DrvGPIO_SetBit(E_GPC, 0);
000016  2100              MOVS     r1,#0
000018  2002              MOVS     r0,#2
00001a  f7fffffe          BL       DrvGPIO_SetBit
;;;389    	DrvGPIO_SetBit(E_GPC, 1);
00001e  2101              MOVS     r1,#1
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       DrvGPIO_SetBit
;;;390    	
;;;391    	/* Set I2C0 I/O */
;;;392        DrvGPIO_InitFunction(E_FUNC_I2C0);    	
000026  2002              MOVS     r0,#2
000028  f7fffffe          BL       DrvGPIO_InitFunction
;;;393    	/* Open I2C0, and set clock = 100Kbps */
;;;394    	DrvI2C_Open(I2C_PORT0, 100000);		
00002c  4914              LDR      r1,|L4.128|
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       DrvI2C_Open
;;;395    	/* Enable I2C0 interrupt and set corresponding NVIC bit */
;;;396    	DrvI2C_EnableInt(I2C_PORT0);
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       DrvI2C_EnableInt
;;;397    	/* Configure CODEC */
;;;398    	WAU8822_Setup();
00003a  f7fffffe          BL       WAU8822_Setup
;;;399    	printf("Configure WAU8822\n");
00003e  a011              ADR      r0,|L4.132|
000040  f7fffffe          BL       __2printf
;;;400    
;;;401    	/* Configure I2S */
;;;402    	st.u32SampleRate 	 = 8000;
000044  207d              MOVS     r0,#0x7d
000046  0180              LSLS     r0,r0,#6
000048  9000              STR      r0,[sp,#0]
;;;403        st.u8WordWidth 	 	 = DRVI2S_DATABIT_16;
00004a  2101              MOVS     r1,#1
00004c  4668              MOV      r0,sp
00004e  7101              STRB     r1,[r0,#4]
;;;404        st.u8AudioFormat 	 = DRVI2S_STEREO;  		
000050  2100              MOVS     r1,#0
000052  7141              STRB     r1,[r0,#5]
;;;405    	st.u8DataFormat  	 = DRVI2S_FORMAT_I2S;   
000054  7181              STRB     r1,[r0,#6]
;;;406        st.u8Mode 		 	 = DRVI2S_MODE_SLAVE;
000056  2101              MOVS     r1,#1
000058  71c1              STRB     r1,[r0,#7]
;;;407        st.u8TxFIFOThreshold = DRVI2S_FIFO_LEVEL_WORD_4;
00005a  2104              MOVS     r1,#4
00005c  7201              STRB     r1,[r0,#8]
;;;408        st.u8RxFIFOThreshold = DRVI2S_FIFO_LEVEL_WORD_4;
00005e  7241              STRB     r1,[r0,#9]
;;;409    	DrvI2S_SelectClockSource(0);
000060  2000              MOVS     r0,#0
000062  f7fffffe          BL       DrvI2S_SelectClockSource
;;;410    	DrvI2S_Open(&st);
000066  4668              MOV      r0,sp
000068  f7fffffe          BL       DrvI2S_Open
;;;411    	/* Set I2S I/O */	
;;;412        DrvGPIO_InitFunction(E_FUNC_I2S); 
00006c  2004              MOVS     r0,#4
00006e  f7fffffe          BL       DrvGPIO_InitFunction
;;;413    	/* Set MCLK and enable MCLK */
;;;414    	DrvI2S_SetMCLKFreq(12000000);	
000072  4809              LDR      r0,|L4.152|
000074  f7fffffe          BL       DrvI2S_SetMCLKFreq
;;;415    	DrvI2S_EnableMCLK();
000078  f7fffffe          BL       DrvI2S_EnableMCLK
;;;416    }
00007c  bd0e              POP      {r1-r3,pc}
;;;417    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP

00007e  0000              DCW      0x0000
                  |L4.128|
                          DCD      0x000186a0
                  |L4.132|
000084  436f6e66          DCB      "Configure WAU8822\n",0
000088  69677572
00008c  65205741
000090  55383832
000094  320a00  
000097  00                DCB      0
                  |L4.152|
                          DCD      0x00b71b00

                          AREA ||i.RoughDelay||, CODE, READONLY, ALIGN=1

                  RoughDelay PROC
;;;66     void Rx_thresholdCallbackfn0(uint32_t status);
;;;67     static void RoughDelay(uint32_t t)
000000  b508              PUSH     {r3,lr}
;;;68     {
;;;69         volatile int32_t delay;
;;;70     
;;;71         delay = t;
000002  9000              STR      r0,[sp,#0]
;;;72     
;;;73         while(delay-- >= 0);
000004  bf00              NOP      
                  |L5.6|
000006  9900              LDR      r1,[sp,#0]
000008  1e4a              SUBS     r2,r1,#1
00000a  9200              STR      r2,[sp,#0]
00000c  2900              CMP      r1,#0
00000e  dafa              BGE      |L5.6|
;;;74     }
000010  bd08              POP      {r3,pc}
;;;75     
                          ENDP


                          AREA ||i.Rx_thresholdCallbackfn0||, CODE, READONLY, ALIGN=2

                  Rx_thresholdCallbackfn0 PROC
;;;317    /*---------------------------------------------------------------------------------------------------------*/
;;;318    void Rx_thresholdCallbackfn0(uint32_t status)
000000  b570              PUSH     {r4-r6,lr}
;;;319    {
000002  4606              MOV      r6,r0
;;;320    	uint32_t  i;
;;;321    	int32_t i32Data;
;;;322    	
;;;323    	for	( i = 0; i < 4; i++)
000004  2400              MOVS     r4,#0
000006  e00d              B        |L6.36|
                  |L6.8|
;;;324    	{
;;;325    		i32Data=_DRVI2S_READ_RX_FIFO()>>16;
000008  4810              LDR      r0,|L6.76|
00000a  6940              LDR      r0,[r0,#0x14]
00000c  0c05              LSRS     r5,r0,#16
;;;326    		i16PCMBuff[u32PCMBuffPointer++]=i32Data;
00000e  b229              SXTH     r1,r5
000010  480f              LDR      r0,|L6.80|
000012  6802              LDR      r2,[r0,#0]  ; u32PCMBuffPointer
000014  6800              LDR      r0,[r0,#0]  ; u32PCMBuffPointer
000016  1c40              ADDS     r0,r0,#1
000018  4b0d              LDR      r3,|L6.80|
00001a  6018              STR      r0,[r3,#0]  ; u32PCMBuffPointer
00001c  0050              LSLS     r0,r2,#1
00001e  4a0d              LDR      r2,|L6.84|
000020  5211              STRH     r1,[r2,r0]
000022  1c64              ADDS     r4,r4,#1              ;323
                  |L6.36|
000024  2c04              CMP      r4,#4                 ;323
000026  d3ef              BCC      |L6.8|
;;;327    	}
;;;328    	if(u32PCMBuffPointer==i16PCMBuffSize)
000028  4809              LDR      r0,|L6.80|
00002a  6800              LDR      r0,[r0,#0]  ; u32PCMBuffPointer
00002c  21ff              MOVS     r1,#0xff
00002e  31f9              ADDS     r1,r1,#0xf9
000030  4288              CMP      r0,r1
000032  d109              BNE      |L6.72|
;;;329    	{
;;;330    		DrvI2S_EnableInt(I2S_RX_FIFO_THRESHOLD, Rx_thresholdCallbackfn1);
000034  4908              LDR      r1,|L6.88|
000036  2002              MOVS     r0,#2
000038  f7fffffe          BL       DrvI2S_EnableInt
;;;331    		if(u32PCMBuffPointer1!=0)
00003c  4807              LDR      r0,|L6.92|
00003e  6800              LDR      r0,[r0,#0]  ; u32PCMBuffPointer1
000040  2800              CMP      r0,#0
000042  d001              BEQ      |L6.72|
;;;332    			while(1);
000044  bf00              NOP      
                  |L6.70|
000046  e7fe              B        |L6.70|
                  |L6.72|
;;;333    	} 
;;;334    }
000048  bd70              POP      {r4-r6,pc}
;;;335    void Rx_thresholdCallbackfn1(uint32_t status)
                          ENDP

00004a  0000              DCW      0x0000
                  |L6.76|
                          DCD      0x401a0000
                  |L6.80|
                          DCD      u32PCMBuffPointer
                  |L6.84|
                          DCD      i16PCMBuff
                  |L6.88|
                          DCD      Rx_thresholdCallbackfn1
                  |L6.92|
                          DCD      u32PCMBuffPointer1

                          AREA ||i.Rx_thresholdCallbackfn1||, CODE, READONLY, ALIGN=2

                  Rx_thresholdCallbackfn1 PROC
;;;334    }
;;;335    void Rx_thresholdCallbackfn1(uint32_t status)
000000  b570              PUSH     {r4-r6,lr}
;;;336    {
000002  4606              MOV      r6,r0
;;;337    	uint32_t  i;
;;;338    	int32_t i32Data;
;;;339    	
;;;340    	for	( i = 0; i < 4; i++)
000004  2400              MOVS     r4,#0
000006  e00d              B        |L7.36|
                  |L7.8|
;;;341    	{
;;;342    		i32Data=_DRVI2S_READ_RX_FIFO()>>16;
000008  4810              LDR      r0,|L7.76|
00000a  6940              LDR      r0,[r0,#0x14]
00000c  0c05              LSRS     r5,r0,#16
;;;343    		i16PCMBuff1[u32PCMBuffPointer1++]=i32Data;
00000e  b229              SXTH     r1,r5
000010  480f              LDR      r0,|L7.80|
000012  6802              LDR      r2,[r0,#0]  ; u32PCMBuffPointer1
000014  6800              LDR      r0,[r0,#0]  ; u32PCMBuffPointer1
000016  1c40              ADDS     r0,r0,#1
000018  4b0d              LDR      r3,|L7.80|
00001a  6018              STR      r0,[r3,#0]  ; u32PCMBuffPointer1
00001c  0050              LSLS     r0,r2,#1
00001e  4a0d              LDR      r2,|L7.84|
000020  5211              STRH     r1,[r2,r0]
000022  1c64              ADDS     r4,r4,#1              ;340
                  |L7.36|
000024  2c04              CMP      r4,#4                 ;340
000026  d3ef              BCC      |L7.8|
;;;344    	}
;;;345    	if(u32PCMBuffPointer1==i16PCMBuffSize)
000028  4809              LDR      r0,|L7.80|
00002a  6800              LDR      r0,[r0,#0]  ; u32PCMBuffPointer1
00002c  21ff              MOVS     r1,#0xff
00002e  31f9              ADDS     r1,r1,#0xf9
000030  4288              CMP      r0,r1
000032  d109              BNE      |L7.72|
;;;346    	{
;;;347    		DrvI2S_EnableInt(I2S_RX_FIFO_THRESHOLD, Rx_thresholdCallbackfn0);
000034  4908              LDR      r1,|L7.88|
000036  2002              MOVS     r0,#2
000038  f7fffffe          BL       DrvI2S_EnableInt
;;;348    		if(u32PCMBuffPointer!=0)
00003c  4807              LDR      r0,|L7.92|
00003e  6800              LDR      r0,[r0,#0]  ; u32PCMBuffPointer
000040  2800              CMP      r0,#0
000042  d001              BEQ      |L7.72|
;;;349    			while(1);
000044  bf00              NOP      
                  |L7.70|
000046  e7fe              B        |L7.70|
                  |L7.72|
;;;350    	}
;;;351    }
000048  bd70              POP      {r4-r6,pc}
;;;352    
                          ENDP

00004a  0000              DCW      0x0000
                  |L7.76|
                          DCD      0x401a0000
                  |L7.80|
                          DCD      u32PCMBuffPointer1
                  |L7.84|
                          DCD      i16PCMBuff1
                  |L7.88|
                          DCD      Rx_thresholdCallbackfn0
                  |L7.92|
                          DCD      u32PCMBuffPointer

                          AREA ||i.Tx_thresholdCallbackfn0||, CODE, READONLY, ALIGN=2

                  Tx_thresholdCallbackfn0 PROC
;;;249    /*---------------------------------------------------------------------------------------------------------*/
;;;250    void Tx_thresholdCallbackfn0(uint32_t status)
000000  b570              PUSH     {r4-r6,lr}
;;;251    {
000002  4606              MOV      r6,r0
;;;252    	uint32_t i;
;;;253    	int32_t i32Data;
;;;254    	
;;;255    	for	( i = 0; i < 4; i++)
000004  2400              MOVS     r4,#0
000006  e019              B        |L8.60|
                  |L8.8|
;;;256    	{
;;;257    		i32Data=(i16PCMBuff[u32PCMBuffPointer++])<<16;
000008  4816              LDR      r0,|L8.100|
00000a  6801              LDR      r1,[r0,#0]  ; u32PCMBuffPointer
00000c  6800              LDR      r0,[r0,#0]  ; u32PCMBuffPointer
00000e  1c40              ADDS     r0,r0,#1
000010  4a14              LDR      r2,|L8.100|
000012  6010              STR      r0,[r2,#0]  ; u32PCMBuffPointer
000014  0048              LSLS     r0,r1,#1
000016  4914              LDR      r1,|L8.104|
000018  5a08              LDRH     r0,[r1,r0]
00001a  0405              LSLS     r5,r0,#16
;;;258    		_DRVI2S_WRITE_TX_FIFO(i32Data);
00001c  4813              LDR      r0,|L8.108|
00001e  6105              STR      r5,[r0,#0x10]
;;;259    		if(--u32DataSize==0)
000020  4813              LDR      r0,|L8.112|
000022  6800              LDR      r0,[r0,#0]  ; u32DataSize
000024  1e40              SUBS     r0,r0,#1
000026  4912              LDR      r1,|L8.112|
000028  6008              STR      r0,[r1,#0]  ; u32DataSize
00002a  2800              CMP      r0,#0
00002c  d105              BNE      |L8.58|
;;;260    		{
;;;261    			DrvI2S_DisableInt(I2S_TX_FIFO_THRESHOLD);
00002e  200a              MOVS     r0,#0xa
000030  f7fffffe          BL       DrvI2S_DisableInt
;;;262    			DrvI2S_DisableTx();
000034  f7fffffe          BL       DrvI2S_DisableTx
                  |L8.56|
;;;263    			return;
;;;264    		}
;;;265    	}
;;;266    	if(u32PCMBuffPointer==i16PCMBuffSize)
;;;267    	{
;;;268    		DrvI2S_EnableInt(I2S_TX_FIFO_THRESHOLD, Tx_thresholdCallbackfn1);
;;;269    		if(u32PCMBuffPointer1!=0)
;;;270    			while(1);
;;;271    	} 
;;;272    }
000038  bd70              POP      {r4-r6,pc}
                  |L8.58|
00003a  1c64              ADDS     r4,r4,#1              ;255
                  |L8.60|
00003c  2c04              CMP      r4,#4                 ;255
00003e  d3e3              BCC      |L8.8|
000040  4808              LDR      r0,|L8.100|
000042  6800              LDR      r0,[r0,#0]            ;266  ; u32PCMBuffPointer
000044  21ff              MOVS     r1,#0xff              ;266
000046  31f9              ADDS     r1,r1,#0xf9           ;266
000048  4288              CMP      r0,r1                 ;266
00004a  d109              BNE      |L8.96|
00004c  4909              LDR      r1,|L8.116|
00004e  200a              MOVS     r0,#0xa               ;268
000050  f7fffffe          BL       DrvI2S_EnableInt
000054  4808              LDR      r0,|L8.120|
000056  6800              LDR      r0,[r0,#0]            ;269  ; u32PCMBuffPointer1
000058  2800              CMP      r0,#0                 ;269
00005a  d001              BEQ      |L8.96|
00005c  bf00              NOP                            ;270
                  |L8.94|
00005e  e7fe              B        |L8.94|
                  |L8.96|
000060  bf00              NOP      
000062  e7e9              B        |L8.56|
;;;273    void Tx_thresholdCallbackfn1(uint32_t status)
                          ENDP

                  |L8.100|
                          DCD      u32PCMBuffPointer
                  |L8.104|
                          DCD      i16PCMBuff
                  |L8.108|
                          DCD      0x401a0000
                  |L8.112|
                          DCD      u32DataSize
                  |L8.116|
                          DCD      Tx_thresholdCallbackfn1
                  |L8.120|
                          DCD      u32PCMBuffPointer1

                          AREA ||i.Tx_thresholdCallbackfn1||, CODE, READONLY, ALIGN=2

                  Tx_thresholdCallbackfn1 PROC
;;;272    }
;;;273    void Tx_thresholdCallbackfn1(uint32_t status)
000000  b570              PUSH     {r4-r6,lr}
;;;274    {
000002  4606              MOV      r6,r0
;;;275    	uint32_t i;
;;;276    	int32_t i32Data;
;;;277    	
;;;278    	for	( i = 0; i < 4; i++)
000004  2400              MOVS     r4,#0
000006  e019              B        |L9.60|
                  |L9.8|
;;;279    	{
;;;280    		i32Data=(i16PCMBuff1[u32PCMBuffPointer1++])<<16;
000008  4816              LDR      r0,|L9.100|
00000a  6801              LDR      r1,[r0,#0]  ; u32PCMBuffPointer1
00000c  6800              LDR      r0,[r0,#0]  ; u32PCMBuffPointer1
00000e  1c40              ADDS     r0,r0,#1
000010  4a14              LDR      r2,|L9.100|
000012  6010              STR      r0,[r2,#0]  ; u32PCMBuffPointer1
000014  0048              LSLS     r0,r1,#1
000016  4914              LDR      r1,|L9.104|
000018  5a08              LDRH     r0,[r1,r0]
00001a  0405              LSLS     r5,r0,#16
;;;281    		_DRVI2S_WRITE_TX_FIFO(i32Data);
00001c  4813              LDR      r0,|L9.108|
00001e  6105              STR      r5,[r0,#0x10]
;;;282    		if(--u32DataSize==0)
000020  4813              LDR      r0,|L9.112|
000022  6800              LDR      r0,[r0,#0]  ; u32DataSize
000024  1e40              SUBS     r0,r0,#1
000026  4912              LDR      r1,|L9.112|
000028  6008              STR      r0,[r1,#0]  ; u32DataSize
00002a  2800              CMP      r0,#0
00002c  d105              BNE      |L9.58|
;;;283    		{
;;;284    			DrvI2S_DisableInt(I2S_TX_FIFO_THRESHOLD);
00002e  200a              MOVS     r0,#0xa
000030  f7fffffe          BL       DrvI2S_DisableInt
;;;285    			DrvI2S_DisableTx();
000034  f7fffffe          BL       DrvI2S_DisableTx
                  |L9.56|
;;;286    			return;
;;;287    		}
;;;288    	}
;;;289    	if(u32PCMBuffPointer1==i16PCMBuffSize)
;;;290    	{
;;;291    		DrvI2S_EnableInt(I2S_TX_FIFO_THRESHOLD, Tx_thresholdCallbackfn0);
;;;292    		if(u32PCMBuffPointer!=0)
;;;293    			while(1);		
;;;294    	}	
;;;295    }
000038  bd70              POP      {r4-r6,pc}
                  |L9.58|
00003a  1c64              ADDS     r4,r4,#1              ;278
                  |L9.60|
00003c  2c04              CMP      r4,#4                 ;278
00003e  d3e3              BCC      |L9.8|
000040  4808              LDR      r0,|L9.100|
000042  6800              LDR      r0,[r0,#0]            ;289  ; u32PCMBuffPointer1
000044  21ff              MOVS     r1,#0xff              ;289
000046  31f9              ADDS     r1,r1,#0xf9           ;289
000048  4288              CMP      r0,r1                 ;289
00004a  d109              BNE      |L9.96|
00004c  4909              LDR      r1,|L9.116|
00004e  200a              MOVS     r0,#0xa               ;291
000050  f7fffffe          BL       DrvI2S_EnableInt
000054  4808              LDR      r0,|L9.120|
000056  6800              LDR      r0,[r0,#0]            ;292  ; u32PCMBuffPointer
000058  2800              CMP      r0,#0                 ;292
00005a  d001              BEQ      |L9.96|
00005c  bf00              NOP                            ;293
                  |L9.94|
00005e  e7fe              B        |L9.94|
                  |L9.96|
000060  bf00              NOP      
000062  e7e9              B        |L9.56|
;;;296    
                          ENDP

                  |L9.100|
                          DCD      u32PCMBuffPointer1
                  |L9.104|
                          DCD      i16PCMBuff1
                  |L9.108|
                          DCD      0x401a0000
                  |L9.112|
                          DCD      u32DataSize
                  |L9.116|
                          DCD      Tx_thresholdCallbackfn0
                  |L9.120|
                          DCD      u32PCMBuffPointer

                          AREA ||i.UAC_MainProcess||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UAC_MainProcess PROC
;;;435    /*---------------------------------------------------------------------------------------------------------*/
;;;436    int32_t UAC_MainProcess(void)
000000  b0ff              SUB      sp,sp,#0x1fc
;;;437    {
000002  b095              SUB      sp,sp,#0x54
;;;438    
;;;439    	uint32_t p1, s1, s2;
;;;440    	FATFS *fs;				/* Pointer to file system object */
;;;441    	DIR dir;				/* Directory object */
;;;442    	FILINFO Finfo;
;;;443    	FIL file1;				/* File objects */
;;;444    	char *ptr="\\";
000004  a5c0              ADR      r5,|L10.776|
;;;445    	FRESULT res;
;;;446    	char TEXT3[16]="Loop Count:     ";							  
000006  a3c1              ADR      r3,|L10.780|
000008  cb0f              LDM      r3,{r0-r3}
00000a  9303              STR      r3,[sp,#0xc]
00000c  466b              MOV      r3,sp
00000e  c307              STM      r3!,{r0-r2}
;;;447    	uint32_t	count=0;
000010  2600              MOVS     r6,#0
;;;448    
;;;449    	res	= (FRESULT)disk_initialize(0);	
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       disk_initialize
000018  4604              MOV      r4,r0
;;;450    	if(res)
00001a  2c00              CMP      r4,#0
00001c  d005              BEQ      |L10.42|
;;;451    	{
;;;452    		put_rc(res);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       put_rc
;;;453    		printf("\n\nDon't initialize SD card\n");
000024  a0bd              ADR      r0,|L10.796|
000026  f7fffffe          BL       __2printf
                  |L10.42|
;;;454    	}
;;;455    
;;;456    	res	=f_mount(0, &FatFs[0]);	
00002a  49c3              LDR      r1,|L10.824|
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       f_mount
000032  4604              MOV      r4,r0
;;;457    	if(res)
000034  2c00              CMP      r4,#0
000036  d005              BEQ      |L10.68|
;;;458    	{
;;;459    		put_rc(res);
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       put_rc
;;;460    		printf("Don't mount file system\n");
00003e  a0bf              ADR      r0,|L10.828|
000040  f7fffffe          BL       __2printf
                  |L10.68|
;;;461    	}	 
;;;462    
;;;463    
;;;464     	// List direct information	
;;;465    	put_rc(f_opendir(&dir, ptr)); 
000044  4629              MOV      r1,r5
000046  a88d              ADD      r0,sp,#0x234
000048  f7fffffe          BL       f_opendir
00004c  4607              MOV      r7,r0
00004e  f7fffffe          BL       put_rc
;;;466    	put_rc(f_open(&file1, (TCHAR*)i8FileName, FA_READ));
000052  2201              MOVS     r2,#1
000054  49c0              LDR      r1,|L10.856|
000056  a804              ADD      r0,sp,#0x10
000058  f7fffffe          BL       f_open
00005c  4607              MOV      r7,r0
00005e  f7fffffe          BL       put_rc
;;;467    	u32FileBuffPointer=u8FileBuffSize;
000062  2001              MOVS     r0,#1
000064  0240              LSLS     r0,r0,#9
000066  49bd              LDR      r1,|L10.860|
000068  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;468    	f_lseek(&file1,0);
00006a  2100              MOVS     r1,#0
00006c  a804              ADD      r0,sp,#0x10
00006e  f7fffffe          BL       f_lseek
;;;469    	put_rc(f_read(&file1, u8FileBuff, u32FileBuffPointer, &u32FileBuffPointer));
000072  4bba              LDR      r3,|L10.860|
000074  4618              MOV      r0,r3
000076  49ba              LDR      r1,|L10.864|
000078  6802              LDR      r2,[r0,#0]  ; u32FileBuffPointer
00007a  a804              ADD      r0,sp,#0x10
00007c  f7fffffe          BL       f_read
000080  4607              MOV      r7,r0
000082  f7fffffe          BL       put_rc
;;;470    	while(u32FileBuffPointer!=u8FileBuffSize);
000086  bf00              NOP      
                  |L10.136|
000088  48b4              LDR      r0,|L10.860|
00008a  6800              LDR      r0,[r0,#0]  ; u32FileBuffPointer
00008c  2101              MOVS     r1,#1
00008e  0249              LSLS     r1,r1,#9
000090  4288              CMP      r0,r1
000092  d1f9              BNE      |L10.136|
;;;471    	u32FileBuffPointer=0;
000094  2000              MOVS     r0,#0
000096  49b1              LDR      r1,|L10.860|
000098  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;472    	if(memcmp(u8FileBuff+u32FileBuffPointer, "RIFF", 4)==0)
00009a  49b1              LDR      r1,|L10.864|
00009c  4aaf              LDR      r2,|L10.860|
00009e  6812              LDR      r2,[r2,#0]  ; u32FileBuffPointer
0000a0  1888              ADDS     r0,r1,r2
0000a2  2204              MOVS     r2,#4
0000a4  a1af              ADR      r1,|L10.868|
0000a6  f7fffffe          BL       memcmp
0000aa  2800              CMP      r0,#0
                  |L10.172|
0000ac  d17e              BNE      |L10.428|
;;;473    	{
;;;474    		u32FileBuffPointer+=4;
0000ae  48ab              LDR      r0,|L10.860|
0000b0  6800              LDR      r0,[r0,#0]  ; u32FileBuffPointer
0000b2  1d00              ADDS     r0,r0,#4
0000b4  49a9              LDR      r1,|L10.860|
0000b6  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;475    		printf("RIFF format\n");
0000b8  a0ac              ADR      r0,|L10.876|
0000ba  f7fffffe          BL       __2printf
;;;476    		WavFile.u32ChunkSize=u32SwapBuffer(u8FileBuff+u32FileBuffPointer);
0000be  49a8              LDR      r1,|L10.864|
0000c0  4aa6              LDR      r2,|L10.860|
0000c2  6812              LDR      r2,[r2,#0]  ; u32FileBuffPointer
0000c4  1888              ADDS     r0,r1,r2
0000c6  f7fffffe          BL       u32SwapBuffer
0000ca  49ac              LDR      r1,|L10.892|
0000cc  6008              STR      r0,[r1,#0]  ; WavFile
;;;477    		u32FileBuffPointer+=4;
0000ce  48a3              LDR      r0,|L10.860|
0000d0  6800              LDR      r0,[r0,#0]  ; u32FileBuffPointer
0000d2  1d00              ADDS     r0,r0,#4
0000d4  49a1              LDR      r1,|L10.860|
0000d6  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;478    		if(memcmp(u8FileBuff+u32FileBuffPointer, "WAVEfmt ", 8)==0)//Buff[BuffPointer++]=='W'&&Buff[BuffPointer++]=='A'&&Buff[BuffPointer++]=='V'&&Buff[BuffPointer++]=='E'&&Buff[BuffPointer++]=='f'&&Buff[BuffPointer++]=='m'&&Buff[BuffPointer++]=='t'&&Buff[BuffPointer++]==0x20)
0000d8  49a1              LDR      r1,|L10.864|
0000da  4aa0              LDR      r2,|L10.860|
0000dc  6812              LDR      r2,[r2,#0]  ; u32FileBuffPointer
0000de  1888              ADDS     r0,r1,r2
0000e0  2208              MOVS     r2,#8
0000e2  a1a7              ADR      r1,|L10.896|
0000e4  f7fffffe          BL       memcmp
0000e8  2800              CMP      r0,#0
0000ea  d1df              BNE      |L10.172|
;;;479    		{
;;;480    			u32FileBuffPointer+=8;
0000ec  489b              LDR      r0,|L10.860|
0000ee  6800              LDR      r0,[r0,#0]  ; u32FileBuffPointer
0000f0  3008              ADDS     r0,r0,#8
0000f2  499a              LDR      r1,|L10.860|
0000f4  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;481    			WavFile.u32Subchunk1Size=u32SwapBuffer(u8FileBuff+u32FileBuffPointer);u32FileBuffPointer+=4;		
0000f6  499a              LDR      r1,|L10.864|
0000f8  4a98              LDR      r2,|L10.860|
0000fa  6812              LDR      r2,[r2,#0]  ; u32FileBuffPointer
0000fc  1888              ADDS     r0,r1,r2
0000fe  f7fffffe          BL       u32SwapBuffer
000102  499e              LDR      r1,|L10.892|
000104  6048              STR      r0,[r1,#4]  ; WavFile
000106  4895              LDR      r0,|L10.860|
000108  6800              LDR      r0,[r0,#0]  ; u32FileBuffPointer
00010a  1d00              ADDS     r0,r0,#4
00010c  4993              LDR      r1,|L10.860|
00010e  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;482    		  WavFile.u16AudioFormat=u16SwapBuffer(u8FileBuff+u32FileBuffPointer);u32FileBuffPointer+=2;				
000110  4993              LDR      r1,|L10.864|
000112  4a92              LDR      r2,|L10.860|
000114  6812              LDR      r2,[r2,#0]  ; u32FileBuffPointer
000116  1888              ADDS     r0,r1,r2
000118  f7fffffe          BL       u16SwapBuffer
00011c  4997              LDR      r1,|L10.892|
00011e  8108              STRH     r0,[r1,#8]
000120  488e              LDR      r0,|L10.860|
000122  6800              LDR      r0,[r0,#0]  ; u32FileBuffPointer
000124  1c80              ADDS     r0,r0,#2
000126  498d              LDR      r1,|L10.860|
000128  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;483    			WavFile.u16NumChannels=u16SwapBuffer(u8FileBuff+u32FileBuffPointer);u32FileBuffPointer+=2;			
00012a  498d              LDR      r1,|L10.864|
00012c  4a8b              LDR      r2,|L10.860|
00012e  6812              LDR      r2,[r2,#0]  ; u32FileBuffPointer
000130  1888              ADDS     r0,r1,r2
000132  f7fffffe          BL       u16SwapBuffer
000136  4991              LDR      r1,|L10.892|
000138  8148              STRH     r0,[r1,#0xa]
00013a  4888              LDR      r0,|L10.860|
00013c  6800              LDR      r0,[r0,#0]  ; u32FileBuffPointer
00013e  1c80              ADDS     r0,r0,#2
000140  4986              LDR      r1,|L10.860|
000142  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;484    			WavFile.u32SampleRate=u32SwapBuffer(u8FileBuff+u32FileBuffPointer);u32FileBuffPointer+=4;
000144  4986              LDR      r1,|L10.864|
000146  4a85              LDR      r2,|L10.860|
000148  6812              LDR      r2,[r2,#0]  ; u32FileBuffPointer
00014a  1888              ADDS     r0,r1,r2
00014c  f7fffffe          BL       u32SwapBuffer
000150  498a              LDR      r1,|L10.892|
000152  60c8              STR      r0,[r1,#0xc]  ; WavFile
000154  4881              LDR      r0,|L10.860|
000156  6800              LDR      r0,[r0,#0]  ; u32FileBuffPointer
000158  1d00              ADDS     r0,r0,#4
00015a  4980              LDR      r1,|L10.860|
00015c  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;485    			WavFile.u32ByteRate=u32SwapBuffer(u8FileBuff+u32FileBuffPointer);u32FileBuffPointer+=4;
00015e  4980              LDR      r1,|L10.864|
000160  4a7e              LDR      r2,|L10.860|
000162  6812              LDR      r2,[r2,#0]  ; u32FileBuffPointer
000164  1888              ADDS     r0,r1,r2
000166  f7fffffe          BL       u32SwapBuffer
00016a  4984              LDR      r1,|L10.892|
00016c  6108              STR      r0,[r1,#0x10]  ; WavFile
00016e  487b              LDR      r0,|L10.860|
000170  6800              LDR      r0,[r0,#0]  ; u32FileBuffPointer
000172  1d00              ADDS     r0,r0,#4
000174  4979              LDR      r1,|L10.860|
000176  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;486    			WavFile.u16BlockAlign=u16SwapBuffer(u8FileBuff+u32FileBuffPointer);u32FileBuffPointer+=2;
000178  4979              LDR      r1,|L10.864|
00017a  4a78              LDR      r2,|L10.860|
00017c  6812              LDR      r2,[r2,#0]  ; u32FileBuffPointer
00017e  1888              ADDS     r0,r1,r2
000180  f7fffffe          BL       u16SwapBuffer
000184  497d              LDR      r1,|L10.892|
000186  8288              STRH     r0,[r1,#0x14]
000188  4874              LDR      r0,|L10.860|
00018a  6800              LDR      r0,[r0,#0]  ; u32FileBuffPointer
00018c  1c80              ADDS     r0,r0,#2
00018e  4973              LDR      r1,|L10.860|
000190  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;487    			WavFile.u16BitsPerSample=u16SwapBuffer(u8FileBuff+u32FileBuffPointer);u32FileBuffPointer+=2;
000192  4973              LDR      r1,|L10.864|
000194  4a71              LDR      r2,|L10.860|
000196  6812              LDR      r2,[r2,#0]  ; u32FileBuffPointer
000198  1888              ADDS     r0,r1,r2
00019a  f7fffffe          BL       u16SwapBuffer
00019e  4977              LDR      r1,|L10.892|
0001a0  82c8              STRH     r0,[r1,#0x16]
0001a2  486e              LDR      r0,|L10.860|
0001a4  6800              LDR      r0,[r0,#0]  ; u32FileBuffPointer
0001a6  1c80              ADDS     r0,r0,#2
0001a8  496c              LDR      r1,|L10.860|
0001aa  e000              B        |L10.430|
                  |L10.428|
0001ac  e049              B        |L10.578|
                  |L10.430|
0001ae  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;488      			u32FileBuffPointer+=4;
0001b0  4608              MOV      r0,r1
0001b2  6800              LDR      r0,[r0,#0]  ; u32FileBuffPointer
0001b4  1d00              ADDS     r0,r0,#4
0001b6  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;489    			if(memcmp(u8FileBuff+u32FileBuffPointer, "fact", 4)!=0)
0001b8  4969              LDR      r1,|L10.864|
0001ba  4a68              LDR      r2,|L10.860|
0001bc  6812              LDR      r2,[r2,#0]  ; u32FileBuffPointer
0001be  1888              ADDS     r0,r1,r2
0001c0  2204              MOVS     r2,#4
0001c2  a172              ADR      r1,|L10.908|
0001c4  f7fffffe          BL       memcmp
0001c8  2800              CMP      r0,#0
0001ca  d001              BEQ      |L10.464|
;;;490    				while(1);
0001cc  bf00              NOP      
                  |L10.462|
0001ce  e7fe              B        |L10.462|
                  |L10.464|
;;;491    			u32FileBuffPointer+=8;
0001d0  4862              LDR      r0,|L10.860|
0001d2  6800              LDR      r0,[r0,#0]  ; u32FileBuffPointer
0001d4  3008              ADDS     r0,r0,#8
0001d6  4961              LDR      r1,|L10.860|
0001d8  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;492    			WavFile.u32SampleNumber=u32SwapBuffer(u8FileBuff+u32FileBuffPointer);u32FileBuffPointer+=4;
0001da  4961              LDR      r1,|L10.864|
0001dc  4a5f              LDR      r2,|L10.860|
0001de  6812              LDR      r2,[r2,#0]  ; u32FileBuffPointer
0001e0  1888              ADDS     r0,r1,r2
0001e2  f7fffffe          BL       u32SwapBuffer
0001e6  4965              LDR      r1,|L10.892|
0001e8  61c8              STR      r0,[r1,#0x1c]  ; WavFile
0001ea  485c              LDR      r0,|L10.860|
0001ec  6800              LDR      r0,[r0,#0]  ; u32FileBuffPointer
0001ee  1d00              ADDS     r0,r0,#4
0001f0  495a              LDR      r1,|L10.860|
0001f2  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;493    
;;;494    			if(memcmp(u8FileBuff+u32FileBuffPointer, "data", 4)==0)
0001f4  495a              LDR      r1,|L10.864|
0001f6  4a59              LDR      r2,|L10.860|
0001f8  6812              LDR      r2,[r2,#0]  ; u32FileBuffPointer
0001fa  1888              ADDS     r0,r1,r2
0001fc  2204              MOVS     r2,#4
0001fe  a165              ADR      r1,|L10.916|
000200  f7fffffe          BL       memcmp
000204  2800              CMP      r0,#0
000206  d11a              BNE      |L10.574|
;;;495    			{
;;;496    				u32FileBuffPointer+=4;
000208  4854              LDR      r0,|L10.860|
00020a  6800              LDR      r0,[r0,#0]  ; u32FileBuffPointer
00020c  1d00              ADDS     r0,r0,#4
00020e  4953              LDR      r1,|L10.860|
000210  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;497    				WavFile.u8HeaderStatus=1;
000212  2101              MOVS     r1,#1
000214  4859              LDR      r0,|L10.892|
000216  3020              ADDS     r0,r0,#0x20
000218  7001              STRB     r1,[r0,#0]
;;;498    				WavFile.u32Subchunk2Size=u32SwapBuffer(u8FileBuff+u32FileBuffPointer);u32FileBuffPointer+=4;
00021a  4951              LDR      r1,|L10.864|
00021c  4a4f              LDR      r2,|L10.860|
00021e  6812              LDR      r2,[r2,#0]  ; u32FileBuffPointer
000220  1888              ADDS     r0,r1,r2
000222  f7fffffe          BL       u32SwapBuffer
000226  4955              LDR      r1,|L10.892|
000228  6188              STR      r0,[r1,#0x18]  ; WavFile
00022a  484c              LDR      r0,|L10.860|
00022c  6800              LDR      r0,[r0,#0]  ; u32FileBuffPointer
00022e  1d00              ADDS     r0,r0,#4
000230  494a              LDR      r1,|L10.860|
000232  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;499    				u32DataSize=WavFile.u32Subchunk2Size;
000234  4851              LDR      r0,|L10.892|
000236  6980              LDR      r0,[r0,#0x18]  ; WavFile
000238  4958              LDR      r1,|L10.924|
00023a  6008              STR      r0,[r1,#0]  ; u32DataSize
00023c  e001              B        |L10.578|
                  |L10.574|
;;;500    			}else
;;;501    				while(1);
00023e  bf00              NOP      
                  |L10.576|
000240  e7fe              B        |L10.576|
                  |L10.578|
;;;502    		}			  
;;;503    	}
;;;504    	print_Line(2, "Playing   ");
000242  a157              ADR      r1,|L10.928|
000244  2002              MOVS     r0,#2
000246  f7fffffe          BL       print_Line
;;;505    	while(1)
00024a  e05b              B        |L10.772|
                  |L10.588|
;;;506    	{		
;;;507    		sprintf(TEXT3+11,"%d",count++);
00024c  4632              MOV      r2,r6
00024e  1c76              ADDS     r6,r6,#1
000250  a156              ADR      r1,|L10.940|
000252  a802              ADD      r0,sp,#8
000254  3003              ADDS     r0,#3
000256  f7fffffe          BL       __2sprintf
;;;508    		print_Line(3, TEXT3);
00025a  4669              MOV      r1,sp
00025c  2003              MOVS     r0,#3
00025e  f7fffffe          BL       print_Line
;;;509    		u32DataSize=WavFile.u32SampleNumber;
000262  4846              LDR      r0,|L10.892|
000264  69c0              LDR      r0,[r0,#0x1c]  ; WavFile
000266  494d              LDR      r1,|L10.924|
000268  6008              STR      r0,[r1,#0]  ; u32DataSize
;;;510    		u32FileBuffPointer=0x28+WavFile.u32Subchunk1Size;
00026a  4844              LDR      r0,|L10.892|
00026c  6840              LDR      r0,[r0,#4]  ; WavFile
00026e  3028              ADDS     r0,r0,#0x28
000270  493a              LDR      r1,|L10.860|
000272  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;511    		f_lseek(&file1,u32FileBuffPointer);
000274  4608              MOV      r0,r1
000276  6801              LDR      r1,[r0,#0]  ; u32FileBuffPointer
000278  a804              ADD      r0,sp,#0x10
00027a  f7fffffe          BL       f_lseek
;;;512    		u32PCMBuffPointer=u32PCMBuffPointer1=0;
00027e  2000              MOVS     r0,#0
000280  494b              LDR      r1,|L10.944|
000282  6008              STR      r0,[r1,#0]  ; u32PCMBuffPointer1
000284  494b              LDR      r1,|L10.948|
000286  6008              STR      r0,[r1,#0]  ; u32PCMBuffPointer
;;;513    
;;;514     		InitWAU8822();
000288  f7fffffe          BL       InitWAU8822
;;;515    	
;;;516    	    /* Eanble play hardware */
;;;517    		DrvI2S_EnableInt(I2S_TX_FIFO_THRESHOLD, Tx_thresholdCallbackfn0);
00028c  494a              LDR      r1,|L10.952|
00028e  200a              MOVS     r0,#0xa
000290  f7fffffe          BL       DrvI2S_EnableInt
;;;518    		//DrvI2S_EnableInt(I2S_RX_FIFO_THRESHOLD, Rx_thresholdCallbackfn);
;;;519    		DrvI2S_EnableTx();
000294  f7fffffe          BL       DrvI2S_EnableTx
;;;520    		//DrvI2S_EnableRx();
;;;521    		printf("Enable I2S and play first sound\n");
000298  a048              ADR      r0,|L10.956|
00029a  f7fffffe          BL       __2printf
;;;522    	
;;;523    		while(1)
00029e  e02f              B        |L10.768|
                  |L10.672|
;;;524    		{
;;;525    			if(u32PCMBuffPointer>=i16PCMBuffSize)
0002a0  4844              LDR      r0,|L10.948|
0002a2  6800              LDR      r0,[r0,#0]  ; u32PCMBuffPointer
0002a4  21ff              MOVS     r1,#0xff
0002a6  31f9              ADDS     r1,r1,#0xf9
0002a8  4288              CMP      r0,r1
0002aa  d316              BCC      |L10.730|
;;;526    			{
;;;527    				u32FileBuffPointer=u8FileBuffSize;
0002ac  2001              MOVS     r0,#1
0002ae  0240              LSLS     r0,r0,#9
0002b0  492a              LDR      r1,|L10.860|
0002b2  6008              STR      r0,[r1,#0]  ; u32FileBuffPointer
;;;528    				put_rc(f_read(&file1, u8FileBuff, u32FileBuffPointer, &u32FileBuffPointer));
0002b4  460b              MOV      r3,r1
0002b6  4608              MOV      r0,r1
0002b8  4929              LDR      r1,|L10.864|
0002ba  6802              LDR      r2,[r0,#0]  ; u32FileBuffPointer
0002bc  a804              ADD      r0,sp,#0x10
0002be  f7fffffe          BL       f_read
0002c2  4607              MOV      r7,r0
0002c4  f7fffffe          BL       put_rc
;;;529    				AdpcmDec4(u8FileBuff,(short*)i16PCMBuff,i16PCMBuffSize);
0002c8  22ff              MOVS     r2,#0xff
0002ca  32f9              ADDS     r2,r2,#0xf9
0002cc  4944              LDR      r1,|L10.992|
0002ce  4824              LDR      r0,|L10.864|
0002d0  f7fffffe          BL       AdpcmDec4
;;;530    				u32PCMBuffPointer=0;
0002d4  2000              MOVS     r0,#0
0002d6  4937              LDR      r1,|L10.948|
0002d8  6008              STR      r0,[r1,#0]  ; u32PCMBuffPointer
                  |L10.730|
;;;531    			}
;;;532    			if(u32PCMBuffPointer1>=i16PCMBuffSize)
0002da  4835              LDR      r0,|L10.944|
0002dc  6800              LDR      r0,[r0,#0]  ; u32PCMBuffPointer1
0002de  21ff              MOVS     r1,#0xff
0002e0  31f9              ADDS     r1,r1,#0xf9
0002e2  4288              CMP      r0,r1
0002e4  d307              BCC      |L10.758|
;;;533    			{
;;;534    				AdpcmDec4(u8FileBuff+(i16PCMBuffSize/2+4),(short*)i16PCMBuff1,i16PCMBuffSize);
0002e6  460a              MOV      r2,r1
0002e8  493e              LDR      r1,|L10.996|
0002ea  483f              LDR      r0,|L10.1000|
0002ec  f7fffffe          BL       AdpcmDec4
;;;535    				u32PCMBuffPointer1=0;
0002f0  2000              MOVS     r0,#0
0002f2  492f              LDR      r1,|L10.944|
0002f4  6008              STR      r0,[r1,#0]  ; u32PCMBuffPointer1
                  |L10.758|
;;;536    			}
;;;537    			if(u32DataSize==0)
0002f6  4829              LDR      r0,|L10.924|
0002f8  6800              LDR      r0,[r0,#0]  ; u32DataSize
0002fa  2800              CMP      r0,#0
0002fc  d100              BNE      |L10.768|
;;;538    				break;
0002fe  e000              B        |L10.770|
                  |L10.768|
000300  e7ce              B        |L10.672|
                  |L10.770|
000302  bf00              NOP      
                  |L10.772|
000304  e7a2              B        |L10.588|
;;;539    		}
;;;540    	}		
;;;541    
;;;542    }
;;;543    
                          ENDP

000306  0000              DCW      0x0000
                  |L10.776|
000308  5c00              DCB      "\\",0
00030a  00                DCB      0
00030b  00                DCB      0
                  |L10.780|
00030c  4c6f6f70          DCB      "Loop Count:     "
000310  20436f75
000314  6e743a20
000318  20202020
                  |L10.796|
00031c  0a0a446f          DCB      "\n\nDon't initialize SD card\n",0
000320  6e277420
000324  696e6974
000328  69616c69
00032c  7a652053
000330  44206361
000334  72640a00
                  |L10.824|
                          DCD      FatFs
                  |L10.828|
00033c  446f6e27          DCB      "Don't mount file system\n",0
000340  74206d6f
000344  756e7420
000348  66696c65
00034c  20737973
000350  74656d0a
000354  00      
000355  00                DCB      0
000356  00                DCB      0
000357  00                DCB      0
                  |L10.856|
                          DCD      i8FileName
                  |L10.860|
                          DCD      u32FileBuffPointer
                  |L10.864|
                          DCD      u8FileBuff
                  |L10.868|
000364  52494646          DCB      "RIFF",0
000368  00      
000369  00                DCB      0
00036a  00                DCB      0
00036b  00                DCB      0
                  |L10.876|
00036c  52494646          DCB      "RIFF format\n",0
000370  20666f72
000374  6d61740a
000378  00      
000379  00                DCB      0
00037a  00                DCB      0
00037b  00                DCB      0
                  |L10.892|
                          DCD      WavFile
                  |L10.896|
000380  57415645          DCB      "WAVEfmt ",0
000384  666d7420
000388  00      
000389  00                DCB      0
00038a  00                DCB      0
00038b  00                DCB      0
                  |L10.908|
00038c  66616374          DCB      "fact",0
000390  00      
000391  00                DCB      0
000392  00                DCB      0
000393  00                DCB      0
                  |L10.916|
000394  64617461          DCB      "data",0
000398  00      
000399  00                DCB      0
00039a  00                DCB      0
00039b  00                DCB      0
                  |L10.924|
                          DCD      u32DataSize
                  |L10.928|
0003a0  506c6179          DCB      "Playing   ",0
0003a4  696e6720
0003a8  202000  
0003ab  00                DCB      0
                  |L10.940|
0003ac  256400            DCB      "%d",0
0003af  00                DCB      0
                  |L10.944|
                          DCD      u32PCMBuffPointer1
                  |L10.948|
                          DCD      u32PCMBuffPointer
                  |L10.952|
                          DCD      Tx_thresholdCallbackfn0
                  |L10.956|
0003bc  456e6162          DCB      "Enable I2S and play first sound\n",0
0003c0  6c652049
0003c4  32532061
0003c8  6e642070
0003cc  6c617920
0003d0  66697273
0003d4  7420736f
0003d8  756e640a
0003dc  00      
0003dd  00                DCB      0
0003de  00                DCB      0
0003df  00                DCB      0
                  |L10.992|
                          DCD      i16PCMBuff
                  |L10.996|
                          DCD      i16PCMBuff1
                  |L10.1000|
                          DCD      u8FileBuff+0x100

                          AREA ||i.WAU8822_Setup||, CODE, READONLY, ALIGN=1

                  WAU8822_Setup PROC
;;;186    /*---------------------------------------------------------------------------------------------------------*/
;;;187    static void WAU8822_Setup(void)
000000  b510              PUSH     {r4,lr}
;;;188    {
;;;189    	I2C_WriteWAU8822(0,  0x000);   /* Reset all registers */ 
000002  2100              MOVS     r1,#0
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       I2C_WriteWAU8822
;;;190    	RoughDelay(0x200);
00000a  2001              MOVS     r0,#1
00000c  0240              LSLS     r0,r0,#9
00000e  f7fffffe          BL       RoughDelay
;;;191    		
;;;192    	I2C_WriteWAU8822(1,  0x02F);        
000012  212f              MOVS     r1,#0x2f
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       I2C_WriteWAU8822
;;;193    	I2C_WriteWAU8822(2,  0x1B3);   /* Enable L/R Headphone, ADC Mix/Boost, ADC */
00001a  21ff              MOVS     r1,#0xff
00001c  31b4              ADDS     r1,r1,#0xb4
00001e  2002              MOVS     r0,#2
000020  f7fffffe          BL       I2C_WriteWAU8822
;;;194    	I2C_WriteWAU8822(3,  0x07F);   /* Enable L/R main mixer, DAC */
000024  217f              MOVS     r1,#0x7f
000026  2003              MOVS     r0,#3
000028  f7fffffe          BL       I2C_WriteWAU8822
;;;195    	//I2C_WriteWAU8822(3,  0x1FF);   /* Enable L/R main mixer, DAC */			
;;;196    	I2C_WriteWAU8822(4,  0x010);   /* 16-bit word length, I2S format, Stereo */			
00002c  2110              MOVS     r1,#0x10
00002e  2004              MOVS     r0,#4
000030  f7fffffe          BL       I2C_WriteWAU8822
;;;197    	I2C_WriteWAU8822(5,  0x000);   /* Companding control and loop back mode (all disable) */
000034  2100              MOVS     r1,#0
000036  2005              MOVS     r0,#5
000038  f7fffffe          BL       I2C_WriteWAU8822
;;;198    	
;;;199    	//I2C_WriteWAU8822(6,  0x1AD);   /* Divide by 6, 16K */
;;;200    	I2C_WriteWAU8822(6,  0x1ED);   /* Divide by 12, 8K */
00003c  21ff              MOVS     r1,#0xff
00003e  31ee              ADDS     r1,r1,#0xee
000040  2006              MOVS     r0,#6
000042  f7fffffe          BL       I2C_WriteWAU8822
;;;201    	//I2C_WriteWAU8822(7,  0x006);   /* 16K for internal filter cofficients */
;;;202    	I2C_WriteWAU8822(7,  0x00A);   /* 8K for internal filter cofficients */
000046  210a              MOVS     r1,#0xa
000048  2007              MOVS     r0,#7
00004a  f7fffffe          BL       I2C_WriteWAU8822
;;;203    
;;;204    	I2C_WriteWAU8822(10, 0x008);   /* DAC softmute is disabled, DAC oversampling rate is 128x */
00004e  2108              MOVS     r1,#8
000050  200a              MOVS     r0,#0xa
000052  f7fffffe          BL       I2C_WriteWAU8822
;;;205    	I2C_WriteWAU8822(14, 0x108);   /* ADC HP filter is disabled, ADC oversampling rate is 128x */
000056  21ff              MOVS     r1,#0xff
000058  3109              ADDS     r1,r1,#9
00005a  200e              MOVS     r0,#0xe
00005c  f7fffffe          BL       I2C_WriteWAU8822
;;;206    	I2C_WriteWAU8822(15, 0x1EF);   /* ADC left digital volume control */
000060  21ff              MOVS     r1,#0xff
000062  31f0              ADDS     r1,r1,#0xf0
000064  200f              MOVS     r0,#0xf
000066  f7fffffe          BL       I2C_WriteWAU8822
;;;207    	I2C_WriteWAU8822(16, 0x1EF);   /* ADC right digital volume control */
00006a  21ff              MOVS     r1,#0xff
00006c  31f0              ADDS     r1,r1,#0xf0
00006e  2010              MOVS     r0,#0x10
000070  f7fffffe          BL       I2C_WriteWAU8822
;;;208    		
;;;209    	I2C_WriteWAU8822(43, 0x010);   
000074  2110              MOVS     r1,#0x10
000076  202b              MOVS     r0,#0x2b
000078  f7fffffe          BL       I2C_WriteWAU8822
;;;210    
;;;211    	I2C_WriteWAU8822(44, 0x000);   /* LLIN/RLIN is not connected to PGA */
00007c  2100              MOVS     r1,#0
00007e  202c              MOVS     r0,#0x2c
000080  f7fffffe          BL       I2C_WriteWAU8822
;;;212    	I2C_WriteWAU8822(45, 0x150);   /* LLIN connected, and its Gain value */
000084  21ff              MOVS     r1,#0xff
000086  3151              ADDS     r1,r1,#0x51
000088  202d              MOVS     r0,#0x2d
00008a  f7fffffe          BL       I2C_WriteWAU8822
;;;213    	I2C_WriteWAU8822(46, 0x150);   /* RLIN connected, and its Gain value */
00008e  21ff              MOVS     r1,#0xff
000090  3151              ADDS     r1,r1,#0x51
000092  202e              MOVS     r0,#0x2e
000094  f7fffffe          BL       I2C_WriteWAU8822
;;;214    	I2C_WriteWAU8822(47, 0x007);   /* LLIN connected, and its Gain value */
000098  2107              MOVS     r1,#7
00009a  202f              MOVS     r0,#0x2f
00009c  f7fffffe          BL       I2C_WriteWAU8822
;;;215    	I2C_WriteWAU8822(48, 0x007);   /* RLIN connected, and its Gain value */
0000a0  2107              MOVS     r1,#7
0000a2  2030              MOVS     r0,#0x30
0000a4  f7fffffe          BL       I2C_WriteWAU8822
;;;216    	I2C_WriteWAU8822(49, 0x047);//006);
0000a8  2147              MOVS     r1,#0x47
0000aa  2031              MOVS     r0,#0x31
0000ac  f7fffffe          BL       I2C_WriteWAU8822
;;;217    
;;;218    	//I2C_WriteWAU8822(50, 0x161);   /* Left DAC connected to LMIX */
;;;219    	//I2C_WriteWAU8822(51, 0x160);//001);   /* Right DAC connected to RMIX */
;;;220    
;;;221    	I2C_WriteWAU8822(50, 0x001);   /* Left DAC connected to LMIX */
0000b0  2101              MOVS     r1,#1
0000b2  2032              MOVS     r0,#0x32
0000b4  f7fffffe          BL       I2C_WriteWAU8822
;;;222    	I2C_WriteWAU8822(51, 0x000);//001);   /* Right DAC connected to RMIX */
0000b8  2100              MOVS     r1,#0
0000ba  2033              MOVS     r0,#0x33
0000bc  f7fffffe          BL       I2C_WriteWAU8822
;;;223     
;;;224     	I2C_WriteWAU8822(54, 0x139);   /* LSPKOUT Volume */
0000c0  21ff              MOVS     r1,#0xff
0000c2  313a              ADDS     r1,r1,#0x3a
0000c4  2036              MOVS     r0,#0x36
0000c6  f7fffffe          BL       I2C_WriteWAU8822
;;;225    	I2C_WriteWAU8822(55, 0x139);   /* RSPKOUT Volume */
0000ca  21ff              MOVS     r1,#0xff
0000cc  313a              ADDS     r1,r1,#0x3a
0000ce  2037              MOVS     r0,#0x37
0000d0  f7fffffe          BL       I2C_WriteWAU8822
;;;226    
;;;227    	DrvGPIO_Open(E_GPE,14, E_IO_OUTPUT);	
0000d4  2201              MOVS     r2,#1
0000d6  210e              MOVS     r1,#0xe
0000d8  2004              MOVS     r0,#4
0000da  f7fffffe          BL       DrvGPIO_Open
;;;228    	DrvGPIO_ClrBit(E_GPE,14);
0000de  210e              MOVS     r1,#0xe
0000e0  2004              MOVS     r0,#4
0000e2  f7fffffe          BL       DrvGPIO_ClrBit
;;;229    }
0000e6  bd10              POP      {r4,pc}
;;;230    
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;556    /*---------------------------------------------------------------------------------------------------------*/
;;;557    int32_t main (void)
000000  b50e              PUSH     {r1-r3,lr}
;;;558    {
;;;559    	STR_UART_T sParam;
;;;560    
;;;561    	//extern uint32_t SystemFrequency;
;;;562        /* Unlock the locked registers */
;;;563      UNLOCKREG();
000002  2059              MOVS     r0,#0x59
000004  4919              LDR      r1,|L12.108|
000006  6008              STR      r0,[r1,#0]
000008  2016              MOVS     r0,#0x16
00000a  6008              STR      r0,[r1,#0]
00000c  2088              MOVS     r0,#0x88
00000e  6008              STR      r0,[r1,#0]
;;;564    	DrvSYS_Open(50000000);
000010  4817              LDR      r0,|L12.112|
000012  f7fffffe          BL       DrvSYS_Open
;;;565    	LOCKREG();
000016  2000              MOVS     r0,#0
000018  4914              LDR      r1,|L12.108|
00001a  6008              STR      r0,[r1,#0]
;;;566    	
;;;567    	/* UART Setting */
;;;568        sParam.u32BaudRate 		= 115200;
00001c  20e1              MOVS     r0,#0xe1
00001e  0240              LSLS     r0,r0,#9
000020  9000              STR      r0,[sp,#0]
;;;569        sParam.u8cDataBits 		= DRVUART_DATABITS_8;
000022  2103              MOVS     r1,#3
000024  4668              MOV      r0,sp
000026  7101              STRB     r1,[r0,#4]
;;;570        sParam.u8cStopBits 		= DRVUART_STOPBITS_1;
000028  2100              MOVS     r1,#0
00002a  7141              STRB     r1,[r0,#5]
;;;571        sParam.u8cParity 		= DRVUART_PARITY_NONE;
00002c  7181              STRB     r1,[r0,#6]
;;;572        sParam.u8cRxTriggerLevel= DRVUART_FIFO_1BYTES;
00002e  71c1              STRB     r1,[r0,#7]
;;;573    	/* Select UART Clock Source From 12MHz */
;;;574    	DrvSYS_SelectIPClockSource(E_SYS_UART_CLKSRC,0); 
000030  2006              MOVS     r0,#6
000032  f7fffffe          BL       DrvSYS_SelectIPClockSource
;;;575    	/* Set UART Configuration */
;;;576    	DrvUART_Open(UART_PORT0,&sParam);	
000036  4669              MOV      r1,sp
000038  2000              MOVS     r0,#0
00003a  f7fffffe          BL       DrvUART_Open
;;;577    	/* Set UART Pin */
;;;578    	DrvGPIO_InitFunction(E_FUNC_UART0);	
00003e  2029              MOVS     r0,#0x29
000040  f7fffffe          BL       DrvGPIO_InitFunction
;;;579    
;;;580      init_LCD();  //call initial pannel function
000044  f7fffffe          BL       init_LCD
;;;581    	clear_LCD();
000048  f7fffffe          BL       clear_LCD
;;;582    
;;;583    
;;;584    	print_Line(0, "Smpl_ADPCM @8KHz");
00004c  a109              ADR      r1,|L12.116|
00004e  2000              MOVS     r0,#0
000050  f7fffffe          BL       print_Line
;;;585    	print_Line(1, "16bits, Mono");
000054  a10c              ADR      r1,|L12.136|
000056  2001              MOVS     r0,#1
000058  f7fffffe          BL       print_Line
;;;586    	printf("\n\nNUC100 Series ADPCM!\n");
00005c  a00e              ADR      r0,|L12.152|
00005e  f7fffffe          BL       __2printf
;;;587    	printf("Please insert SDcard and connect line in with J1\n");  
000062  a013              ADR      r0,|L12.176|
000064  f7fffffe          BL       __2printf
;;;588      UAC_MainProcess();
000068  f7fffffe          BL       UAC_MainProcess
;;;589    }
                          ENDP

                  |L12.108|
                          DCD      0x50000100
                  |L12.112|
                          DCD      0x02faf080
                  |L12.116|
000074  536d706c          DCB      "Smpl_ADPCM @8KHz",0
000078  5f414450
00007c  434d2040
000080  384b487a
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L12.136|
000088  31366269          DCB      "16bits, Mono",0
00008c  74732c20
000090  4d6f6e6f
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
                  |L12.152|
000098  0a0a4e55          DCB      "\n\nNUC100 Series ADPCM!\n",0
00009c  43313030
0000a0  20536572
0000a4  69657320
0000a8  41445043
0000ac  4d210a00
                  |L12.176|
0000b0  506c6561          DCB      "Please insert SDcard and connect line in with J1\n",0
0000b4  73652069
0000b8  6e736572
0000bc  74205344
0000c0  63617264
0000c4  20616e64
0000c8  20636f6e
0000cc  6e656374
0000d0  206c696e
0000d4  6520696e
0000d8  20776974
0000dc  68204a31
0000e0  0a00    
0000e2  00                DCB      0
0000e3  00                DCB      0

                          AREA ||i.put_rc||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_u
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  put_rc PROC
;;;352    
;;;353    void put_rc (FRESULT rc)
000000  b570              PUSH     {r4-r6,lr}
;;;354    {
000002  4605              MOV      r5,r0
;;;355    	const TCHAR *p =
000004  4c09              LDR      r4,|L13.44|
;;;356    		_T("OK\0DISK_ERR\0INT_ERR\0NOT_READY\0NO_FILE\0NO_PATH\0INVALID_NAME\0")
;;;357    		_T("DENIED\0EXIST\0INVALID_OBJECT\0WRITE_PROTECTED\0INVALID_DRIVE\0")
;;;358    		_T("NOT_ENABLED\0NO_FILE_SYSTEM\0MKFS_ABORTED\0TIMEOUT\0LOCKED\0")
;;;359    		_T("NOT_ENOUGH_CORE\0TOO_MANY_OPEN_FILES\0");
;;;360    	//FRESULT i;
;;;361    	uint32_t i;
;;;362    	for (i = 0; (i != (UINT)rc) && *p; i++) {
000006  2600              MOVS     r6,#0
000008  e005              B        |L13.22|
                  |L13.10|
;;;363    		while(*p++) ;
00000a  bf00              NOP      
                  |L13.12|
00000c  7821              LDRB     r1,[r4,#0]
00000e  1c64              ADDS     r4,r4,#1
000010  2900              CMP      r1,#0
000012  d1fb              BNE      |L13.12|
000014  1c76              ADDS     r6,r6,#1              ;362
                  |L13.22|
000016  42ae              CMP      r6,r5                 ;362
000018  d002              BEQ      |L13.32|
00001a  7820              LDRB     r0,[r4,#0]            ;362
00001c  2800              CMP      r0,#0                 ;362
00001e  d1f4              BNE      |L13.10|
                  |L13.32|
;;;364    	}
;;;365    	printf("rc=%u FR_%s\n",(UINT)rc, p);
000020  4622              MOV      r2,r4
000022  4629              MOV      r1,r5
000024  a002              ADR      r0,|L13.48|
000026  f7fffffe          BL       __2printf
;;;366    }
00002a  bd70              POP      {r4-r6,pc}
;;;367    
                          ENDP

                  |L13.44|
                          DCD      ||.constdata||+0x3c
                  |L13.48|
000030  72633d25          DCB      "rc=%u FR_%s\n",0
000034  75204652
000038  5f25730a
00003c  00      
00003d  00                DCB      0
00003e  00                DCB      0
00003f  00                DCB      0

                          AREA ||i.u16SwapBuffer||, CODE, READONLY, ALIGN=1

                  u16SwapBuffer PROC
;;;374    }
;;;375    uint16_t u16SwapBuffer(void* address)
000000  4601              MOV      r1,r0
;;;376    {
;;;377    	uint8_t* u8Char;
;;;378    	u8Char = (uint8_t*) address;
000002  460a              MOV      r2,r1
;;;379    	return (*u8Char|*(u8Char+1)<<8);
000004  7810              LDRB     r0,[r2,#0]
000006  7853              LDRB     r3,[r2,#1]
000008  021b              LSLS     r3,r3,#8
00000a  4318              ORRS     r0,r0,r3
;;;380    				
;;;381    }
00000c  4770              BX       lr
;;;382    void InitWAU8822(void)
                          ENDP


                          AREA ||i.u32SwapBuffer||, CODE, READONLY, ALIGN=1

                  u32SwapBuffer PROC
;;;367    
;;;368    uint32_t u32SwapBuffer(void* address)
000000  4601              MOV      r1,r0
;;;369    {
;;;370    	uint8_t* u8Char;
;;;371    	u8Char = (uint8_t*) address;
000002  460a              MOV      r2,r1
;;;372    	return (*u8Char|*(u8Char+1)<<8|*(u8Char+2)<<16|*(u8Char+3)<<24);
000004  7810              LDRB     r0,[r2,#0]
000006  7853              LDRB     r3,[r2,#1]
000008  021b              LSLS     r3,r3,#8
00000a  4318              ORRS     r0,r0,r3
00000c  7893              LDRB     r3,[r2,#2]
00000e  041b              LSLS     r3,r3,#16
000010  4318              ORRS     r0,r0,r3
000012  78d3              LDRB     r3,[r2,#3]
000014  061b              LSLS     r3,r3,#24
000016  4318              ORRS     r0,r0,r3
;;;373    				
;;;374    }
000018  4770              BX       lr
;;;375    uint16_t u16SwapBuffer(void* address)
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i16PCMBuff
                          %        1008
                  i16PCMBuff1
                          %        1008
                  u8FileBuff
                          %        512
                  WavFile
                          %        36
                  FatFs
                          %        564
                  PcmRecBuff
                          %        768
                  PcmPlayBuff
                          %        1536

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  i8WavHeader
000000  52494646          DCB      0x52,0x49,0x46,0x46
000004  34a10000          DCB      0x34,0xa1,0x00,0x00
000008  57415645          DCB      0x57,0x41,0x56,0x45
00000c  666d7420          DCB      0x66,0x6d,0x74,0x20
000010  14000000          DCB      0x14,0x00,0x00,0x00
000014  11000100          DCB      0x11,0x00,0x01,0x00
000018  401f0000          DCB      0x40,0x1f,0x00,0x00
00001c  df0f0000          DCB      0xdf,0x0f,0x00,0x00
000020  00010400          DCB      0x00,0x01,0x04,0x00
000024  0200f901          DCB      0x02,0x00,0xf9,0x01
000028  66616374          DCB      0x66,0x61,0x63,0x74
00002c  04000000          DCB      0x04,0x00,0x00,0x00
000030  993d0100          DCB      0x99,0x3d,0x01,0x00
000034  64617461          DCB      0x64,0x61,0x74,0x61
000038  00a10000          DCB      0x00,0xa1,0x00,0x00
00003c  4f4b0044          DCB      0x4f,0x4b,0x00,0x44
000040  49534b5f          DCB      0x49,0x53,0x4b,0x5f
000044  45525200          DCB      0x45,0x52,0x52,0x00
000048  494e545f          DCB      0x49,0x4e,0x54,0x5f
00004c  45525200          DCB      0x45,0x52,0x52,0x00
000050  4e4f545f          DCB      0x4e,0x4f,0x54,0x5f
000054  52454144          DCB      0x52,0x45,0x41,0x44
000058  59004e4f          DCB      0x59,0x00,0x4e,0x4f
00005c  5f46494c          DCB      0x5f,0x46,0x49,0x4c
000060  45004e4f          DCB      0x45,0x00,0x4e,0x4f
000064  5f504154          DCB      0x5f,0x50,0x41,0x54
000068  4800494e          DCB      0x48,0x00,0x49,0x4e
00006c  56414c49          DCB      0x56,0x41,0x4c,0x49
000070  445f4e41          DCB      0x44,0x5f,0x4e,0x41
000074  4d450044          DCB      0x4d,0x45,0x00,0x44
000078  454e4945          DCB      0x45,0x4e,0x49,0x45
00007c  44004558          DCB      0x44,0x00,0x45,0x58
000080  49535400          DCB      0x49,0x53,0x54,0x00
000084  494e5641          DCB      0x49,0x4e,0x56,0x41
000088  4c49445f          DCB      0x4c,0x49,0x44,0x5f
00008c  4f424a45          DCB      0x4f,0x42,0x4a,0x45
000090  43540057          DCB      0x43,0x54,0x00,0x57
000094  52495445          DCB      0x52,0x49,0x54,0x45
000098  5f50524f          DCB      0x5f,0x50,0x52,0x4f
00009c  54454354          DCB      0x54,0x45,0x43,0x54
0000a0  45440049          DCB      0x45,0x44,0x00,0x49
0000a4  4e56414c          DCB      0x4e,0x56,0x41,0x4c
0000a8  49445f44          DCB      0x49,0x44,0x5f,0x44
0000ac  52495645          DCB      0x52,0x49,0x56,0x45
0000b0  004e4f54          DCB      0x00,0x4e,0x4f,0x54
0000b4  5f454e41          DCB      0x5f,0x45,0x4e,0x41
0000b8  424c4544          DCB      0x42,0x4c,0x45,0x44
0000bc  004e4f5f          DCB      0x00,0x4e,0x4f,0x5f
0000c0  46494c45          DCB      0x46,0x49,0x4c,0x45
0000c4  5f535953          DCB      0x5f,0x53,0x59,0x53
0000c8  54454d00          DCB      0x54,0x45,0x4d,0x00
0000cc  4d4b4653          DCB      0x4d,0x4b,0x46,0x53
0000d0  5f41424f          DCB      0x5f,0x41,0x42,0x4f
0000d4  52544544          DCB      0x52,0x54,0x45,0x44
0000d8  0054494d          DCB      0x00,0x54,0x49,0x4d
0000dc  454f5554          DCB      0x45,0x4f,0x55,0x54
0000e0  004c4f43          DCB      0x00,0x4c,0x4f,0x43
0000e4  4b454400          DCB      0x4b,0x45,0x44,0x00
0000e8  4e4f545f          DCB      0x4e,0x4f,0x54,0x5f
0000ec  454e4f55          DCB      0x45,0x4e,0x4f,0x55
0000f0  47485f43          DCB      0x47,0x48,0x5f,0x43
0000f4  4f524500          DCB      0x4f,0x52,0x45,0x00
0000f8  544f4f5f          DCB      0x54,0x4f,0x4f,0x5f
0000fc  4d414e59          DCB      0x4d,0x41,0x4e,0x59
000100  5f4f5045          DCB      0x5f,0x4f,0x50,0x45
000104  4e5f4649          DCB      0x4e,0x5f,0x46,0x49
000108  4c455300          DCB      0x4c,0x45,0x53,0x00
00010c  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  u32DataSize
                          DCD      0x00000000
                  i8FileName
000004  61647063          DCB      0x61,0x64,0x70,0x63
000008  6d2e7761          DCB      0x6d,0x2e,0x77,0x61
00000c  76000000          DCB      0x76,0x00,0x00,0x00
000010  00000000          DCB      0x00,0x00,0x00,0x00
                  i32AdpcmStatus
                          DCD      0x00000000
                  u32PCMBuffPointer
                          DCD      0x00000000
                  u32PCMBuffPointer1
                          DCD      0x00000000
                  u32FileBuffPointer
                          DCD      0x00000000
                  EndFlag0
                          DCD      0x00000000
                  Device_Addr0
000028  1a                DCB      0x1a
                  Tx_Data0
000029  0000              DCB      0x00,0x00
                  DataCnt0
00002b  00                DCB      0x00
                  u32RecPos_Out
                          DCD      0x00000000
                  u32RecPos_In
                          DCD      0x00000000
                  u32PlayPos_Out
                          DCD      0x00000000
                  u32PlayPos_In
                          DCD      0x00000000

                  __ARM_use_no_argv EQU 0
