; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\ff.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ff.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\ -I..\ff8\src\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC1xx\Include -I..\..\..\..\Library\Device\Nuvoton\NUC1xx\Source -I..\..\..\..\Library\ -I..\..\..\..\Library\NUC1xx\Include -I..\..\..\..\Library\NUC1xx-LB_002\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Nuvoton\NUC1xx -D__UVISION_VERSION=524 --omf_browse=.\obj\ff.crf ..\ff8\src\ff.c]
                          THUMB

                          AREA ||i.check_fs||, CODE, READONLY, ALIGN=2

                  check_fs PROC
;;;1628   static
;;;1629   BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
000000  b570              PUSH     {r4-r6,lr}
;;;1630   	FATFS *fs,	/* File system object */
;;;1631   	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
;;;1632   )
;;;1633   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1634   	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
000006  7860              LDRB     r0,[r4,#1]
000008  2301              MOVS     r3,#1
00000a  462a              MOV      r2,r5
00000c  4621              MOV      r1,r4
00000e  3134              ADDS     r1,r1,#0x34
000010  f7fffffe          BL       disk_read
000014  2800              CMP      r0,#0
000016  d001              BEQ      |L1.28|
;;;1635   		return 3;
000018  2003              MOVS     r0,#3
                  |L1.26|
;;;1636   	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
;;;1637   		return 2;
;;;1638   
;;;1639   	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
;;;1640   		return 0;
;;;1641   	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
;;;1642   		return 0;
;;;1643   
;;;1644   	return 1;
;;;1645   }
00001a  bd70              POP      {r4-r6,pc}
                  |L1.28|
00001c  4620              MOV      r0,r4                 ;1636
00001e  3034              ADDS     r0,r0,#0x34           ;1636
000020  30ff              ADDS     r0,r0,#0xff           ;1636
000022  30ff              ADDS     r0,r0,#0xff           ;1636
000024  7840              LDRB     r0,[r0,#1]            ;1636
000026  0201              LSLS     r1,r0,#8              ;1636
000028  4620              MOV      r0,r4                 ;1636
00002a  3034              ADDS     r0,r0,#0x34           ;1636
00002c  30ff              ADDS     r0,r0,#0xff           ;1636
00002e  30e1              ADDS     r0,r0,#0xe1           ;1636
000030  7f80              LDRB     r0,[r0,#0x1e]         ;1636
000032  4301              ORRS     r1,r1,r0              ;1636
000034  4818              LDR      r0,|L1.152|
000036  4281              CMP      r1,r0                 ;1636
000038  d001              BEQ      |L1.62|
00003a  2002              MOVS     r0,#2                 ;1637
00003c  e7ed              B        |L1.26|
                  |L1.62|
00003e  206d              MOVS     r0,#0x6d              ;1639
000040  5d00              LDRB     r0,[r0,r4]            ;1639
000042  0601              LSLS     r1,r0,#24             ;1639
000044  206c              MOVS     r0,#0x6c              ;1639
000046  5d00              LDRB     r0,[r0,r4]            ;1639
000048  0400              LSLS     r0,r0,#16             ;1639
00004a  4308              ORRS     r0,r0,r1              ;1639
00004c  216b              MOVS     r1,#0x6b              ;1639
00004e  5d09              LDRB     r1,[r1,r4]            ;1639
000050  0209              LSLS     r1,r1,#8              ;1639
000052  4308              ORRS     r0,r0,r1              ;1639
000054  216a              MOVS     r1,#0x6a              ;1639
000056  5d09              LDRB     r1,[r1,r4]            ;1639
000058  4308              ORRS     r0,r0,r1              ;1639
00005a  0200              LSLS     r0,r0,#8              ;1639
00005c  0a00              LSRS     r0,r0,#8              ;1639
00005e  490f              LDR      r1,|L1.156|
000060  4288              CMP      r0,r1                 ;1639
000062  d101              BNE      |L1.104|
000064  2000              MOVS     r0,#0                 ;1640
000066  e7d8              B        |L1.26|
                  |L1.104|
000068  2089              MOVS     r0,#0x89              ;1641
00006a  5d00              LDRB     r0,[r0,r4]            ;1641
00006c  0601              LSLS     r1,r0,#24             ;1641
00006e  2088              MOVS     r0,#0x88              ;1641
000070  5d00              LDRB     r0,[r0,r4]            ;1641
000072  0400              LSLS     r0,r0,#16             ;1641
000074  4308              ORRS     r0,r0,r1              ;1641
000076  2187              MOVS     r1,#0x87              ;1641
000078  5d09              LDRB     r1,[r1,r4]            ;1641
00007a  0209              LSLS     r1,r1,#8              ;1641
00007c  4308              ORRS     r0,r0,r1              ;1641
00007e  2186              MOVS     r1,#0x86              ;1641
000080  5d09              LDRB     r1,[r1,r4]            ;1641
000082  4308              ORRS     r0,r0,r1              ;1641
000084  0200              LSLS     r0,r0,#8              ;1641
000086  0a00              LSRS     r0,r0,#8              ;1641
000088  4904              LDR      r1,|L1.156|
00008a  4288              CMP      r0,r1                 ;1641
00008c  d101              BNE      |L1.146|
00008e  2000              MOVS     r0,#0                 ;1642
000090  e7c3              B        |L1.26|
                  |L1.146|
000092  2001              MOVS     r0,#1                 ;1644
000094  e7c1              B        |L1.26|
;;;1646   
                          ENDP

000096  0000              DCW      0x0000
                  |L1.152|
                          DCD      0x0000aa55
                  |L1.156|
                          DCD      0x00544146

                          AREA ||i.chk_chr||, CODE, READONLY, ALIGN=1

                  chk_chr PROC
;;;267    static
;;;268    int chk_chr (const char* str, int chr) {
000000  4602              MOV      r2,r0
;;;269    	while (*str && *str != chr) str++;
000002  e000              B        |L2.6|
                  |L2.4|
000004  1c52              ADDS     r2,r2,#1
                  |L2.6|
000006  7810              LDRB     r0,[r2,#0]
000008  2800              CMP      r0,#0
00000a  d002              BEQ      |L2.18|
00000c  7810              LDRB     r0,[r2,#0]
00000e  4288              CMP      r0,r1
000010  d1f8              BNE      |L2.4|
                  |L2.18|
;;;270    	return *str;
000012  7810              LDRB     r0,[r2,#0]
;;;271    }
000014  4770              BX       lr
;;;272    
                          ENDP


                          AREA ||i.chk_mounted||, CODE, READONLY, ALIGN=2

                  chk_mounted PROC
;;;1654   static
;;;1655   FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;1656   	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
;;;1657   	FATFS **rfs,		/* Pointer to pointer to the found file system object */
;;;1658   	BYTE chk_wp			/* !=0: Check media write protection for write access */
;;;1659   )
;;;1660   {
000002  b08c              SUB      sp,sp,#0x30
;;;1661   	BYTE fmt, b, *tbl;
;;;1662   	UINT vol;
;;;1663   	DSTATUS stat;
;;;1664   	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
;;;1665   	WORD nrsv;
;;;1666   	const TCHAR *p = *path;
000004  980c              LDR      r0,[sp,#0x30]
000006  6800              LDR      r0,[r0,#0]
000008  9002              STR      r0,[sp,#8]
;;;1667   	FATFS *fs;
;;;1668   
;;;1669   	/* Get logical drive number from the path name */
;;;1670   	vol = p[0] - '0';				/* Is there a drive number? */
00000a  9802              LDR      r0,[sp,#8]
00000c  7800              LDRB     r0,[r0,#0]
00000e  3830              SUBS     r0,r0,#0x30
000010  900b              STR      r0,[sp,#0x2c]
;;;1671   	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
000012  980b              LDR      r0,[sp,#0x2c]
000014  2809              CMP      r0,#9
000016  d80a              BHI      |L3.46|
000018  9802              LDR      r0,[sp,#8]
00001a  7840              LDRB     r0,[r0,#1]
00001c  283a              CMP      r0,#0x3a
00001e  d106              BNE      |L3.46|
;;;1672   		p += 2; *path = p;			/* Return pointer to the path name */
000020  9802              LDR      r0,[sp,#8]
000022  1c80              ADDS     r0,r0,#2
000024  9002              STR      r0,[sp,#8]
000026  990c              LDR      r1,[sp,#0x30]
000028  9802              LDR      r0,[sp,#8]
00002a  6008              STR      r0,[r1,#0]
00002c  e002              B        |L3.52|
                  |L3.46|
;;;1673   	} else {						/* No drive number is given */
;;;1674   #if _FS_RPATH
;;;1675   		vol = Drive;				/* Use current drive */
00002e  48f2              LDR      r0,|L3.1016|
000030  7800              LDRB     r0,[r0,#0]  ; Drive
000032  900b              STR      r0,[sp,#0x2c]
                  |L3.52|
;;;1676   #else
;;;1677   		vol = 0;					/* Use drive 0 */
;;;1678   #endif
;;;1679   	}
;;;1680   
;;;1681   	/* Check if the logical drive is valid or not */
;;;1682   	if (vol >= _DRIVES) 			/* Is the drive number valid? */
000034  980b              LDR      r0,[sp,#0x2c]
000036  2800              CMP      r0,#0
000038  d002              BEQ      |L3.64|
;;;1683   		return FR_INVALID_DRIVE;
00003a  200b              MOVS     r0,#0xb
                  |L3.60|
;;;1684   	*rfs = fs = FatFs[vol];			/* Return pointer to the corresponding file system object */
;;;1685   	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
;;;1686   
;;;1687   	ENTER_FF(fs);					/* Lock file system */
;;;1688   
;;;1689   	if (fs->fs_type) {				/* If the logical drive has been mounted */
;;;1690   		stat = disk_status(fs->drv);
;;;1691   		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
;;;1692   #if !_FS_READONLY
;;;1693   			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
;;;1694   				return FR_WRITE_PROTECTED;
;;;1695   #endif
;;;1696   			return FR_OK;			/* The file system object is valid */
;;;1697   		}
;;;1698   	}
;;;1699   
;;;1700   	/* The logical drive must be mounted. Following code attempts to mount the volume (initialize the file system object) */
;;;1701   
;;;1702   	fs->fs_type = 0;					/* Clear the file system object */
;;;1703   	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
;;;1704   	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
;;;1705   	if (stat & STA_NOINIT)				/* Check if the drive is ready */
;;;1706   		return FR_NOT_READY;
;;;1707   #if _MAX_SS != 512						/* Get disk sector size if needed */
;;;1708   	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
;;;1709   		return FR_NO_FILESYSTEM;
;;;1710   #endif
;;;1711   #if !_FS_READONLY
;;;1712   	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
;;;1713   		return FR_WRITE_PROTECTED;
;;;1714   #endif
;;;1715   	/* Search FAT partition on the drive (Supports only generic partitionings, FDISK and SFD) */
;;;1716   	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
;;;1717   	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
;;;1718   		/* Check the partition listed in top of the partition table */
;;;1719   		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
;;;1720   		if (tbl[4]) {									/* Is the partition existing? */
;;;1721   			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
;;;1722   			fmt = check_fs(fs, bsect);					/* Check the partition */
;;;1723   		}
;;;1724   	}
;;;1725   	if (fmt == 3) return FR_DISK_ERR;
;;;1726   	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
;;;1727   
;;;1728   	/* Following code initializes the file system object */
;;;1729   
;;;1730   	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
;;;1731   		return FR_NO_FILESYSTEM;
;;;1732   
;;;1733   	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
;;;1734   	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
;;;1735   	fs->fsize = fasize;
;;;1736   
;;;1737   	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
;;;1738   	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
;;;1739   	fasize *= b;										/* Number of sectors for FAT area */
;;;1740   
;;;1741   	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
;;;1742   	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be 1,2,4...128) */
;;;1743   
;;;1744   	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
;;;1745   	if (fs->n_rootdir % (SS(fs) / 32)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
;;;1746   
;;;1747   	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
;;;1748   	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
;;;1749   
;;;1750   	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
;;;1751   	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
;;;1752   
;;;1753   	/* Determine the FAT sub type */
;;;1754   	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
;;;1755   	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
;;;1756   	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
;;;1757   	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
;;;1758   	fmt = FS_FAT12;
;;;1759   	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
;;;1760   	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
;;;1761   
;;;1762   	/* Boundaries and Limits */
;;;1763   	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
;;;1764   	fs->database = bsect + sysect;						/* Data start sector */
;;;1765   	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
;;;1766   	if (fmt == FS_FAT32) {
;;;1767   		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
;;;1768   		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
;;;1769   		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
;;;1770   	} else {
;;;1771   		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
;;;1772   		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
;;;1773   		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
;;;1774   			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
;;;1775   	}
;;;1776   	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (FAT size must not be less than FAT sectors */
;;;1777   		return FR_NO_FILESYSTEM;
;;;1778   
;;;1779   #if !_FS_READONLY
;;;1780   	/* Initialize cluster allocation information */
;;;1781   	fs->free_clust = 0xFFFFFFFF;
;;;1782   	fs->last_clust = 0;
;;;1783   
;;;1784   	/* Get fsinfo if available */
;;;1785   	if (fmt == FS_FAT32) {
;;;1786   	 	fs->fsi_flag = 0;
;;;1787   		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
;;;1788   		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
;;;1789   			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
;;;1790   			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
;;;1791   			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
;;;1792   				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
;;;1793   				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
;;;1794   		}
;;;1795   	}
;;;1796   #endif
;;;1797   	fs->fs_type = fmt;		/* FAT sub-type */
;;;1798   	fs->id = ++Fsid;		/* File system mount ID */
;;;1799   	fs->winsect = 0;		/* Invalidate sector cache */
;;;1800   	fs->wflag = 0;
;;;1801   #if _FS_RPATH
;;;1802   	fs->cdir = 0;			/* Current directory (root dir) */
;;;1803   #endif
;;;1804   #if _FS_SHARE				/* Clear file lock semaphores */
;;;1805   	for (vol = 0; vol < _FS_SHARE; vol++)
;;;1806   		fs->flsem[vol].ctr = 0;
;;;1807   #endif
;;;1808   
;;;1809   	return FR_OK;
;;;1810   }
00003c  b00f              ADD      sp,sp,#0x3c
00003e  bdf0              POP      {r4-r7,pc}
                  |L3.64|
000040  980b              LDR      r0,[sp,#0x2c]         ;1684
000042  0080              LSLS     r0,r0,#2              ;1684
000044  49ed              LDR      r1,|L3.1020|
000046  580c              LDR      r4,[r1,r0]            ;1684
000048  980d              LDR      r0,[sp,#0x34]         ;1684
00004a  6004              STR      r4,[r0,#0]            ;1684
00004c  2c00              CMP      r4,#0                 ;1685
00004e  d101              BNE      |L3.84|
000050  200c              MOVS     r0,#0xc               ;1685
000052  e7f3              B        |L3.60|
                  |L3.84|
000054  7820              LDRB     r0,[r4,#0]            ;1689
000056  2800              CMP      r0,#0                 ;1689
000058  d014              BEQ      |L3.132|
00005a  7860              LDRB     r0,[r4,#1]            ;1690
00005c  f7fffffe          BL       disk_status
000060  900a              STR      r0,[sp,#0x28]         ;1690
000062  980a              LDR      r0,[sp,#0x28]         ;1691
000064  07c0              LSLS     r0,r0,#31             ;1691
000066  0fc0              LSRS     r0,r0,#31             ;1691
000068  2800              CMP      r0,#0                 ;1691
00006a  d10b              BNE      |L3.132|
00006c  980e              LDR      r0,[sp,#0x38]         ;1693
00006e  2800              CMP      r0,#0                 ;1693
000070  d006              BEQ      |L3.128|
000072  2104              MOVS     r1,#4                 ;1693
000074  980a              LDR      r0,[sp,#0x28]         ;1693
000076  4008              ANDS     r0,r0,r1              ;1693
000078  2800              CMP      r0,#0                 ;1693
00007a  d001              BEQ      |L3.128|
00007c  200a              MOVS     r0,#0xa               ;1694
00007e  e7dd              B        |L3.60|
                  |L3.128|
000080  2000              MOVS     r0,#0                 ;1696
000082  e7db              B        |L3.60|
                  |L3.132|
000084  2000              MOVS     r0,#0                 ;1702
000086  7020              STRB     r0,[r4,#0]            ;1702
000088  980b              LDR      r0,[sp,#0x2c]         ;1703
00008a  7060              STRB     r0,[r4,#1]            ;1703
00008c  7860              LDRB     r0,[r4,#1]            ;1704
00008e  f7fffffe          BL       disk_initialize
000092  900a              STR      r0,[sp,#0x28]         ;1704
000094  980a              LDR      r0,[sp,#0x28]         ;1705
000096  07c0              LSLS     r0,r0,#31             ;1705
000098  0fc0              LSRS     r0,r0,#31             ;1705
00009a  2800              CMP      r0,#0                 ;1705
00009c  d001              BEQ      |L3.162|
00009e  2003              MOVS     r0,#3                 ;1706
0000a0  e7cc              B        |L3.60|
                  |L3.162|
0000a2  980e              LDR      r0,[sp,#0x38]         ;1712
0000a4  2800              CMP      r0,#0                 ;1712
0000a6  d006              BEQ      |L3.182|
0000a8  2104              MOVS     r1,#4                 ;1712
0000aa  980a              LDR      r0,[sp,#0x28]         ;1712
0000ac  4008              ANDS     r0,r0,r1              ;1712
0000ae  2800              CMP      r0,#0                 ;1712
0000b0  d001              BEQ      |L3.182|
0000b2  200a              MOVS     r0,#0xa               ;1713
0000b4  e7c2              B        |L3.60|
                  |L3.182|
0000b6  2000              MOVS     r0,#0                 ;1716
0000b8  4601              MOV      r1,r0                 ;1716
0000ba  9009              STR      r0,[sp,#0x24]         ;1716
0000bc  4620              MOV      r0,r4                 ;1716
0000be  f7fffffe          BL       check_fs
0000c2  4605              MOV      r5,r0                 ;1716
0000c4  2d01              CMP      r5,#1                 ;1717
0000c6  d115              BNE      |L3.244|
0000c8  4627              MOV      r7,r4                 ;1719
0000ca  37ff              ADDS     r7,r7,#0xff           ;1719
0000cc  37f3              ADDS     r7,r7,#0xf3           ;1719
0000ce  7938              LDRB     r0,[r7,#4]            ;1720
0000d0  2800              CMP      r0,#0                 ;1720
0000d2  d00f              BEQ      |L3.244|
0000d4  7af8              LDRB     r0,[r7,#0xb]          ;1721
0000d6  0600              LSLS     r0,r0,#24             ;1721
0000d8  7ab9              LDRB     r1,[r7,#0xa]          ;1721
0000da  0409              LSLS     r1,r1,#16             ;1721
0000dc  4308              ORRS     r0,r0,r1              ;1721
0000de  7a79              LDRB     r1,[r7,#9]            ;1721
0000e0  0209              LSLS     r1,r1,#8              ;1721
0000e2  4308              ORRS     r0,r0,r1              ;1721
0000e4  7a39              LDRB     r1,[r7,#8]            ;1721
0000e6  4308              ORRS     r0,r0,r1              ;1721
0000e8  9009              STR      r0,[sp,#0x24]         ;1721
0000ea  4620              MOV      r0,r4                 ;1722
0000ec  9909              LDR      r1,[sp,#0x24]         ;1722
0000ee  f7fffffe          BL       check_fs
0000f2  4605              MOV      r5,r0                 ;1722
                  |L3.244|
0000f4  2d03              CMP      r5,#3                 ;1725
0000f6  d101              BNE      |L3.252|
0000f8  2001              MOVS     r0,#1                 ;1725
0000fa  e79f              B        |L3.60|
                  |L3.252|
0000fc  2d00              CMP      r5,#0                 ;1726
0000fe  d001              BEQ      |L3.260|
000100  200d              MOVS     r0,#0xd               ;1726
000102  e79b              B        |L3.60|
                  |L3.260|
000104  2040              MOVS     r0,#0x40              ;1730
000106  5d00              LDRB     r0,[r0,r4]            ;1730
000108  0200              LSLS     r0,r0,#8              ;1730
00010a  213f              MOVS     r1,#0x3f              ;1730
00010c  5d09              LDRB     r1,[r1,r4]            ;1730
00010e  4308              ORRS     r0,r0,r1              ;1730
000110  2101              MOVS     r1,#1                 ;1730
000112  0249              LSLS     r1,r1,#9              ;1730
000114  4288              CMP      r0,r1                 ;1730
000116  d001              BEQ      |L3.284|
000118  200d              MOVS     r0,#0xd               ;1731
00011a  e78f              B        |L3.60|
                  |L3.284|
00011c  204b              MOVS     r0,#0x4b              ;1733
00011e  5d00              LDRB     r0,[r0,r4]            ;1733
000120  0200              LSLS     r0,r0,#8              ;1733
000122  214a              MOVS     r1,#0x4a              ;1733
000124  5d09              LDRB     r1,[r1,r4]            ;1733
000126  4308              ORRS     r0,r0,r1              ;1733
000128  9008              STR      r0,[sp,#0x20]         ;1733
00012a  9808              LDR      r0,[sp,#0x20]         ;1734
00012c  2800              CMP      r0,#0                 ;1734
00012e  d10e              BNE      |L3.334|
000130  205b              MOVS     r0,#0x5b              ;1734
000132  5d00              LDRB     r0,[r0,r4]            ;1734
000134  0601              LSLS     r1,r0,#24             ;1734
000136  205a              MOVS     r0,#0x5a              ;1734
000138  5d00              LDRB     r0,[r0,r4]            ;1734
00013a  0400              LSLS     r0,r0,#16             ;1734
00013c  4308              ORRS     r0,r0,r1              ;1734
00013e  2159              MOVS     r1,#0x59              ;1734
000140  5d09              LDRB     r1,[r1,r4]            ;1734
000142  0209              LSLS     r1,r1,#8              ;1734
000144  4308              ORRS     r0,r0,r1              ;1734
000146  2158              MOVS     r1,#0x58              ;1734
000148  5d09              LDRB     r1,[r1,r4]            ;1734
00014a  4308              ORRS     r0,r0,r1              ;1734
00014c  9008              STR      r0,[sp,#0x20]         ;1734
                  |L3.334|
00014e  9808              LDR      r0,[sp,#0x20]         ;1735
000150  6220              STR      r0,[r4,#0x20]         ;1735
000152  2044              MOVS     r0,#0x44              ;1737
000154  5d06              LDRB     r6,[r0,r4]            ;1737
000156  70e6              STRB     r6,[r4,#3]            ;1737
000158  2e01              CMP      r6,#1                 ;1738
00015a  d003              BEQ      |L3.356|
00015c  2e02              CMP      r6,#2                 ;1738
00015e  d001              BEQ      |L3.356|
000160  200d              MOVS     r0,#0xd               ;1738
000162  e76b              B        |L3.60|
                  |L3.356|
000164  9808              LDR      r0,[sp,#0x20]         ;1739
000166  4370              MULS     r0,r6,r0              ;1739
000168  9008              STR      r0,[sp,#0x20]         ;1739
00016a  2041              MOVS     r0,#0x41              ;1741
00016c  5d00              LDRB     r0,[r0,r4]            ;1741
00016e  4606              MOV      r6,r0                 ;1741
000170  70a0              STRB     r0,[r4,#2]            ;1741
000172  2e00              CMP      r6,#0                 ;1742
000174  d003              BEQ      |L3.382|
000176  1e70              SUBS     r0,r6,#1              ;1742
000178  4030              ANDS     r0,r0,r6              ;1742
00017a  2800              CMP      r0,#0                 ;1742
00017c  d001              BEQ      |L3.386|
                  |L3.382|
00017e  200d              MOVS     r0,#0xd               ;1742
000180  e75c              B        |L3.60|
                  |L3.386|
000182  2046              MOVS     r0,#0x46              ;1744
000184  5d00              LDRB     r0,[r0,r4]            ;1744
000186  0200              LSLS     r0,r0,#8              ;1744
000188  2145              MOVS     r1,#0x45              ;1744
00018a  5d09              LDRB     r1,[r1,r4]            ;1744
00018c  4308              ORRS     r0,r0,r1              ;1744
00018e  8120              STRH     r0,[r4,#8]            ;1744
000190  7a20              LDRB     r0,[r4,#8]            ;1745
000192  0700              LSLS     r0,r0,#28             ;1745
000194  0f00              LSRS     r0,r0,#28             ;1745
000196  2800              CMP      r0,#0                 ;1745
000198  d001              BEQ      |L3.414|
00019a  200d              MOVS     r0,#0xd               ;1745
00019c  e74e              B        |L3.60|
                  |L3.414|
00019e  2048              MOVS     r0,#0x48              ;1747
0001a0  5d00              LDRB     r0,[r0,r4]            ;1747
0001a2  0200              LSLS     r0,r0,#8              ;1747
0001a4  2147              MOVS     r1,#0x47              ;1747
0001a6  5d09              LDRB     r1,[r1,r4]            ;1747
0001a8  4308              ORRS     r0,r0,r1              ;1747
0001aa  9007              STR      r0,[sp,#0x1c]         ;1747
0001ac  9807              LDR      r0,[sp,#0x1c]         ;1748
0001ae  2800              CMP      r0,#0                 ;1748
0001b0  d10e              BNE      |L3.464|
0001b2  2057              MOVS     r0,#0x57              ;1748
0001b4  5d00              LDRB     r0,[r0,r4]            ;1748
0001b6  0601              LSLS     r1,r0,#24             ;1748
0001b8  2056              MOVS     r0,#0x56              ;1748
0001ba  5d00              LDRB     r0,[r0,r4]            ;1748
0001bc  0400              LSLS     r0,r0,#16             ;1748
0001be  4308              ORRS     r0,r0,r1              ;1748
0001c0  2155              MOVS     r1,#0x55              ;1748
0001c2  5d09              LDRB     r1,[r1,r4]            ;1748
0001c4  0209              LSLS     r1,r1,#8              ;1748
0001c6  4308              ORRS     r0,r0,r1              ;1748
0001c8  2154              MOVS     r1,#0x54              ;1748
0001ca  5d09              LDRB     r1,[r1,r4]            ;1748
0001cc  4308              ORRS     r0,r0,r1              ;1748
0001ce  9007              STR      r0,[sp,#0x1c]         ;1748
                  |L3.464|
0001d0  2043              MOVS     r0,#0x43              ;1750
0001d2  5d00              LDRB     r0,[r0,r4]            ;1750
0001d4  0200              LSLS     r0,r0,#8              ;1750
0001d6  2142              MOVS     r1,#0x42              ;1750
0001d8  5d09              LDRB     r1,[r1,r4]            ;1750
0001da  4308              ORRS     r0,r0,r1              ;1750
0001dc  9003              STR      r0,[sp,#0xc]          ;1750
0001de  9803              LDR      r0,[sp,#0xc]          ;1751
0001e0  2800              CMP      r0,#0                 ;1751
0001e2  d101              BNE      |L3.488|
0001e4  200d              MOVS     r0,#0xd               ;1751
0001e6  e729              B        |L3.60|
                  |L3.488|
0001e8  9908              LDR      r1,[sp,#0x20]         ;1754
0001ea  9803              LDR      r0,[sp,#0xc]          ;1754
0001ec  1840              ADDS     r0,r0,r1              ;1754
0001ee  8921              LDRH     r1,[r4,#8]            ;1754
0001f0  0909              LSRS     r1,r1,#4              ;1754
0001f2  1840              ADDS     r0,r0,r1              ;1754
0001f4  9006              STR      r0,[sp,#0x18]         ;1754
0001f6  9907              LDR      r1,[sp,#0x1c]         ;1755
0001f8  9806              LDR      r0,[sp,#0x18]         ;1755
0001fa  4281              CMP      r1,r0                 ;1755
0001fc  d201              BCS      |L3.514|
0001fe  200d              MOVS     r0,#0xd               ;1755
000200  e71c              B        |L3.60|
                  |L3.514|
000202  78a1              LDRB     r1,[r4,#2]            ;1756
000204  9b06              LDR      r3,[sp,#0x18]         ;1756
000206  9a07              LDR      r2,[sp,#0x1c]         ;1756
000208  1ad0              SUBS     r0,r2,r3              ;1756
00020a  f7fffffe          BL       __aeabi_uidivmod
00020e  9005              STR      r0,[sp,#0x14]         ;1756
000210  9805              LDR      r0,[sp,#0x14]         ;1757
000212  2800              CMP      r0,#0                 ;1757
000214  d101              BNE      |L3.538|
000216  200d              MOVS     r0,#0xd               ;1757
000218  e710              B        |L3.60|
                  |L3.538|
00021a  2501              MOVS     r5,#1                 ;1758
00021c  4978              LDR      r1,|L3.1024|
00021e  9805              LDR      r0,[sp,#0x14]         ;1759
000220  4288              CMP      r0,r1                 ;1759
000222  d300              BCC      |L3.550|
000224  2502              MOVS     r5,#2                 ;1759
                  |L3.550|
000226  4977              LDR      r1,|L3.1028|
000228  9805              LDR      r0,[sp,#0x14]         ;1760
00022a  4288              CMP      r0,r1                 ;1760
00022c  d300              BCC      |L3.560|
00022e  2503              MOVS     r5,#3                 ;1760
                  |L3.560|
000230  9805              LDR      r0,[sp,#0x14]         ;1763
000232  1c80              ADDS     r0,r0,#2              ;1763
000234  61e0              STR      r0,[r4,#0x1c]         ;1763
000236  9906              LDR      r1,[sp,#0x18]         ;1764
000238  9809              LDR      r0,[sp,#0x24]         ;1764
00023a  1840              ADDS     r0,r0,r1              ;1764
00023c  62e0              STR      r0,[r4,#0x2c]         ;1764
00023e  9903              LDR      r1,[sp,#0xc]          ;1765
000240  9809              LDR      r0,[sp,#0x24]         ;1765
000242  1840              ADDS     r0,r0,r1              ;1765
000244  6260              STR      r0,[r4,#0x24]         ;1765
000246  2d03              CMP      r5,#3                 ;1766
000248  d117              BNE      |L3.634|
00024a  8920              LDRH     r0,[r4,#8]            ;1767
00024c  2800              CMP      r0,#0                 ;1767
00024e  d001              BEQ      |L3.596|
000250  200d              MOVS     r0,#0xd               ;1767
000252  e6f3              B        |L3.60|
                  |L3.596|
000254  2063              MOVS     r0,#0x63              ;1768
000256  5d00              LDRB     r0,[r0,r4]            ;1768
000258  0601              LSLS     r1,r0,#24             ;1768
00025a  2062              MOVS     r0,#0x62              ;1768
00025c  5d00              LDRB     r0,[r0,r4]            ;1768
00025e  0400              LSLS     r0,r0,#16             ;1768
000260  4308              ORRS     r0,r0,r1              ;1768
000262  2161              MOVS     r1,#0x61              ;1768
000264  5d09              LDRB     r1,[r1,r4]            ;1768
000266  0209              LSLS     r1,r1,#8              ;1768
000268  4308              ORRS     r0,r0,r1              ;1768
00026a  2160              MOVS     r1,#0x60              ;1768
00026c  5d09              LDRB     r1,[r1,r4]            ;1768
00026e  4308              ORRS     r0,r0,r1              ;1768
000270  62a0              STR      r0,[r4,#0x28]         ;1768
000272  69e0              LDR      r0,[r4,#0x1c]         ;1769
000274  0080              LSLS     r0,r0,#2              ;1769
000276  9004              STR      r0,[sp,#0x10]         ;1769
000278  e016              B        |L3.680|
                  |L3.634|
00027a  8920              LDRH     r0,[r4,#8]            ;1771
00027c  2800              CMP      r0,#0                 ;1771
00027e  d101              BNE      |L3.644|
000280  200d              MOVS     r0,#0xd               ;1771
000282  e6db              B        |L3.60|
                  |L3.644|
000284  6a61              LDR      r1,[r4,#0x24]         ;1772
000286  9808              LDR      r0,[sp,#0x20]         ;1772
000288  1808              ADDS     r0,r1,r0              ;1772
00028a  62a0              STR      r0,[r4,#0x28]         ;1772
00028c  2d02              CMP      r5,#2                 ;1773
00028e  d102              BNE      |L3.662|
000290  69e0              LDR      r0,[r4,#0x1c]         ;1774
000292  0040              LSLS     r0,r0,#1              ;1774
000294  e007              B        |L3.678|
                  |L3.662|
000296  69e0              LDR      r0,[r4,#0x1c]         ;1774
000298  0041              LSLS     r1,r0,#1              ;1774
00029a  1840              ADDS     r0,r0,r1              ;1774
00029c  0840              LSRS     r0,r0,#1              ;1774
00029e  7f21              LDRB     r1,[r4,#0x1c]         ;1774
0002a0  07c9              LSLS     r1,r1,#31             ;1774
0002a2  0fc9              LSRS     r1,r1,#31             ;1774
0002a4  1840              ADDS     r0,r0,r1              ;1774
                  |L3.678|
0002a6  9004              STR      r0,[sp,#0x10]         ;1774
                  |L3.680|
0002a8  6a21              LDR      r1,[r4,#0x20]         ;1776
0002aa  9804              LDR      r0,[sp,#0x10]         ;1776
0002ac  30ff              ADDS     r0,r0,#0xff           ;1776
0002ae  30ff              ADDS     r0,r0,#0xff           ;1776
0002b0  3001              ADDS     r0,#1                 ;1776
0002b2  0a40              LSRS     r0,r0,#9              ;1776
0002b4  4281              CMP      r1,r0                 ;1776
0002b6  d201              BCS      |L3.700|
0002b8  200d              MOVS     r0,#0xd               ;1777
0002ba  e6bf              B        |L3.60|
                  |L3.700|
0002bc  2000              MOVS     r0,#0                 ;1781
0002be  43c0              MVNS     r0,r0                 ;1781
0002c0  6120              STR      r0,[r4,#0x10]         ;1781
0002c2  2000              MOVS     r0,#0                 ;1782
0002c4  60e0              STR      r0,[r4,#0xc]          ;1782
0002c6  2d03              CMP      r5,#3                 ;1785
0002c8  d17e              BNE      |L3.968|
0002ca  7160              STRB     r0,[r4,#5]            ;1786
0002cc  2065              MOVS     r0,#0x65              ;1787
0002ce  5d00              LDRB     r0,[r0,r4]            ;1787
0002d0  0201              LSLS     r1,r0,#8              ;1787
0002d2  2064              MOVS     r0,#0x64              ;1787
0002d4  5d00              LDRB     r0,[r0,r4]            ;1787
0002d6  4301              ORRS     r1,r1,r0              ;1787
0002d8  9809              LDR      r0,[sp,#0x24]         ;1787
0002da  1808              ADDS     r0,r1,r0              ;1787
0002dc  6160              STR      r0,[r4,#0x14]         ;1787
0002de  7860              LDRB     r0,[r4,#1]            ;1788
0002e0  6962              LDR      r2,[r4,#0x14]         ;1788
0002e2  2301              MOVS     r3,#1                 ;1788
0002e4  4621              MOV      r1,r4                 ;1788
0002e6  3134              ADDS     r1,r1,#0x34           ;1788
0002e8  9001              STR      r0,[sp,#4]            ;1788
0002ea  f7fffffe          BL       disk_read
0002ee  2800              CMP      r0,#0                 ;1788
0002f0  d174              BNE      |L3.988|
0002f2  4620              MOV      r0,r4                 ;1789
0002f4  3034              ADDS     r0,r0,#0x34           ;1789
0002f6  30ff              ADDS     r0,r0,#0xff           ;1789
0002f8  30ff              ADDS     r0,r0,#0xff           ;1789
0002fa  7840              LDRB     r0,[r0,#1]            ;1789
0002fc  0201              LSLS     r1,r0,#8              ;1789
0002fe  4620              MOV      r0,r4                 ;1789
000300  3034              ADDS     r0,r0,#0x34           ;1789
000302  30ff              ADDS     r0,r0,#0xff           ;1789
000304  30e1              ADDS     r0,r0,#0xe1           ;1789
000306  7f80              LDRB     r0,[r0,#0x1e]         ;1789
000308  4301              ORRS     r1,r1,r0              ;1789
00030a  483f              LDR      r0,|L3.1032|
00030c  4281              CMP      r1,r0                 ;1789
00030e  d165              BNE      |L3.988|
000310  2037              MOVS     r0,#0x37              ;1790
000312  5d00              LDRB     r0,[r0,r4]            ;1790
000314  0600              LSLS     r0,r0,#24             ;1790
000316  2136              MOVS     r1,#0x36              ;1790
000318  5d09              LDRB     r1,[r1,r4]            ;1790
00031a  0409              LSLS     r1,r1,#16             ;1790
00031c  4308              ORRS     r0,r0,r1              ;1790
00031e  2135              MOVS     r1,#0x35              ;1790
000320  5d09              LDRB     r1,[r1,r4]            ;1790
000322  0209              LSLS     r1,r1,#8              ;1790
000324  4308              ORRS     r0,r0,r1              ;1790
000326  2134              MOVS     r1,#0x34              ;1790
000328  5d09              LDRB     r1,[r1,r4]            ;1790
00032a  4308              ORRS     r0,r0,r1              ;1790
00032c  4937              LDR      r1,|L3.1036|
00032e  4288              CMP      r0,r1                 ;1790
000330  d154              BNE      |L3.988|
000332  4620              MOV      r0,r4                 ;1791
000334  3034              ADDS     r0,r0,#0x34           ;1791
000336  30ff              ADDS     r0,r0,#0xff           ;1791
000338  30e5              ADDS     r0,r0,#0xe5           ;1791
00033a  78c0              LDRB     r0,[r0,#3]            ;1791
00033c  0601              LSLS     r1,r0,#24             ;1791
00033e  4620              MOV      r0,r4                 ;1791
000340  3034              ADDS     r0,r0,#0x34           ;1791
000342  30ff              ADDS     r0,r0,#0xff           ;1791
000344  30e5              ADDS     r0,r0,#0xe5           ;1791
000346  7880              LDRB     r0,[r0,#2]            ;1791
000348  0400              LSLS     r0,r0,#16             ;1791
00034a  4308              ORRS     r0,r0,r1              ;1791
00034c  4621              MOV      r1,r4                 ;1791
00034e  3134              ADDS     r1,r1,#0x34           ;1791
000350  31ff              ADDS     r1,r1,#0xff           ;1791
000352  31e5              ADDS     r1,r1,#0xe5           ;1791
000354  7849              LDRB     r1,[r1,#1]            ;1791
000356  0209              LSLS     r1,r1,#8              ;1791
000358  4308              ORRS     r0,r0,r1              ;1791
00035a  4621              MOV      r1,r4                 ;1791
00035c  3134              ADDS     r1,r1,#0x34           ;1791
00035e  31ff              ADDS     r1,r1,#0xff           ;1791
000360  31e1              ADDS     r1,r1,#0xe1           ;1791
000362  7909              LDRB     r1,[r1,#4]            ;1791
000364  4308              ORRS     r0,r0,r1              ;1791
000366  492a              LDR      r1,|L3.1040|
000368  4288              CMP      r0,r1                 ;1791
00036a  d137              BNE      |L3.988|
00036c  4620              MOV      r0,r4                 ;1792
00036e  3034              ADDS     r0,r0,#0x34           ;1792
000370  30ff              ADDS     r0,r0,#0xff           ;1792
000372  30ed              ADDS     r0,r0,#0xed           ;1792
000374  78c0              LDRB     r0,[r0,#3]            ;1792
000376  0601              LSLS     r1,r0,#24             ;1792
000378  4620              MOV      r0,r4                 ;1792
00037a  3034              ADDS     r0,r0,#0x34           ;1792
00037c  30ff              ADDS     r0,r0,#0xff           ;1792
00037e  30ed              ADDS     r0,r0,#0xed           ;1792
000380  7880              LDRB     r0,[r0,#2]            ;1792
000382  0400              LSLS     r0,r0,#16             ;1792
000384  4308              ORRS     r0,r0,r1              ;1792
000386  4621              MOV      r1,r4                 ;1792
000388  3134              ADDS     r1,r1,#0x34           ;1792
00038a  31ff              ADDS     r1,r1,#0xff           ;1792
00038c  31ed              ADDS     r1,r1,#0xed           ;1792
00038e  7849              LDRB     r1,[r1,#1]            ;1792
000390  0209              LSLS     r1,r1,#8              ;1792
000392  4308              ORRS     r0,r0,r1              ;1792
000394  4621              MOV      r1,r4                 ;1792
000396  3134              ADDS     r1,r1,#0x34           ;1792
000398  31ff              ADDS     r1,r1,#0xff           ;1792
00039a  31e1              ADDS     r1,r1,#0xe1           ;1792
00039c  7b09              LDRB     r1,[r1,#0xc]          ;1792
00039e  4308              ORRS     r0,r0,r1              ;1792
0003a0  60e0              STR      r0,[r4,#0xc]          ;1792
0003a2  4620              MOV      r0,r4                 ;1793
0003a4  3034              ADDS     r0,r0,#0x34           ;1793
0003a6  30ff              ADDS     r0,r0,#0xff           ;1793
0003a8  30e9              ADDS     r0,r0,#0xe9           ;1793
0003aa  78c0              LDRB     r0,[r0,#3]            ;1793
0003ac  0601              LSLS     r1,r0,#24             ;1793
0003ae  4620              MOV      r0,r4                 ;1793
0003b0  3034              ADDS     r0,r0,#0x34           ;1793
0003b2  30ff              ADDS     r0,r0,#0xff           ;1793
0003b4  30e9              ADDS     r0,r0,#0xe9           ;1793
0003b6  7880              LDRB     r0,[r0,#2]            ;1793
0003b8  0400              LSLS     r0,r0,#16             ;1793
0003ba  4308              ORRS     r0,r0,r1              ;1793
0003bc  4621              MOV      r1,r4                 ;1793
0003be  3134              ADDS     r1,r1,#0x34           ;1793
0003c0  31ff              ADDS     r1,r1,#0xff           ;1793
0003c2  31e9              ADDS     r1,r1,#0xe9           ;1793
0003c4  7849              LDRB     r1,[r1,#1]            ;1793
0003c6  e000              B        |L3.970|
                  |L3.968|
0003c8  e008              B        |L3.988|
                  |L3.970|
0003ca  0209              LSLS     r1,r1,#8              ;1793
0003cc  4308              ORRS     r0,r0,r1              ;1793
0003ce  4621              MOV      r1,r4                 ;1793
0003d0  3134              ADDS     r1,r1,#0x34           ;1793
0003d2  31ff              ADDS     r1,r1,#0xff           ;1793
0003d4  31e1              ADDS     r1,r1,#0xe1           ;1793
0003d6  7a09              LDRB     r1,[r1,#8]            ;1793
0003d8  4308              ORRS     r0,r0,r1              ;1793
0003da  6120              STR      r0,[r4,#0x10]         ;1793
                  |L3.988|
0003dc  7025              STRB     r5,[r4,#0]            ;1797
0003de  480d              LDR      r0,|L3.1044|
0003e0  8800              LDRH     r0,[r0,#0]            ;1798  ; Fsid
0003e2  1c40              ADDS     r0,r0,#1              ;1798
0003e4  b280              UXTH     r0,r0                 ;1798
0003e6  490b              LDR      r1,|L3.1044|
0003e8  8008              STRH     r0,[r1,#0]            ;1798
0003ea  80e0              STRH     r0,[r4,#6]            ;1798
0003ec  2000              MOVS     r0,#0                 ;1799
0003ee  6320              STR      r0,[r4,#0x30]         ;1799
0003f0  7120              STRB     r0,[r4,#4]            ;1800
0003f2  61a0              STR      r0,[r4,#0x18]         ;1802
0003f4  bf00              NOP                            ;1809
0003f6  e621              B        |L3.60|
;;;1811   
                          ENDP

                  |L3.1016|
                          DCD      Drive
                  |L3.1020|
                          DCD      FatFs
                  |L3.1024|
                          DCD      0x00000ff6
                  |L3.1028|
                          DCD      0x0000fff6
                  |L3.1032|
                          DCD      0x0000aa55
                  |L3.1036|
                          DCD      0x41615252
                  |L3.1040|
                          DCD      0x61417272
                  |L3.1044|
                          DCD      Fsid

                          AREA ||i.clust2sect||, CODE, READONLY, ALIGN=1

                  clust2sect PROC
;;;693    
;;;694    DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
000000  4602              MOV      r2,r0
;;;695    	FATFS *fs,		/* File system object */
;;;696    	DWORD clst		/* Cluster# to be converted */
;;;697    )
;;;698    {
;;;699    	clst -= 2;
000002  1e89              SUBS     r1,r1,#2
;;;700    	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
000004  69d0              LDR      r0,[r2,#0x1c]
000006  1e80              SUBS     r0,r0,#2
000008  4288              CMP      r0,r1
00000a  d801              BHI      |L4.16|
00000c  2000              MOVS     r0,#0
                  |L4.14|
;;;701    	return clst * fs->csize + fs->database;
;;;702    }
00000e  4770              BX       lr
                  |L4.16|
000010  7890              LDRB     r0,[r2,#2]            ;701
000012  4348              MULS     r0,r1,r0              ;701
000014  6ad3              LDR      r3,[r2,#0x2c]         ;701
000016  18c0              ADDS     r0,r0,r3              ;701
000018  e7f9              B        |L4.14|
;;;703    
                          ENDP


                          AREA ||i.create_chain||, CODE, READONLY, ALIGN=2

                  create_chain PROC
;;;635    static
;;;636    DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;637    	FATFS *fs,			/* File system object */
;;;638    	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
;;;639    )
;;;640    {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
;;;641    	DWORD cs, ncl, scl;
;;;642    
;;;643    
;;;644    	if (clst == 0) {		/* Create a new chain */
000006  9802              LDR      r0,[sp,#8]
000008  2800              CMP      r0,#0
00000a  d107              BNE      |L5.28|
;;;645    		scl = fs->last_clust;			/* Get suggested start point */
00000c  68e7              LDR      r7,[r4,#0xc]
;;;646    		if (!scl || scl >= fs->n_fatent) scl = 1;
00000e  2f00              CMP      r7,#0
000010  d002              BEQ      |L5.24|
000012  69e0              LDR      r0,[r4,#0x1c]
000014  42b8              CMP      r0,r7
000016  d810              BHI      |L5.58|
                  |L5.24|
000018  2701              MOVS     r7,#1
00001a  e00e              B        |L5.58|
                  |L5.28|
;;;647    	}
;;;648    	else {					/* Stretch the current chain */
;;;649    		cs = get_fat(fs, clst);			/* Check the cluster status */
00001c  4620              MOV      r0,r4
00001e  9902              LDR      r1,[sp,#8]
000020  f7fffffe          BL       get_fat
000024  4606              MOV      r6,r0
;;;650    		if (cs < 2) return 1;			/* It is an invalid cluster */
000026  2e02              CMP      r6,#2
000028  d201              BCS      |L5.46|
00002a  2001              MOVS     r0,#1
                  |L5.44|
;;;651    		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
;;;652    		scl = clst;
;;;653    	}
;;;654    
;;;655    	ncl = scl;				/* Start cluster */
;;;656    	for (;;) {
;;;657    		ncl++;							/* Next cluster */
;;;658    		if (ncl >= fs->n_fatent) {		/* Wrap around */
;;;659    			ncl = 2;
;;;660    			if (ncl > scl) return 0;	/* No free cluster */
;;;661    		}
;;;662    		cs = get_fat(fs, ncl);			/* Get the cluster status */
;;;663    		if (cs == 0) break;				/* Found a free cluster */
;;;664    		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
;;;665    			return cs;
;;;666    		if (ncl == scl) return 0;		/* No free cluster */
;;;667    	}
;;;668    
;;;669    	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "last link" */
;;;670    		return 0xFFFFFFFF;
;;;671    	if (clst != 0) {					/* Link it to the previous one if needed */
;;;672    		if (put_fat(fs, clst, ncl))
;;;673    			return 0xFFFFFFFF;
;;;674    	}
;;;675    
;;;676    	fs->last_clust = ncl;				/* Update FSINFO */
;;;677    	if (fs->free_clust != 0xFFFFFFFF) {
;;;678    		fs->free_clust--;
;;;679    		fs->fsi_flag = 1;
;;;680    	}
;;;681    
;;;682    	return ncl;		/* Return new cluster number */
;;;683    }
00002c  bdfe              POP      {r1-r7,pc}
                  |L5.46|
00002e  69e0              LDR      r0,[r4,#0x1c]         ;651
000030  42b0              CMP      r0,r6                 ;651
000032  d901              BLS      |L5.56|
000034  4630              MOV      r0,r6                 ;651
000036  e7f9              B        |L5.44|
                  |L5.56|
000038  9f02              LDR      r7,[sp,#8]            ;652
                  |L5.58|
00003a  463d              MOV      r5,r7                 ;655
00003c  bf00              NOP                            ;656
                  |L5.62|
00003e  1c6d              ADDS     r5,r5,#1              ;657
000040  69e0              LDR      r0,[r4,#0x1c]         ;658
000042  42a8              CMP      r0,r5                 ;658
000044  d804              BHI      |L5.80|
000046  2502              MOVS     r5,#2                 ;659
000048  42bd              CMP      r5,r7                 ;660
00004a  d901              BLS      |L5.80|
00004c  2000              MOVS     r0,#0                 ;660
00004e  e7ed              B        |L5.44|
                  |L5.80|
000050  4629              MOV      r1,r5                 ;662
000052  4620              MOV      r0,r4                 ;662
000054  f7fffffe          BL       get_fat
000058  4606              MOV      r6,r0                 ;662
00005a  2e00              CMP      r6,#0                 ;663
00005c  d100              BNE      |L5.96|
00005e  e00a              B        |L5.118|
                  |L5.96|
000060  1c70              ADDS     r0,r6,#1              ;664
000062  2800              CMP      r0,#0                 ;664
000064  d001              BEQ      |L5.106|
000066  2e01              CMP      r6,#1                 ;664
000068  d101              BNE      |L5.110|
                  |L5.106|
00006a  4630              MOV      r0,r6                 ;665
00006c  e7de              B        |L5.44|
                  |L5.110|
00006e  42bd              CMP      r5,r7                 ;666
000070  d1e5              BNE      |L5.62|
000072  2000              MOVS     r0,#0                 ;666
000074  e7da              B        |L5.44|
                  |L5.118|
000076  bf00              NOP                            ;663
000078  4a11              LDR      r2,|L5.192|
00007a  4629              MOV      r1,r5                 ;669
00007c  4620              MOV      r0,r4                 ;669
00007e  f7fffffe          BL       put_fat
000082  2800              CMP      r0,#0                 ;669
000084  d002              BEQ      |L5.140|
000086  2000              MOVS     r0,#0                 ;670
000088  43c0              MVNS     r0,r0                 ;670
00008a  e7cf              B        |L5.44|
                  |L5.140|
00008c  9802              LDR      r0,[sp,#8]            ;671
00008e  2800              CMP      r0,#0                 ;671
000090  d009              BEQ      |L5.166|
000092  462a              MOV      r2,r5                 ;672
000094  4620              MOV      r0,r4                 ;672
000096  9902              LDR      r1,[sp,#8]            ;672
000098  f7fffffe          BL       put_fat
00009c  2800              CMP      r0,#0                 ;672
00009e  d002              BEQ      |L5.166|
0000a0  2000              MOVS     r0,#0                 ;673
0000a2  43c0              MVNS     r0,r0                 ;673
0000a4  e7c2              B        |L5.44|
                  |L5.166|
0000a6  60e5              STR      r5,[r4,#0xc]          ;676
0000a8  6920              LDR      r0,[r4,#0x10]         ;677
0000aa  1c40              ADDS     r0,r0,#1              ;677
0000ac  2800              CMP      r0,#0                 ;677
0000ae  d004              BEQ      |L5.186|
0000b0  6920              LDR      r0,[r4,#0x10]         ;678
0000b2  1e40              SUBS     r0,r0,#1              ;678
0000b4  6120              STR      r0,[r4,#0x10]         ;678
0000b6  2001              MOVS     r0,#1                 ;679
0000b8  7160              STRB     r0,[r4,#5]            ;679
                  |L5.186|
0000ba  4628              MOV      r0,r5                 ;682
0000bc  e7b6              B        |L5.44|
;;;684    #endif /* !_FS_READONLY */
                          ENDP

0000be  0000              DCW      0x0000
                  |L5.192|
                          DCD      0x0fffffff

                          AREA ||i.create_name||, CODE, READONLY, ALIGN=2

                  create_name PROC
;;;1267   static
;;;1268   FRESULT create_name (
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;1269   	DIR *dj,			/* Pointer to the directory object */
;;;1270   	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
;;;1271   )
;;;1272   {
000002  b083              SUB      sp,sp,#0xc
;;;1273   #ifdef _EXCVT
;;;1274   	static const BYTE excvt[] = _EXCVT;	/* Upper conversion table for extended chars */
;;;1275   #endif
;;;1276   
;;;1277   #if _USE_LFN	/* LFN configuration */
;;;1278   	BYTE b, cf;
;;;1279   	WCHAR w, *lfn;
;;;1280   	int i, ni, si, di;
;;;1281   	const TCHAR *p;
;;;1282   
;;;1283   	/* Create LFN in Unicode */
;;;1284   	si = di = 0;
;;;1285   	p = *path;
;;;1286   	lfn = dj->lfn;
;;;1287   	for (;;) {
;;;1288   		w = p[si++];					/* Get a character */
;;;1289   		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
;;;1290   		if (di >= _MAX_LFN)				/* Reject too long name */
;;;1291   			return FR_INVALID_NAME;
;;;1292   #if !_LFN_UNICODE
;;;1293   		w &= 0xFF;
;;;1294   		if (IsDBCS1(w)) {				/* If it is a DBC 1st byte */
;;;1295   			b = p[si++];				/* Get 2nd byte */
;;;1296   			if (!IsDBCS2(b))			/* Reject invalid code for DBC */
;;;1297   				return FR_INVALID_NAME;
;;;1298   #if(IsDBCS2(b))
;;;1299   			w = (w << 8) + b;
;;;1300   #endif
;;;1301   		}
;;;1302   		w = ff_convert(w, 1);			/* Convert OEM to Unicode */
;;;1303   		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
;;;1304   #endif
;;;1305   		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
;;;1306   			return FR_INVALID_NAME;
;;;1307   		lfn[di++] = w;					/* Store the Unicode char */
;;;1308   	}
;;;1309   	*path = &p[si];						/* Return pointer to the next segment */
;;;1310   	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1311   #if _FS_RPATH
;;;1312   	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
;;;1313   		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
;;;1314   		lfn[di] = 0;
;;;1315   		for (i = 0; i < 11; i++)
;;;1316   			dj->fn[i] = (i < di) ? '.' : ' ';
;;;1317   		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
;;;1318   		return FR_OK;
;;;1319   	}
;;;1320   #endif
;;;1321   	while (di) {						/* Strip trailing spaces and dots */
;;;1322   		w = lfn[di - 1];
;;;1323   		if (w != ' ' && w != '.') break;
;;;1324   		di--;
;;;1325   	}
;;;1326   	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
;;;1327   
;;;1328   	lfn[di] = 0;						/* LFN is created */
;;;1329   
;;;1330   	/* Create SFN in directory form */
;;;1331   	mem_set(dj->fn, ' ', 11);
;;;1332   	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
;;;1333   	if (si) cf |= NS_LOSS | NS_LFN;
;;;1334   	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
;;;1335   
;;;1336   	b = i = 0; ni = 8;
;;;1337   	for (;;) {
;;;1338   		w = lfn[si++];					/* Get an LFN char */
;;;1339   		if (!w) break;					/* Break on end of the LFN */
;;;1340   		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
;;;1341   			cf |= NS_LOSS | NS_LFN; continue;
;;;1342   		}
;;;1343   
;;;1344   		if (i >= ni || si == di) {		/* Extension or end of SFN */
;;;1345   			if (ni == 11) {				/* Long extension */
;;;1346   				cf |= NS_LOSS | NS_LFN; break;
;;;1347   			}
;;;1348   			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
;;;1349   			if (si > di) break;			/* No extension */
;;;1350   			si = di; i = 8; ni = 11;	/* Enter extension section */
;;;1351   			b <<= 2; continue;
;;;1352   		}
;;;1353   
;;;1354   		if (w >= 0x80) {				/* Non ASCII char */
;;;1355   #ifdef _EXCVT
;;;1356   			w = ff_convert(w, 0);		/* Unicode -> OEM code */
;;;1357   			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
;;;1358   #else
;;;1359   			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
;;;1360   #endif
;;;1361   			cf |= NS_LFN;				/* Force create LFN entry */
;;;1362   		}
;;;1363   
;;;1364   		if (_DF1S && w >= 0x100) {		/* Double byte char */
;;;1365   			if (i >= ni - 1) {
;;;1366   				cf |= NS_LOSS | NS_LFN; i = ni; continue;
;;;1367   			}
;;;1368   			dj->fn[i++] = (BYTE)(w >> 8);
;;;1369   		} else {						/* Single byte char */
;;;1370   			if (!w || chk_chr("+,;=[]", w)) {		/* Replace illegal chars for SFN */
;;;1371   				w = '_'; cf |= NS_LOSS | NS_LFN;	/* Lossy conversion */
;;;1372   			} else {
;;;1373   				if (IsUpper(w)) {		/* ASCII large capital */
;;;1374   					b |= 2;
;;;1375   				} else {
;;;1376   					if (IsLower(w)) {	/* ASCII small capital */
;;;1377   						b |= 1; w -= 0x20;
;;;1378   					}
;;;1379   				}
;;;1380   			}
;;;1381   		}
;;;1382   		dj->fn[i++] = (BYTE)w;
;;;1383   	}
;;;1384   
;;;1385   	if (dj->fn[0] == 0xE5) dj->fn[0] = 0x05;	/* If the first char collides with deleted mark, replace it with 0x05 */
;;;1386   
;;;1387   	if (ni == 8) b <<= 2;
;;;1388   	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
;;;1389   		cf |= NS_LFN;
;;;1390   	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
;;;1391   		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
;;;1392   		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
;;;1393   	}
;;;1394   
;;;1395   	dj->fn[NS] = cf;	/* SFN is created */
;;;1396   
;;;1397   	return FR_OK;
;;;1398   
;;;1399   
;;;1400   #else	/* Non-LFN configuration */
;;;1401   	BYTE b, c, d, *sfn;
;;;1402   	int ni, si, i;
;;;1403   	const char *p;
;;;1404   
;;;1405   	/* Create file name in directory form */
;;;1406   	sfn = dj->fn;
000004  9803              LDR      r0,[sp,#0xc]
000006  6986              LDR      r6,[r0,#0x18]
;;;1407   	mem_set(sfn, ' ', 11);
000008  220b              MOVS     r2,#0xb
00000a  2120              MOVS     r1,#0x20
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       mem_set
;;;1408   	si = i = b = 0; ni = 8;
000012  2000              MOVS     r0,#0
000014  4605              MOV      r5,r0
000016  4607              MOV      r7,r0
000018  9001              STR      r0,[sp,#4]
00001a  2008              MOVS     r0,#8
00001c  9002              STR      r0,[sp,#8]
;;;1409   	p = *path;
00001e  9804              LDR      r0,[sp,#0x10]
000020  6800              LDR      r0,[r0,#0]
000022  9000              STR      r0,[sp,#0]
;;;1410   #if _FS_RPATH
;;;1411   	if (p[si] == '.') { /* Is this a dot entry? */
000024  9800              LDR      r0,[sp,#0]
000026  5dc0              LDRB     r0,[r0,r7]
000028  282e              CMP      r0,#0x2e
00002a  d124              BNE      |L6.118|
;;;1412   		for (;;) {
00002c  bf00              NOP      
                  |L6.46|
;;;1413   			c = (BYTE)p[si++];
00002e  4638              MOV      r0,r7
000030  1c7f              ADDS     r7,r7,#1
000032  9900              LDR      r1,[sp,#0]
000034  5c0c              LDRB     r4,[r1,r0]
;;;1414   			if (c != '.' || si >= 3) break;
000036  2c2e              CMP      r4,#0x2e
000038  d101              BNE      |L6.62|
00003a  2f03              CMP      r7,#3
00003c  db00              BLT      |L6.64|
                  |L6.62|
00003e  e004              B        |L6.74|
                  |L6.64|
;;;1415   			sfn[i++] = c;
000040  9801              LDR      r0,[sp,#4]
000042  1c41              ADDS     r1,r0,#1
000044  9101              STR      r1,[sp,#4]
000046  5434              STRB     r4,[r6,r0]
000048  e7f1              B        |L6.46|
                  |L6.74|
00004a  bf00              NOP                            ;1414
;;;1416   		}
;;;1417   		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
00004c  2c2f              CMP      r4,#0x2f
00004e  d006              BEQ      |L6.94|
000050  2c5c              CMP      r4,#0x5c
000052  d004              BEQ      |L6.94|
000054  2c20              CMP      r4,#0x20
000056  dd02              BLE      |L6.94|
000058  2006              MOVS     r0,#6
                  |L6.90|
;;;1418   		*path = &p[si];									/* Return pointer to the next segment */
;;;1419   		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
;;;1420   		return FR_OK;
;;;1421   	}
;;;1422   #endif
;;;1423   	for (;;) {
;;;1424   		c = (BYTE)p[si++];
;;;1425   		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
;;;1426   		if (c == '.' || i >= ni) {
;;;1427   			if (ni != 8 || c != '.') return FR_INVALID_NAME;
;;;1428   			i = 8; ni = 11;
;;;1429   			b <<= 2; continue;
;;;1430   		}
;;;1431   		if (c >= 0x80) {				/* Extended char */
;;;1432   #ifdef _EXCVT
;;;1433   			c = excvt[c - 0x80];		/* Convert extend char (SBCS) */
;;;1434   #else
;;;1435   			b |= 3;						/* Eliminate NT flag if extended char is exist */
;;;1436   #if !_DF1S	/* ASCII only cfg */
;;;1437   			return FR_INVALID_NAME;
;;;1438   #endif
;;;1439   #endif
;;;1440   		}
;;;1441   		if (IsDBCS1(c)) {				/* DBC 1st byte? */
;;;1442   			d = (BYTE)p[si++];			/* Get 2nd byte */
;;;1443   			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
;;;1444   				return FR_INVALID_NAME;
;;;1445   			sfn[i++] = c;
;;;1446   			sfn[i++] = d;
;;;1447   		} else {						/* Single byte code */
;;;1448   			if (chk_chr("\"*+,:<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
;;;1449   				return FR_INVALID_NAME;
;;;1450   			if (IsUpper(c)) {			/* ASCII large capital? */
;;;1451   				b |= 2;
;;;1452   			} else {
;;;1453   				if (IsLower(c)) {		/* ASCII small capital? */
;;;1454   					b |= 1; c -= 0x20;
;;;1455   				}
;;;1456   			}
;;;1457   			sfn[i++] = c;
;;;1458   		}
;;;1459   	}
;;;1460   	*path = &p[si];						/* Return pointer to the next segment */
;;;1461   	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1462   
;;;1463   	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
;;;1464   	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
;;;1465   
;;;1466   	if (ni == 8) b <<= 2;
;;;1467   	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
;;;1468   	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
;;;1469   
;;;1470   	sfn[NS] = c;		/* Store NT flag, File name is created */
;;;1471   
;;;1472   	return FR_OK;
;;;1473   #endif
;;;1474   }
00005a  b005              ADD      sp,sp,#0x14
00005c  bdf0              POP      {r4-r7,pc}
                  |L6.94|
00005e  9800              LDR      r0,[sp,#0]            ;1418
000060  19c1              ADDS     r1,r0,r7              ;1418
000062  9804              LDR      r0,[sp,#0x10]         ;1418
000064  6001              STR      r1,[r0,#0]            ;1418
000066  2c20              CMP      r4,#0x20              ;1419
000068  dc01              BGT      |L6.110|
00006a  2024              MOVS     r0,#0x24              ;1419
00006c  e000              B        |L6.112|
                  |L6.110|
00006e  2020              MOVS     r0,#0x20              ;1419
                  |L6.112|
000070  72f0              STRB     r0,[r6,#0xb]          ;1419
000072  2000              MOVS     r0,#0                 ;1420
000074  e7f1              B        |L6.90|
                  |L6.118|
000076  bf00              NOP                            ;1423
                  |L6.120|
000078  4638              MOV      r0,r7                 ;1424
00007a  1c7f              ADDS     r7,r7,#1              ;1424
00007c  9900              LDR      r1,[sp,#0]            ;1424
00007e  5c0c              LDRB     r4,[r1,r0]            ;1424
000080  2c20              CMP      r4,#0x20              ;1425
000082  dd03              BLE      |L6.140|
000084  2c2f              CMP      r4,#0x2f              ;1425
000086  d001              BEQ      |L6.140|
000088  2c5c              CMP      r4,#0x5c              ;1425
00008a  d100              BNE      |L6.142|
                  |L6.140|
00008c  e036              B        |L6.252|
                  |L6.142|
00008e  2c2e              CMP      r4,#0x2e              ;1426
000090  d003              BEQ      |L6.154|
000092  9902              LDR      r1,[sp,#8]            ;1426
000094  9801              LDR      r0,[sp,#4]            ;1426
000096  4288              CMP      r0,r1                 ;1426
000098  db0d              BLT      |L6.182|
                  |L6.154|
00009a  9802              LDR      r0,[sp,#8]            ;1427
00009c  2808              CMP      r0,#8                 ;1427
00009e  d101              BNE      |L6.164|
0000a0  2c2e              CMP      r4,#0x2e              ;1427
0000a2  d001              BEQ      |L6.168|
                  |L6.164|
0000a4  2006              MOVS     r0,#6                 ;1427
0000a6  e7d8              B        |L6.90|
                  |L6.168|
0000a8  2008              MOVS     r0,#8                 ;1428
0000aa  9001              STR      r0,[sp,#4]            ;1428
0000ac  200b              MOVS     r0,#0xb               ;1428
0000ae  9002              STR      r0,[sp,#8]            ;1428
0000b0  06a8              LSLS     r0,r5,#26             ;1429
0000b2  0e05              LSRS     r5,r0,#24             ;1429
0000b4  e7e0              B        |L6.120|
                  |L6.182|
0000b6  2c80              CMP      r4,#0x80              ;1431
0000b8  db03              BLT      |L6.194|
0000ba  4620              MOV      r0,r4                 ;1433
0000bc  3880              SUBS     r0,r0,#0x80           ;1433
0000be  4924              LDR      r1,|L6.336|
0000c0  5c0c              LDRB     r4,[r1,r0]            ;1433
                  |L6.194|
0000c2  4621              MOV      r1,r4                 ;1448
0000c4  a023              ADR      r0,|L6.340|
0000c6  f7fffffe          BL       chk_chr
0000ca  2800              CMP      r0,#0                 ;1448
0000cc  d001              BEQ      |L6.210|
0000ce  2006              MOVS     r0,#6                 ;1449
0000d0  e7c3              B        |L6.90|
                  |L6.210|
0000d2  2c41              CMP      r4,#0x41              ;1450
0000d4  db04              BLT      |L6.224|
0000d6  2c5a              CMP      r4,#0x5a              ;1450
0000d8  dc02              BGT      |L6.224|
0000da  2002              MOVS     r0,#2                 ;1451
0000dc  4305              ORRS     r5,r5,r0              ;1451
0000de  e008              B        |L6.242|
                  |L6.224|
0000e0  2c61              CMP      r4,#0x61              ;1453
0000e2  db06              BLT      |L6.242|
0000e4  2c7a              CMP      r4,#0x7a              ;1453
0000e6  dc04              BGT      |L6.242|
0000e8  2001              MOVS     r0,#1                 ;1454
0000ea  4305              ORRS     r5,r5,r0              ;1454
0000ec  4620              MOV      r0,r4                 ;1454
0000ee  3820              SUBS     r0,r0,#0x20           ;1454
0000f0  b2c4              UXTB     r4,r0                 ;1454
                  |L6.242|
0000f2  9801              LDR      r0,[sp,#4]            ;1457
0000f4  1c41              ADDS     r1,r0,#1              ;1457
0000f6  9101              STR      r1,[sp,#4]            ;1457
0000f8  5434              STRB     r4,[r6,r0]            ;1457
0000fa  e7bd              B        |L6.120|
                  |L6.252|
0000fc  bf00              NOP                            ;1425
0000fe  9800              LDR      r0,[sp,#0]            ;1460
000100  19c1              ADDS     r1,r0,r7              ;1460
000102  9804              LDR      r0,[sp,#0x10]         ;1460
000104  6001              STR      r1,[r0,#0]            ;1460
000106  2c20              CMP      r4,#0x20              ;1461
000108  dc01              BGT      |L6.270|
00010a  2004              MOVS     r0,#4                 ;1461
00010c  e000              B        |L6.272|
                  |L6.270|
00010e  2000              MOVS     r0,#0                 ;1461
                  |L6.272|
000110  4604              MOV      r4,r0                 ;1461
000112  9801              LDR      r0,[sp,#4]            ;1463
000114  2800              CMP      r0,#0                 ;1463
000116  d101              BNE      |L6.284|
000118  2006              MOVS     r0,#6                 ;1463
00011a  e79e              B        |L6.90|
                  |L6.284|
00011c  7830              LDRB     r0,[r6,#0]            ;1464
00011e  28e5              CMP      r0,#0xe5              ;1464
000120  d101              BNE      |L6.294|
000122  2005              MOVS     r0,#5                 ;1464
000124  7030              STRB     r0,[r6,#0]            ;1464
                  |L6.294|
000126  9802              LDR      r0,[sp,#8]            ;1466
000128  2808              CMP      r0,#8                 ;1466
00012a  d101              BNE      |L6.304|
00012c  06a8              LSLS     r0,r5,#26             ;1466
00012e  0e05              LSRS     r5,r0,#24             ;1466
                  |L6.304|
000130  07a8              LSLS     r0,r5,#30             ;1467
000132  0f80              LSRS     r0,r0,#30             ;1467
000134  2801              CMP      r0,#1                 ;1467
000136  d101              BNE      |L6.316|
000138  2010              MOVS     r0,#0x10              ;1467
00013a  4304              ORRS     r4,r4,r0              ;1467
                  |L6.316|
00013c  200c              MOVS     r0,#0xc               ;1468
00013e  4028              ANDS     r0,r0,r5              ;1468
000140  2804              CMP      r0,#4                 ;1468
000142  d101              BNE      |L6.328|
000144  2008              MOVS     r0,#8                 ;1468
000146  4304              ORRS     r4,r4,r0              ;1468
                  |L6.328|
000148  72f4              STRB     r4,[r6,#0xb]          ;1470
00014a  2000              MOVS     r0,#0                 ;1472
00014c  e785              B        |L6.90|
;;;1475   
                          ENDP

00014e  0000              DCW      0x0000
                  |L6.336|
                          DCD      excvt
                  |L6.340|
000154  222a2b2c          DCB      """*+,:<=>?[]|",127,0
000158  3a3c3d3e
00015c  3f5b5d7c
000160  7f00    
000162  00                DCB      0
000163  00                DCB      0

                          AREA ||i.dir_find||, CODE, READONLY, ALIGN=1

                  dir_find PROC
;;;998    static
;;;999    FRESULT dir_find (
000000  b5f8              PUSH     {r3-r7,lr}
;;;1000   	DIR *dj			/* Pointer to the directory object linked to the file name */
;;;1001   )
;;;1002   {
000002  4604              MOV      r4,r0
;;;1003   	FRESULT res;
;;;1004   	BYTE c, *dir;
;;;1005   #if _USE_LFN
;;;1006   	BYTE a, ord, sum;
;;;1007   #endif
;;;1008   
;;;1009   	res = dir_sdi(dj, 0);			/* Rewind directory object */
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       dir_sdi
00000c  4605              MOV      r5,r0
;;;1010   	if (res != FR_OK) return res;
00000e  2d00              CMP      r5,#0
000010  d001              BEQ      |L7.22|
000012  4628              MOV      r0,r5
                  |L7.20|
;;;1011   
;;;1012   #if _USE_LFN
;;;1013   	ord = sum = 0xFF;
;;;1014   #endif
;;;1015   	do {
;;;1016   		res = move_window(dj->fs, dj->sect);
;;;1017   		if (res != FR_OK) break;
;;;1018   		dir = dj->dir;					/* Ptr to the directory entry of current index */
;;;1019   		c = dir[DIR_Name];
;;;1020   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
;;;1021   #if _USE_LFN	/* LFN configuration */
;;;1022   		a = dir[DIR_Attr] & AM_MASK;
;;;1023   		if (c == 0xE5 || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
;;;1024   			ord = 0xFF;
;;;1025   		} else {
;;;1026   			if (a == AM_LFN) {			/* An LFN entry is found */
;;;1027   				if (dj->lfn) {
;;;1028   					if (c & 0x40) {		/* Is it start of LFN sequence? */
;;;1029   						sum = dir[LDIR_Chksum];
;;;1030   						c &= 0xBF; ord = c;	/* LFN start order */
;;;1031   						dj->lfn_idx = dj->index;
;;;1032   					}
;;;1033   					/* Check validity of the LFN entry and compare it with given name */
;;;1034   					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
;;;1035   				}
;;;1036   			} else {					/* An SFN entry is found */
;;;1037   				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
;;;1038   				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1039   				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
;;;1040   			}
;;;1041   		}
;;;1042   #else		/* Non LFN configuration */
;;;1043   		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
;;;1044   			break;
;;;1045   #endif
;;;1046   		res = dir_next(dj, 0);		/* Next entry */
;;;1047   	} while (res == FR_OK);
;;;1048   
;;;1049   	return res;
;;;1050   }
000014  bdf8              POP      {r3-r7,pc}
                  |L7.22|
000016  bf00              NOP                            ;1015
                  |L7.24|
000018  6921              LDR      r1,[r4,#0x10]         ;1016
00001a  6820              LDR      r0,[r4,#0]            ;1016
00001c  f7fffffe          BL       move_window
000020  4605              MOV      r5,r0                 ;1016
000022  2d00              CMP      r5,#0                 ;1017
000024  d000              BEQ      |L7.40|
000026  e019              B        |L7.92|
                  |L7.40|
000028  6966              LDR      r6,[r4,#0x14]         ;1018
00002a  7837              LDRB     r7,[r6,#0]            ;1019
00002c  2f00              CMP      r7,#0                 ;1020
00002e  d101              BNE      |L7.52|
000030  2504              MOVS     r5,#4                 ;1020
000032  e013              B        |L7.92|
                  |L7.52|
000034  7af0              LDRB     r0,[r6,#0xb]          ;1043
000036  2108              MOVS     r1,#8                 ;1043
000038  4008              ANDS     r0,r0,r1              ;1043
00003a  2800              CMP      r0,#0                 ;1043
00003c  d107              BNE      |L7.78|
00003e  220b              MOVS     r2,#0xb               ;1043
000040  4630              MOV      r0,r6                 ;1043
000042  69a1              LDR      r1,[r4,#0x18]         ;1043
000044  f7fffffe          BL       mem_cmp
000048  2800              CMP      r0,#0                 ;1043
00004a  d100              BNE      |L7.78|
00004c  e006              B        |L7.92|
                  |L7.78|
00004e  2100              MOVS     r1,#0                 ;1046
000050  4620              MOV      r0,r4                 ;1046
000052  f7fffffe          BL       dir_next
000056  4605              MOV      r5,r0                 ;1046
000058  2d00              CMP      r5,#0                 ;1047
00005a  d0dd              BEQ      |L7.24|
                  |L7.92|
00005c  bf00              NOP                            ;1017
00005e  4628              MOV      r0,r5                 ;1049
000060  e7d8              B        |L7.20|
;;;1051   
                          ENDP


                          AREA ||i.dir_next||, CODE, READONLY, ALIGN=1

                  dir_next PROC
;;;759    static
;;;760    FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;761    	DIR *dj,		/* Pointer to directory object */
;;;762    	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
;;;763    )
;;;764    {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
;;;765    	DWORD clst;
;;;766    	WORD i;
;;;767    
;;;768    
;;;769    	i = dj->index + 1;
000006  88e0              LDRH     r0,[r4,#6]
000008  1c40              ADDS     r0,r0,#1
00000a  b286              UXTH     r6,r0
;;;770    	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
00000c  2e00              CMP      r6,#0
00000e  d002              BEQ      |L8.22|
000010  6920              LDR      r0,[r4,#0x10]
000012  2800              CMP      r0,#0
000014  d101              BNE      |L8.26|
                  |L8.22|
;;;771    		return FR_NO_FILE;
000016  2004              MOVS     r0,#4
                  |L8.24|
;;;772    
;;;773    	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
;;;774    		dj->sect++;					/* Next sector */
;;;775    
;;;776    		if (dj->clust == 0) {	/* Static table */
;;;777    			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
;;;778    				return FR_NO_FILE;
;;;779    		}
;;;780    		else {					/* Dynamic table */
;;;781    			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
;;;782    				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
;;;783    				if (clst <= 1) return FR_INT_ERR;
;;;784    				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;785    				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
;;;786    #if !_FS_READONLY
;;;787    					BYTE c;
;;;788    					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
;;;789    					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
;;;790    					if (clst == 0) return FR_DENIED;			/* No free cluster */
;;;791    					if (clst == 1) return FR_INT_ERR;
;;;792    					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;793    					/* Clean-up stretched table */
;;;794    					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
;;;795    					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
;;;796    					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
;;;797    					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
;;;798    						dj->fs->wflag = 1;
;;;799    						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
;;;800    						dj->fs->winsect++;
;;;801    					}
;;;802    					dj->fs->winsect -= c;						/* Rewind window address */
;;;803    #else
;;;804    					return FR_NO_FILE;			/* Report EOT */
;;;805    #endif
;;;806    				}
;;;807    				dj->clust = clst;				/* Initialize data for new cluster */
;;;808    				dj->sect = clust2sect(dj->fs, clst);
;;;809    			}
;;;810    		}
;;;811    	}
;;;812    
;;;813    	dj->index = i;
;;;814    	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
;;;815    
;;;816    	return FR_OK;
;;;817    }
000018  bdfe              POP      {r1-r7,pc}
                  |L8.26|
00001a  0730              LSLS     r0,r6,#28             ;773
00001c  0f00              LSRS     r0,r0,#28             ;773
00001e  2800              CMP      r0,#0                 ;773
000020  d175              BNE      |L8.270|
000022  6920              LDR      r0,[r4,#0x10]         ;774
000024  1c40              ADDS     r0,r0,#1              ;774
000026  6120              STR      r0,[r4,#0x10]         ;774
000028  68e0              LDR      r0,[r4,#0xc]          ;776
00002a  2800              CMP      r0,#0                 ;776
00002c  d105              BNE      |L8.58|
00002e  6820              LDR      r0,[r4,#0]            ;777
000030  8900              LDRH     r0,[r0,#8]            ;777
000032  42b0              CMP      r0,r6                 ;777
000034  dc6b              BGT      |L8.270|
000036  2004              MOVS     r0,#4                 ;778
000038  e7ee              B        |L8.24|
                  |L8.58|
00003a  0930              LSRS     r0,r6,#4              ;781
00003c  6821              LDR      r1,[r4,#0]            ;781
00003e  7889              LDRB     r1,[r1,#2]            ;781
000040  1e49              SUBS     r1,r1,#1              ;781
000042  4008              ANDS     r0,r0,r1              ;781
000044  2800              CMP      r0,#0                 ;781
000046  d162              BNE      |L8.270|
000048  68e1              LDR      r1,[r4,#0xc]          ;782
00004a  6820              LDR      r0,[r4,#0]            ;782
00004c  f7fffffe          BL       get_fat
000050  4605              MOV      r5,r0                 ;782
000052  2d01              CMP      r5,#1                 ;783
000054  d801              BHI      |L8.90|
000056  2002              MOVS     r0,#2                 ;783
000058  e7de              B        |L8.24|
                  |L8.90|
00005a  1c68              ADDS     r0,r5,#1              ;784
00005c  2800              CMP      r0,#0                 ;784
00005e  d101              BNE      |L8.100|
000060  2001              MOVS     r0,#1                 ;784
000062  e7d9              B        |L8.24|
                  |L8.100|
000064  6820              LDR      r0,[r4,#0]            ;785
000066  69c0              LDR      r0,[r0,#0x1c]         ;785
000068  42a8              CMP      r0,r5                 ;785
00006a  d84a              BHI      |L8.258|
00006c  9802              LDR      r0,[sp,#8]            ;788
00006e  2800              CMP      r0,#0                 ;788
000070  d101              BNE      |L8.118|
000072  2004              MOVS     r0,#4                 ;788
000074  e7d0              B        |L8.24|
                  |L8.118|
000076  68e1              LDR      r1,[r4,#0xc]          ;789
000078  6820              LDR      r0,[r4,#0]            ;789
00007a  f7fffffe          BL       create_chain
00007e  4605              MOV      r5,r0                 ;789
000080  2d00              CMP      r5,#0                 ;790
000082  d101              BNE      |L8.136|
000084  2007              MOVS     r0,#7                 ;790
000086  e7c7              B        |L8.24|
                  |L8.136|
000088  2d01              CMP      r5,#1                 ;791
00008a  d101              BNE      |L8.144|
00008c  2002              MOVS     r0,#2                 ;791
00008e  e7c3              B        |L8.24|
                  |L8.144|
000090  1c68              ADDS     r0,r5,#1              ;792
000092  2800              CMP      r0,#0                 ;792
000094  d101              BNE      |L8.154|
000096  2001              MOVS     r0,#1                 ;792
000098  e7be              B        |L8.24|
                  |L8.154|
00009a  2100              MOVS     r1,#0                 ;794
00009c  6820              LDR      r0,[r4,#0]            ;794
00009e  f7fffffe          BL       move_window
0000a2  2800              CMP      r0,#0                 ;794
0000a4  d001              BEQ      |L8.170|
0000a6  2001              MOVS     r0,#1                 ;794
0000a8  e7b6              B        |L8.24|
                  |L8.170|
0000aa  6821              LDR      r1,[r4,#0]            ;795
0000ac  4608              MOV      r0,r1                 ;795
0000ae  3034              ADDS     r0,r0,#0x34           ;795
0000b0  2201              MOVS     r2,#1                 ;795
0000b2  0252              LSLS     r2,r2,#9              ;795
0000b4  2100              MOVS     r1,#0                 ;795
0000b6  f7fffffe          BL       mem_set
0000ba  4629              MOV      r1,r5                 ;796
0000bc  6820              LDR      r0,[r4,#0]            ;796
0000be  f7fffffe          BL       clust2sect
0000c2  6821              LDR      r1,[r4,#0]            ;796
0000c4  6308              STR      r0,[r1,#0x30]         ;796
0000c6  2700              MOVS     r7,#0                 ;797
0000c8  e011              B        |L8.238|
                  |L8.202|
0000ca  2001              MOVS     r0,#1                 ;798
0000cc  6821              LDR      r1,[r4,#0]            ;798
0000ce  7108              STRB     r0,[r1,#4]            ;798
0000d0  2100              MOVS     r1,#0                 ;799
0000d2  6820              LDR      r0,[r4,#0]            ;799
0000d4  f7fffffe          BL       move_window
0000d8  2800              CMP      r0,#0                 ;799
0000da  d001              BEQ      |L8.224|
0000dc  2001              MOVS     r0,#1                 ;799
0000de  e79b              B        |L8.24|
                  |L8.224|
0000e0  6820              LDR      r0,[r4,#0]            ;800
0000e2  6b00              LDR      r0,[r0,#0x30]         ;800
0000e4  1c40              ADDS     r0,r0,#1              ;800
0000e6  6821              LDR      r1,[r4,#0]            ;800
0000e8  6308              STR      r0,[r1,#0x30]         ;800
0000ea  1c78              ADDS     r0,r7,#1              ;797
0000ec  b2c7              UXTB     r7,r0                 ;797
                  |L8.238|
0000ee  6820              LDR      r0,[r4,#0]            ;797
0000f0  7880              LDRB     r0,[r0,#2]            ;797
0000f2  42b8              CMP      r0,r7                 ;797
0000f4  dce9              BGT      |L8.202|
0000f6  6820              LDR      r0,[r4,#0]            ;802
0000f8  6b00              LDR      r0,[r0,#0x30]         ;802
0000fa  1bc0              SUBS     r0,r0,r7              ;802
0000fc  6821              LDR      r1,[r4,#0]            ;802
0000fe  6308              STR      r0,[r1,#0x30]         ;802
000100  bf00              NOP                            ;806
                  |L8.258|
000102  60e5              STR      r5,[r4,#0xc]          ;807
000104  4629              MOV      r1,r5                 ;808
000106  6820              LDR      r0,[r4,#0]            ;808
000108  f7fffffe          BL       clust2sect
00010c  6120              STR      r0,[r4,#0x10]         ;808
                  |L8.270|
00010e  80e6              STRH     r6,[r4,#6]            ;813
000110  6820              LDR      r0,[r4,#0]            ;814
000112  3034              ADDS     r0,r0,#0x34           ;814
000114  0731              LSLS     r1,r6,#28             ;814
000116  0dc9              LSRS     r1,r1,#23             ;814
000118  1840              ADDS     r0,r0,r1              ;814
00011a  6160              STR      r0,[r4,#0x14]         ;814
00011c  2000              MOVS     r0,#0                 ;816
00011e  e77b              B        |L8.24|
;;;818    
                          ENDP


                          AREA ||i.dir_read||, CODE, READONLY, ALIGN=1

                  dir_read PROC
;;;1059   static
;;;1060   FRESULT dir_read (
000000  b5f8              PUSH     {r3-r7,lr}
;;;1061   	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
;;;1062   )
;;;1063   {
000002  4604              MOV      r4,r0
;;;1064   	FRESULT res;
;;;1065   	BYTE c, *dir;
;;;1066   #if _USE_LFN
;;;1067   	BYTE a, ord = 0xFF, sum = 0xFF;
;;;1068   #endif
;;;1069   
;;;1070   	res = FR_NO_FILE;
000004  2504              MOVS     r5,#4
;;;1071   	while (dj->sect) {
000006  e01e              B        |L9.70|
                  |L9.8|
;;;1072   		res = move_window(dj->fs, dj->sect);
000008  6921              LDR      r1,[r4,#0x10]
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       move_window
000010  4605              MOV      r5,r0
;;;1073   		if (res != FR_OK) break;
000012  2d00              CMP      r5,#0
000014  d000              BEQ      |L9.24|
000016  e019              B        |L9.76|
                  |L9.24|
;;;1074   		dir = dj->dir;					/* Ptr to the directory entry of current index */
000018  6967              LDR      r7,[r4,#0x14]
;;;1075   		c = dir[DIR_Name];
00001a  783e              LDRB     r6,[r7,#0]
;;;1076   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
00001c  2e00              CMP      r6,#0
00001e  d101              BNE      |L9.36|
000020  2504              MOVS     r5,#4
000022  e013              B        |L9.76|
                  |L9.36|
;;;1077   #if _USE_LFN	/* LFN configuration */
;;;1078   		a = dir[DIR_Attr] & AM_MASK;
;;;1079   		if (c == 0xE5 || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
;;;1080   			ord = 0xFF;
;;;1081   		} else {
;;;1082   			if (a == AM_LFN) {			/* An LFN entry is found */
;;;1083   				if (c & 0x40) {			/* Is it start of LFN sequence? */
;;;1084   					sum = dir[LDIR_Chksum];
;;;1085   					c &= 0xBF; ord = c;
;;;1086   					dj->lfn_idx = dj->index;
;;;1087   				}
;;;1088   				/* Check LFN validity and capture it */
;;;1089   				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
;;;1090   			} else {					/* An SFN entry is found */
;;;1091   				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
;;;1092   					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
;;;1093   				break;
;;;1094   			}
;;;1095   		}
;;;1096   #else		/* Non LFN configuration */
;;;1097   		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
000024  2ee5              CMP      r6,#0xe5
000026  d006              BEQ      |L9.54|
000028  bf00              NOP      
00002a  7af8              LDRB     r0,[r7,#0xb]
00002c  2108              MOVS     r1,#8
00002e  4008              ANDS     r0,r0,r1
000030  2800              CMP      r0,#0
000032  d100              BNE      |L9.54|
;;;1098   			break;
000034  e00a              B        |L9.76|
                  |L9.54|
;;;1099   #endif
;;;1100   		res = dir_next(dj, 0);				/* Next entry */
000036  2100              MOVS     r1,#0
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       dir_next
00003e  4605              MOV      r5,r0
;;;1101   		if (res != FR_OK) break;
000040  2d00              CMP      r5,#0
000042  d000              BEQ      |L9.70|
000044  e002              B        |L9.76|
                  |L9.70|
000046  6920              LDR      r0,[r4,#0x10]         ;1071
000048  2800              CMP      r0,#0                 ;1071
00004a  d1dd              BNE      |L9.8|
                  |L9.76|
00004c  bf00              NOP                            ;1073
;;;1102   	}
;;;1103   
;;;1104   	if (res != FR_OK) dj->sect = 0;
00004e  2d00              CMP      r5,#0
000050  d001              BEQ      |L9.86|
000052  2000              MOVS     r0,#0
000054  6120              STR      r0,[r4,#0x10]
                  |L9.86|
;;;1105   
;;;1106   	return res;
000056  4628              MOV      r0,r5
;;;1107   }
000058  bdf8              POP      {r3-r7,pc}
;;;1108   #endif
                          ENDP


                          AREA ||i.dir_register||, CODE, READONLY, ALIGN=1

                  dir_register PROC
;;;1116   static
;;;1117   FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
000000  b5f8              PUSH     {r3-r7,lr}
;;;1118   	DIR *dj				/* Target directory with object name to be created */
;;;1119   )
;;;1120   {
000002  4604              MOV      r4,r0
;;;1121   	FRESULT res;
;;;1122   	BYTE c, *dir;
;;;1123   #if _USE_LFN	/* LFN configuration */
;;;1124   	WORD n, ne, is;
;;;1125   	BYTE sn[12], *fn, sum;
;;;1126   	WCHAR *lfn;
;;;1127   
;;;1128   
;;;1129   	fn = dj->fn; lfn = dj->lfn;
;;;1130   	mem_cpy(sn, fn, 12);
;;;1131   
;;;1132   	if (_FS_RPATH && (sn[NS] & NS_DOT)) return FR_INVALID_NAME;	/* Cannot create dot entry */
;;;1133   
;;;1134   	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
;;;1135   		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
;;;1136   		for (n = 1; n < 100; n++) {
;;;1137   			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
;;;1138   			res = dir_find(dj);				/* Check if the name collides with existing SFN */
;;;1139   			if (res != FR_OK) break;
;;;1140   		}
;;;1141   		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
;;;1142   		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
;;;1143   		fn[NS] = sn[NS]; dj->lfn = lfn;
;;;1144   	}
;;;1145   
;;;1146   	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
;;;1147   		for (ne = 0; lfn[ne]; ne++) ;
;;;1148   		ne = (ne + 25) / 13;
;;;1149   	} else {						/* Otherwise reserve only an SFN entry. */
;;;1150   		ne = 1;
;;;1151   	}
;;;1152   
;;;1153   	/* Reserve contiguous entries */
;;;1154   	res = dir_sdi(dj, 0);
;;;1155   	if (res != FR_OK) return res;
;;;1156   	n = is = 0;
;;;1157   	do {
;;;1158   		res = move_window(dj->fs, dj->sect);
;;;1159   		if (res != FR_OK) break;
;;;1160   		c = *dj->dir;				/* Check the entry status */
;;;1161   		if (c == 0xE5 || c == 0) {	/* Is it a blank entry? */
;;;1162   			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
;;;1163   			if (++n == ne) break;	/* A contiguous entry that required count is found */
;;;1164   		} else {
;;;1165   			n = 0;					/* Not a blank entry. Restart to search */
;;;1166   		}
;;;1167   		res = dir_next(dj, 1);		/* Next entry with table stretch */
;;;1168   	} while (res == FR_OK);
;;;1169   
;;;1170   	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
;;;1171   		res = dir_sdi(dj, is);
;;;1172   		if (res == FR_OK) {
;;;1173   			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
;;;1174   			ne--;
;;;1175   			do {					/* Store LFN entries in bottom first */
;;;1176   				res = move_window(dj->fs, dj->sect);
;;;1177   				if (res != FR_OK) break;
;;;1178   				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
;;;1179   				dj->fs->wflag = 1;
;;;1180   				res = dir_next(dj, 0);	/* Next entry */
;;;1181   			} while (res == FR_OK && --ne);
;;;1182   		}
;;;1183   	}
;;;1184   
;;;1185   #else	/* Non LFN configuration */
;;;1186   	res = dir_sdi(dj, 0);
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       dir_sdi
00000c  4605              MOV      r5,r0
;;;1187   	if (res == FR_OK) {
00000e  2d00              CMP      r5,#0
000010  d117              BNE      |L10.66|
;;;1188   		do {	/* Find a blank entry for the SFN */
000012  bf00              NOP      
                  |L10.20|
;;;1189   			res = move_window(dj->fs, dj->sect);
000014  6921              LDR      r1,[r4,#0x10]
000016  6820              LDR      r0,[r4,#0]
000018  f7fffffe          BL       move_window
00001c  4605              MOV      r5,r0
;;;1190   			if (res != FR_OK) break;
00001e  2d00              CMP      r5,#0
000020  d000              BEQ      |L10.36|
000022  e00d              B        |L10.64|
                  |L10.36|
;;;1191   			c = *dj->dir;
000024  6960              LDR      r0,[r4,#0x14]
000026  7806              LDRB     r6,[r0,#0]
;;;1192   			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
000028  2ee5              CMP      r6,#0xe5
00002a  d001              BEQ      |L10.48|
00002c  2e00              CMP      r6,#0
00002e  d100              BNE      |L10.50|
                  |L10.48|
000030  e006              B        |L10.64|
                  |L10.50|
;;;1193   			res = dir_next(dj, 1);			/* Next entry with table stretch */
000032  2101              MOVS     r1,#1
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       dir_next
00003a  4605              MOV      r5,r0
;;;1194   		} while (res == FR_OK);
00003c  2d00              CMP      r5,#0
00003e  d0e9              BEQ      |L10.20|
                  |L10.64|
000040  bf00              NOP                            ;1190
                  |L10.66|
;;;1195   	}
;;;1196   #endif
;;;1197   
;;;1198   	if (res == FR_OK) {		/* Initialize the SFN entry */
000042  2d00              CMP      r5,#0
000044  d114              BNE      |L10.112|
;;;1199   		res = move_window(dj->fs, dj->sect);
000046  6921              LDR      r1,[r4,#0x10]
000048  6820              LDR      r0,[r4,#0]
00004a  f7fffffe          BL       move_window
00004e  4605              MOV      r5,r0
;;;1200   		if (res == FR_OK) {
000050  2d00              CMP      r5,#0
000052  d10d              BNE      |L10.112|
;;;1201   			dir = dj->dir;
000054  6967              LDR      r7,[r4,#0x14]
;;;1202   			mem_set(dir, 0, 32);		/* Clean the entry */
000056  2220              MOVS     r2,#0x20
000058  2100              MOVS     r1,#0
00005a  4638              MOV      r0,r7
00005c  f7fffffe          BL       mem_set
;;;1203   			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
000060  220b              MOVS     r2,#0xb
000062  4638              MOV      r0,r7
000064  69a1              LDR      r1,[r4,#0x18]
000066  f7fffffe          BL       mem_cpy
;;;1204   #if _USE_LFN
;;;1205   			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
;;;1206   #endif
;;;1207   			dj->fs->wflag = 1;
00006a  2001              MOVS     r0,#1
00006c  6821              LDR      r1,[r4,#0]
00006e  7108              STRB     r0,[r1,#4]
                  |L10.112|
;;;1208   		}
;;;1209   	}
;;;1210   
;;;1211   	return res;
000070  4628              MOV      r0,r5
;;;1212   }
000072  bdf8              POP      {r3-r7,pc}
;;;1213   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.dir_remove||, CODE, READONLY, ALIGN=1

                  dir_remove PROC
;;;1222   static
;;;1223   FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
000000  b570              PUSH     {r4-r6,lr}
;;;1224   	DIR *dj				/* Directory object pointing the entry to be removed */
;;;1225   )
;;;1226   {
000002  4604              MOV      r4,r0
;;;1227   	FRESULT res;
;;;1228   #if _USE_LFN	/* LFN configuration */
;;;1229   	WORD i;
;;;1230   
;;;1231   	i = dj->index;	/* SFN index */
;;;1232   	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
;;;1233   	if (res == FR_OK) {
;;;1234   		do {
;;;1235   			res = move_window(dj->fs, dj->sect);
;;;1236   			if (res != FR_OK) break;
;;;1237   			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
;;;1238   			dj->fs->wflag = 1;
;;;1239   			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
;;;1240   			res = dir_next(dj, 0);		/* Next entry */
;;;1241   		} while (res == FR_OK);
;;;1242   		if (res == FR_NO_FILE) res = FR_INT_ERR;
;;;1243   	}
;;;1244   
;;;1245   #else			/* Non LFN configuration */
;;;1246   	res = dir_sdi(dj, dj->index);
000004  88e1              LDRH     r1,[r4,#6]
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       dir_sdi
00000c  4605              MOV      r5,r0
;;;1247   	if (res == FR_OK) {
00000e  2d00              CMP      r5,#0
000010  d10c              BNE      |L11.44|
;;;1248   		res = move_window(dj->fs, dj->sect);
000012  6921              LDR      r1,[r4,#0x10]
000014  6820              LDR      r0,[r4,#0]
000016  f7fffffe          BL       move_window
00001a  4605              MOV      r5,r0
;;;1249   		if (res == FR_OK) {
00001c  2d00              CMP      r5,#0
00001e  d105              BNE      |L11.44|
;;;1250   			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
000020  20e5              MOVS     r0,#0xe5
000022  6961              LDR      r1,[r4,#0x14]
000024  7008              STRB     r0,[r1,#0]
;;;1251   			dj->fs->wflag = 1;
000026  2001              MOVS     r0,#1
000028  6821              LDR      r1,[r4,#0]
00002a  7108              STRB     r0,[r1,#4]
                  |L11.44|
;;;1252   		}
;;;1253   	}
;;;1254   #endif
;;;1255   
;;;1256   	return res;
00002c  4628              MOV      r0,r5
;;;1257   }
00002e  bd70              POP      {r4-r6,pc}
;;;1258   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.dir_sdi||, CODE, READONLY, ALIGN=1

                  dir_sdi PROC
;;;711    static
;;;712    FRESULT dir_sdi (
000000  b5f8              PUSH     {r3-r7,lr}
;;;713    	DIR *dj,		/* Pointer to directory object */
;;;714    	WORD idx		/* Directory index number */
;;;715    )
;;;716    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;717    	DWORD clst;
;;;718    	WORD ic;
;;;719    
;;;720    
;;;721    	dj->index = idx;
000006  80e6              STRH     r6,[r4,#6]
;;;722    	clst = dj->sclust;
000008  68a5              LDR      r5,[r4,#8]
;;;723    	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
00000a  2d01              CMP      r5,#1
00000c  d003              BEQ      |L12.22|
00000e  6820              LDR      r0,[r4,#0]
000010  69c0              LDR      r0,[r0,#0x1c]
000012  42a8              CMP      r0,r5
000014  d801              BHI      |L12.26|
                  |L12.22|
;;;724    		return FR_INT_ERR;
000016  2002              MOVS     r0,#2
                  |L12.24|
;;;725    	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
;;;726    		clst = dj->fs->dirbase;
;;;727    
;;;728    	if (clst == 0) {	/* Static table */
;;;729    		dj->clust = clst;
;;;730    		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
;;;731    			return FR_INT_ERR;
;;;732    		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
;;;733    	}
;;;734    	else {				/* Dynamic table */
;;;735    		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
;;;736    		while (idx >= ic) {	/* Follow cluster chain */
;;;737    			clst = get_fat(dj->fs, clst);				/* Get next cluster */
;;;738    			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
;;;739    			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
;;;740    				return FR_INT_ERR;
;;;741    			idx -= ic;
;;;742    		}
;;;743    		dj->clust = clst;
;;;744    		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
;;;745    	}
;;;746    
;;;747    	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
;;;748    
;;;749    	return FR_OK;	/* Seek succeeded */
;;;750    }
000018  bdf8              POP      {r3-r7,pc}
                  |L12.26|
00001a  2d00              CMP      r5,#0                 ;725
00001c  d105              BNE      |L12.42|
00001e  6820              LDR      r0,[r4,#0]            ;725
000020  7800              LDRB     r0,[r0,#0]            ;725
000022  2803              CMP      r0,#3                 ;725
000024  d101              BNE      |L12.42|
000026  6820              LDR      r0,[r4,#0]            ;726
000028  6a85              LDR      r5,[r0,#0x28]         ;726
                  |L12.42|
00002a  2d00              CMP      r5,#0                 ;728
00002c  d10c              BNE      |L12.72|
00002e  60e5              STR      r5,[r4,#0xc]          ;729
000030  6820              LDR      r0,[r4,#0]            ;730
000032  8900              LDRH     r0,[r0,#8]            ;730
000034  42b0              CMP      r0,r6                 ;730
000036  dc01              BGT      |L12.60|
000038  2002              MOVS     r0,#2                 ;731
00003a  e7ed              B        |L12.24|
                  |L12.60|
00003c  6820              LDR      r0,[r4,#0]            ;732
00003e  6a80              LDR      r0,[r0,#0x28]         ;732
000040  0931              LSRS     r1,r6,#4              ;732
000042  1840              ADDS     r0,r0,r1              ;732
000044  6120              STR      r0,[r4,#0x10]         ;732
000046  e021              B        |L12.140|
                  |L12.72|
000048  6820              LDR      r0,[r4,#0]            ;735
00004a  7880              LDRB     r0,[r0,#2]            ;735
00004c  0107              LSLS     r7,r0,#4              ;735
00004e  e013              B        |L12.120|
                  |L12.80|
000050  4629              MOV      r1,r5                 ;737
000052  6820              LDR      r0,[r4,#0]            ;737
000054  f7fffffe          BL       get_fat
000058  4605              MOV      r5,r0                 ;737
00005a  1c68              ADDS     r0,r5,#1              ;738
00005c  2800              CMP      r0,#0                 ;738
00005e  d101              BNE      |L12.100|
000060  2001              MOVS     r0,#1                 ;738
000062  e7d9              B        |L12.24|
                  |L12.100|
000064  2d02              CMP      r5,#2                 ;739
000066  d303              BCC      |L12.112|
000068  6820              LDR      r0,[r4,#0]            ;739
00006a  69c0              LDR      r0,[r0,#0x1c]         ;739
00006c  42a8              CMP      r0,r5                 ;739
00006e  d801              BHI      |L12.116|
                  |L12.112|
000070  2002              MOVS     r0,#2                 ;740
000072  e7d1              B        |L12.24|
                  |L12.116|
000074  1bf0              SUBS     r0,r6,r7              ;741
000076  b286              UXTH     r6,r0                 ;741
                  |L12.120|
000078  42be              CMP      r6,r7                 ;736
00007a  dae9              BGE      |L12.80|
00007c  60e5              STR      r5,[r4,#0xc]          ;743
00007e  4629              MOV      r1,r5                 ;744
000080  6820              LDR      r0,[r4,#0]            ;744
000082  f7fffffe          BL       clust2sect
000086  0931              LSRS     r1,r6,#4              ;744
000088  1840              ADDS     r0,r0,r1              ;744
00008a  6120              STR      r0,[r4,#0x10]         ;744
                  |L12.140|
00008c  6820              LDR      r0,[r4,#0]            ;747
00008e  3034              ADDS     r0,r0,#0x34           ;747
000090  0731              LSLS     r1,r6,#28             ;747
000092  0dc9              LSRS     r1,r1,#23             ;747
000094  1840              ADDS     r0,r0,r1              ;747
000096  6160              STR      r0,[r4,#0x14]         ;747
000098  2000              MOVS     r0,#0                 ;749
00009a  e7bd              B        |L12.24|
;;;751    
                          ENDP


                          AREA ||i.f_chdir||, CODE, READONLY, ALIGN=1

                  f_chdir PROC
;;;2329   
;;;2330   FRESULT f_chdir (
000000  b531              PUSH     {r0,r4,r5,lr}
;;;2331   	const TCHAR *path	/* Pointer to the directory path */
;;;2332   )
;;;2333   {
000002  b08a              SUB      sp,sp,#0x28
;;;2334   	FRESULT res;
;;;2335   	DIR dj;
;;;2336   	BYTE *dir;
;;;2337   	DEF_NAMEBUF;
;;;2338   
;;;2339   
;;;2340   	res = chk_mounted(&path, &dj.fs, 0);
000004  2200              MOVS     r2,#0
000006  a903              ADD      r1,sp,#0xc
000008  a80a              ADD      r0,sp,#0x28
00000a  f7fffffe          BL       chk_mounted
00000e  4605              MOV      r5,r0
;;;2341   	if (res == FR_OK) {
000010  2d00              CMP      r5,#0
000012  d125              BNE      |L13.96|
;;;2342   		INIT_BUF(dj);
000014  4668              MOV      r0,sp
000016  9009              STR      r0,[sp,#0x24]
;;;2343   		res = follow_path(&dj, path);		/* Follow the path */
000018  a803              ADD      r0,sp,#0xc
00001a  990a              LDR      r1,[sp,#0x28]
00001c  f7fffffe          BL       follow_path
000020  4605              MOV      r5,r0
;;;2344   		FREE_BUF();
;;;2345   		if (res == FR_OK) {					/* Follow completed */
000022  2d00              CMP      r5,#0
000024  d119              BNE      |L13.90|
;;;2346   			dir = dj.dir;					/* Pointer to the entry */
000026  9c08              LDR      r4,[sp,#0x20]
;;;2347   			if (!dir) {
000028  2c00              CMP      r4,#0
00002a  d103              BNE      |L13.52|
;;;2348   				dj.fs->cdir = dj.sclust;	/* Start directory itself */
00002c  9903              LDR      r1,[sp,#0xc]
00002e  9805              LDR      r0,[sp,#0x14]
000030  6188              STR      r0,[r1,#0x18]
000032  e012              B        |L13.90|
                  |L13.52|
;;;2349   			} else {
;;;2350   				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
000034  7ae0              LDRB     r0,[r4,#0xb]
000036  2110              MOVS     r1,#0x10
000038  4008              ANDS     r0,r0,r1
00003a  2800              CMP      r0,#0
00003c  d00c              BEQ      |L13.88|
;;;2351   					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
00003e  7d60              LDRB     r0,[r4,#0x15]
000040  0200              LSLS     r0,r0,#8
000042  7d21              LDRB     r1,[r4,#0x14]
000044  4308              ORRS     r0,r0,r1
000046  0400              LSLS     r0,r0,#16
000048  7ee1              LDRB     r1,[r4,#0x1b]
00004a  0209              LSLS     r1,r1,#8
00004c  7ea2              LDRB     r2,[r4,#0x1a]
00004e  4311              ORRS     r1,r1,r2
000050  4308              ORRS     r0,r0,r1
000052  9903              LDR      r1,[sp,#0xc]
000054  6188              STR      r0,[r1,#0x18]
000056  e000              B        |L13.90|
                  |L13.88|
;;;2352   				else
;;;2353   					res = FR_NO_PATH;		/* Reached but a file */
000058  2505              MOVS     r5,#5
                  |L13.90|
;;;2354   			}
;;;2355   		}
;;;2356   		if (res == FR_NO_FILE) res = FR_NO_PATH;
00005a  2d04              CMP      r5,#4
00005c  d100              BNE      |L13.96|
00005e  2505              MOVS     r5,#5
                  |L13.96|
;;;2357   	}
;;;2358   
;;;2359   	LEAVE_FF(dj.fs, res);
000060  4628              MOV      r0,r5
;;;2360   }
000062  b00b              ADD      sp,sp,#0x2c
000064  bd30              POP      {r4,r5,pc}
;;;2361   
                          ENDP


                          AREA ||i.f_chdrive||, CODE, READONLY, ALIGN=2

                  f_chdrive PROC
;;;2315   
;;;2316   FRESULT f_chdrive (
000000  4601              MOV      r1,r0
;;;2317   	BYTE drv		/* Drive number */
;;;2318   )
;;;2319   {
;;;2320   	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
000002  2901              CMP      r1,#1
000004  db01              BLT      |L14.10|
000006  200b              MOVS     r0,#0xb
                  |L14.8|
;;;2321   
;;;2322   	Drive = drv;
;;;2323   
;;;2324   	return FR_OK;
;;;2325   }
000008  4770              BX       lr
                  |L14.10|
00000a  4802              LDR      r0,|L14.20|
00000c  7001              STRB     r1,[r0,#0]            ;2322
00000e  2000              MOVS     r0,#0                 ;2324
000010  e7fa              B        |L14.8|
;;;2326   
                          ENDP

000012  0000              DCW      0x0000
                  |L14.20|
                          DCD      Drive

                          AREA ||i.f_chmod||, CODE, READONLY, ALIGN=1

                  f_chmod PROC
;;;2908   
;;;2909   FRESULT f_chmod (
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;2910   	const TCHAR *path,	/* Pointer to the file path */
;;;2911   	BYTE value,			/* Attribute bits */
;;;2912   	BYTE mask			/* Attribute mask to change */
;;;2913   )
;;;2914   {
000002  b08a              SUB      sp,sp,#0x28
000004  460f              MOV      r7,r1
000006  4614              MOV      r4,r2
;;;2915   	FRESULT res;
;;;2916   	DIR dj;
;;;2917   	BYTE *dir;
;;;2918   	DEF_NAMEBUF;
;;;2919   
;;;2920   
;;;2921   	res = chk_mounted(&path, &dj.fs, 1);
000008  2201              MOVS     r2,#1
00000a  a903              ADD      r1,sp,#0xc
00000c  a80a              ADD      r0,sp,#0x28
00000e  f7fffffe          BL       chk_mounted
000012  4605              MOV      r5,r0
;;;2922   	if (res == FR_OK) {
000014  2d00              CMP      r5,#0
000016  d125              BNE      |L15.100|
;;;2923   		INIT_BUF(dj);
000018  4668              MOV      r0,sp
00001a  9009              STR      r0,[sp,#0x24]
;;;2924   		res = follow_path(&dj, path);		/* Follow the file path */
00001c  a803              ADD      r0,sp,#0xc
00001e  990a              LDR      r1,[sp,#0x28]
000020  f7fffffe          BL       follow_path
000024  4605              MOV      r5,r0
;;;2925   		FREE_BUF();
;;;2926   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
000026  2d00              CMP      r5,#0
000028  d106              BNE      |L15.56|
00002a  9809              LDR      r0,[sp,#0x24]
00002c  7ac0              LDRB     r0,[r0,#0xb]
00002e  2120              MOVS     r1,#0x20
000030  4008              ANDS     r0,r0,r1
000032  2800              CMP      r0,#0
000034  d000              BEQ      |L15.56|
;;;2927   			res = FR_INVALID_NAME;
000036  2506              MOVS     r5,#6
                  |L15.56|
;;;2928   		if (res == FR_OK) {
000038  2d00              CMP      r5,#0
00003a  d113              BNE      |L15.100|
;;;2929   			dir = dj.dir;
00003c  9e08              LDR      r6,[sp,#0x20]
;;;2930   			if (!dir) {						/* Is it a root directory? */
00003e  2e00              CMP      r6,#0
000040  d101              BNE      |L15.70|
;;;2931   				res = FR_INVALID_NAME;
000042  2506              MOVS     r5,#6
000044  e00e              B        |L15.100|
                  |L15.70|
;;;2932   			} else {						/* File or sub directory */
;;;2933   				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
000046  2027              MOVS     r0,#0x27
000048  4004              ANDS     r4,r4,r0
;;;2934   				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
00004a  4638              MOV      r0,r7
00004c  4020              ANDS     r0,r0,r4
00004e  7af1              LDRB     r1,[r6,#0xb]
000050  43a1              BICS     r1,r1,r4
000052  4308              ORRS     r0,r0,r1
000054  72f0              STRB     r0,[r6,#0xb]
;;;2935   				dj.fs->wflag = 1;
000056  2001              MOVS     r0,#1
000058  9903              LDR      r1,[sp,#0xc]
00005a  7108              STRB     r0,[r1,#4]
;;;2936   				res = sync(dj.fs);
00005c  9803              LDR      r0,[sp,#0xc]
00005e  f7fffffe          BL       sync
000062  4605              MOV      r5,r0
                  |L15.100|
;;;2937   			}
;;;2938   		}
;;;2939   	}
;;;2940   
;;;2941   	LEAVE_FF(dj.fs, res);
000064  4628              MOV      r0,r5
;;;2942   }
000066  b00d              ADD      sp,sp,#0x34
000068  bdf0              POP      {r4-r7,pc}
;;;2943   
                          ENDP


                          AREA ||i.f_close||, CODE, READONLY, ALIGN=1

                  f_close PROC
;;;2274   
;;;2275   FRESULT f_close (
000000  b570              PUSH     {r4-r6,lr}
;;;2276   	FIL *fp		/* Pointer to the file object to be closed */
;;;2277   )
;;;2278   {
000002  4604              MOV      r4,r0
;;;2279   	FRESULT res;
;;;2280   
;;;2281   #if _FS_READONLY
;;;2282   	FATFS *fs = fp->fs;
;;;2283   	res = validate(fs, fp->id);
;;;2284   	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
;;;2285   	LEAVE_FF(fs, res);
;;;2286   
;;;2287   #else
;;;2288   	res = f_sync(fp);		/* Flush cached data */
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       f_sync
00000a  4605              MOV      r5,r0
;;;2289   #if _FS_SHARE
;;;2290   	if (res == FR_OK) {		/* Decrement open counter */
;;;2291   #if _FS_REENTRANT
;;;2292   		res = validate(fp->fs, fp->id);
;;;2293   		if (res == FR_OK) {
;;;2294   			res = dec_lock(fp->fs, fp->lockid);	
;;;2295   			unlock_fs(fp->fs, FR_OK);
;;;2296   		}
;;;2297   #else
;;;2298   		res = dec_lock(fp->fs, fp->lockid);
;;;2299   #endif
;;;2300   	}
;;;2301   #endif
;;;2302   	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
00000c  2d00              CMP      r5,#0
00000e  d100              BNE      |L16.18|
000010  6020              STR      r0,[r4,#0]
                  |L16.18|
;;;2303   	return res;
000012  4628              MOV      r0,r5
;;;2304   #endif
;;;2305   }
000014  bd70              POP      {r4-r6,pc}
;;;2306   
                          ENDP


                          AREA ||i.f_getfree||, CODE, READONLY, ALIGN=1

                  f_getfree PROC
;;;2651   
;;;2652   FRESULT f_getfree (
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;2653   	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
;;;2654   	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
;;;2655   	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
;;;2656   )
;;;2657   {
000002  b086              SUB      sp,sp,#0x18
000004  4614              MOV      r4,r2
;;;2658   	FRESULT res;
;;;2659   	DWORD n, clst, sect, stat;
;;;2660   	UINT i;
;;;2661   	BYTE fat, *p;
;;;2662   
;;;2663   
;;;2664   	/* Get drive number */
;;;2665   	res = chk_mounted(&path, fatfs, 0);
000006  2200              MOVS     r2,#0
000008  4621              MOV      r1,r4
00000a  a806              ADD      r0,sp,#0x18
00000c  f7fffffe          BL       chk_mounted
000010  9005              STR      r0,[sp,#0x14]
;;;2666   	if (res == FR_OK) {
000012  9805              LDR      r0,[sp,#0x14]
000014  2800              CMP      r0,#0
000016  d17e              BNE      |L17.278|
;;;2667   		/* If free_clust is valid, return it without full cluster scan */
;;;2668   		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
000018  6820              LDR      r0,[r4,#0]
00001a  6901              LDR      r1,[r0,#0x10]
00001c  69c0              LDR      r0,[r0,#0x1c]
00001e  1e80              SUBS     r0,r0,#2
000020  4281              CMP      r1,r0
000022  d804              BHI      |L17.46|
;;;2669   			*nclst = (*fatfs)->free_clust;
000024  6820              LDR      r0,[r4,#0]
000026  6901              LDR      r1,[r0,#0x10]
000028  9807              LDR      r0,[sp,#0x1c]
00002a  6001              STR      r1,[r0,#0]
00002c  e073              B        |L17.278|
                  |L17.46|
;;;2670   		} else {
;;;2671   			/* Get number of free clusters */
;;;2672   			fat = (*fatfs)->fs_type;
00002e  6820              LDR      r0,[r4,#0]
000030  7800              LDRB     r0,[r0,#0]
000032  9001              STR      r0,[sp,#4]
;;;2673   			n = 0;
000034  2600              MOVS     r6,#0
;;;2674   			if (fat == FS_FAT12) {
000036  9801              LDR      r0,[sp,#4]
000038  2801              CMP      r0,#1
00003a  d11e              BNE      |L17.122|
;;;2675   				clst = 2;
00003c  2702              MOVS     r7,#2
;;;2676   				do {
00003e  bf00              NOP      
                  |L17.64|
;;;2677   					stat = get_fat(*fatfs, clst);
000040  4639              MOV      r1,r7
000042  6820              LDR      r0,[r4,#0]
000044  f7fffffe          BL       get_fat
000048  9003              STR      r0,[sp,#0xc]
;;;2678   					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
00004a  9803              LDR      r0,[sp,#0xc]
00004c  1c40              ADDS     r0,r0,#1
00004e  2800              CMP      r0,#0
000050  d102              BNE      |L17.88|
000052  2001              MOVS     r0,#1
000054  9005              STR      r0,[sp,#0x14]
000056  e00f              B        |L17.120|
                  |L17.88|
;;;2679   					if (stat == 1) { res = FR_INT_ERR; break; }
000058  9803              LDR      r0,[sp,#0xc]
00005a  2801              CMP      r0,#1
00005c  d102              BNE      |L17.100|
00005e  2002              MOVS     r0,#2
000060  9005              STR      r0,[sp,#0x14]
000062  e009              B        |L17.120|
                  |L17.100|
;;;2680   					if (stat == 0) n++;
000064  9803              LDR      r0,[sp,#0xc]
000066  2800              CMP      r0,#0
000068  d100              BNE      |L17.108|
00006a  1c76              ADDS     r6,r6,#1
                  |L17.108|
;;;2681   				} while (++clst < (*fatfs)->n_fatent);
00006c  1c78              ADDS     r0,r7,#1
00006e  4607              MOV      r7,r0
000070  6821              LDR      r1,[r4,#0]
000072  69c9              LDR      r1,[r1,#0x1c]
000074  4288              CMP      r0,r1
000076  d3e3              BCC      |L17.64|
                  |L17.120|
000078  e043              B        |L17.258|
                  |L17.122|
;;;2682   			} else {
;;;2683   				clst = (*fatfs)->n_fatent;
00007a  6820              LDR      r0,[r4,#0]
00007c  69c7              LDR      r7,[r0,#0x1c]
;;;2684   				sect = (*fatfs)->fatbase;
00007e  6820              LDR      r0,[r4,#0]
000080  6a40              LDR      r0,[r0,#0x24]
000082  9004              STR      r0,[sp,#0x10]
;;;2685   				i = 0; p = 0;
000084  2000              MOVS     r0,#0
000086  9002              STR      r0,[sp,#8]
000088  2500              MOVS     r5,#0
;;;2686   				do {
00008a  bf00              NOP      
                  |L17.140|
;;;2687   					if (!i) {
00008c  9802              LDR      r0,[sp,#8]
00008e  2800              CMP      r0,#0
000090  d111              BNE      |L17.182|
;;;2688   						res = move_window(*fatfs, sect++);
000092  9a04              LDR      r2,[sp,#0x10]
000094  1c53              ADDS     r3,r2,#1
000096  4611              MOV      r1,r2
000098  9304              STR      r3,[sp,#0x10]
00009a  6820              LDR      r0,[r4,#0]
00009c  f7fffffe          BL       move_window
0000a0  9005              STR      r0,[sp,#0x14]
;;;2689   						if (res != FR_OK) break;
0000a2  9805              LDR      r0,[sp,#0x14]
0000a4  2800              CMP      r0,#0
0000a6  d000              BEQ      |L17.170|
0000a8  e02a              B        |L17.256|
                  |L17.170|
;;;2690   						p = (*fatfs)->win;
0000aa  6820              LDR      r0,[r4,#0]
0000ac  4605              MOV      r5,r0
0000ae  3534              ADDS     r5,r5,#0x34
;;;2691   						i = SS(*fatfs);
0000b0  2001              MOVS     r0,#1
0000b2  0240              LSLS     r0,r0,#9
0000b4  9002              STR      r0,[sp,#8]
                  |L17.182|
;;;2692   					}
;;;2693   					if (fat == FS_FAT16) {
0000b6  9801              LDR      r0,[sp,#4]
0000b8  2802              CMP      r0,#2
0000ba  d10b              BNE      |L17.212|
;;;2694   						if (LD_WORD(p) == 0) n++;
0000bc  7868              LDRB     r0,[r5,#1]
0000be  0200              LSLS     r0,r0,#8
0000c0  7829              LDRB     r1,[r5,#0]
0000c2  4308              ORRS     r0,r0,r1
0000c4  2800              CMP      r0,#0
0000c6  d100              BNE      |L17.202|
0000c8  1c76              ADDS     r6,r6,#1
                  |L17.202|
;;;2695   						p += 2; i -= 2;
0000ca  1cad              ADDS     r5,r5,#2
0000cc  9802              LDR      r0,[sp,#8]
0000ce  1e80              SUBS     r0,r0,#2
0000d0  9002              STR      r0,[sp,#8]
0000d2  e012              B        |L17.250|
                  |L17.212|
;;;2696   					} else {
;;;2697   						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
0000d4  78e8              LDRB     r0,[r5,#3]
0000d6  0600              LSLS     r0,r0,#24
0000d8  78a9              LDRB     r1,[r5,#2]
0000da  0409              LSLS     r1,r1,#16
0000dc  4308              ORRS     r0,r0,r1
0000de  7869              LDRB     r1,[r5,#1]
0000e0  0209              LSLS     r1,r1,#8
0000e2  4308              ORRS     r0,r0,r1
0000e4  7829              LDRB     r1,[r5,#0]
0000e6  4308              ORRS     r0,r0,r1
0000e8  0100              LSLS     r0,r0,#4
0000ea  0900              LSRS     r0,r0,#4
0000ec  2800              CMP      r0,#0
0000ee  d100              BNE      |L17.242|
0000f0  1c76              ADDS     r6,r6,#1
                  |L17.242|
;;;2698   						p += 4; i -= 4;
0000f2  1d2d              ADDS     r5,r5,#4
0000f4  9802              LDR      r0,[sp,#8]
0000f6  1f00              SUBS     r0,r0,#4
0000f8  9002              STR      r0,[sp,#8]
                  |L17.250|
;;;2699   					}
;;;2700   				} while (--clst);
0000fa  1e78              SUBS     r0,r7,#1
0000fc  1e07              SUBS     r7,r0,#0
0000fe  d1c5              BNE      |L17.140|
                  |L17.256|
000100  bf00              NOP                            ;2689
                  |L17.258|
;;;2701   			}
;;;2702   			(*fatfs)->free_clust = n;
000102  6820              LDR      r0,[r4,#0]
000104  6106              STR      r6,[r0,#0x10]
;;;2703   			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
000106  9801              LDR      r0,[sp,#4]
000108  2803              CMP      r0,#3
00010a  d102              BNE      |L17.274|
00010c  2001              MOVS     r0,#1
00010e  6821              LDR      r1,[r4,#0]
000110  7148              STRB     r0,[r1,#5]
                  |L17.274|
;;;2704   			*nclst = n;
000112  9807              LDR      r0,[sp,#0x1c]
000114  6006              STR      r6,[r0,#0]
                  |L17.278|
;;;2705   		}
;;;2706   	}
;;;2707   	LEAVE_FF(*fatfs, res);
000116  9805              LDR      r0,[sp,#0x14]
;;;2708   }
000118  b009              ADD      sp,sp,#0x24
00011a  bdf0              POP      {r4-r7,pc}
;;;2709   
                          ENDP


                          AREA ||i.f_gets||, CODE, READONLY, ALIGN=1

                  f_gets PROC
;;;3346   /*-----------------------------------------------------------------------*/
;;;3347   TCHAR* f_gets (
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;3348   	TCHAR* buff,	/* Pointer to the string buffer to read */
;;;3349   	int len,		/* Size of string buffer (characters) */
;;;3350   	FIL* fil		/* Pointer to the file object */
;;;3351   )
;;;3352   {
000002  b082              SUB      sp,sp,#8
000004  4607              MOV      r7,r0
;;;3353   	int n = 0;
000006  2400              MOVS     r4,#0
;;;3354   	TCHAR c, *p = buff;
000008  463e              MOV      r6,r7
;;;3355   	BYTE s[2];
;;;3356   	UINT rc;
;;;3357   
;;;3358   
;;;3359   	while (n < len - 1) {			/* Read bytes until buffer gets filled */
00000a  e011              B        |L18.48|
                  |L18.12|
;;;3360   		f_read(fil, s, 1, &rc);
00000c  466b              MOV      r3,sp
00000e  2201              MOVS     r2,#1
000010  a901              ADD      r1,sp,#4
000012  9804              LDR      r0,[sp,#0x10]
000014  f7fffffe          BL       f_read
;;;3361   		if (rc != 1) break;			/* Break on EOF or error */
000018  9800              LDR      r0,[sp,#0]
00001a  2801              CMP      r0,#1
00001c  d000              BEQ      |L18.32|
00001e  e00b              B        |L18.56|
                  |L18.32|
;;;3362   		c = s[0];
000020  4668              MOV      r0,sp
000022  7905              LDRB     r5,[r0,#4]
;;;3363   #if _LFN_UNICODE					/* Read a character in UTF-8 encoding */
;;;3364   		if (c >= 0x80) {
;;;3365   			if (c < 0xC0) continue;	/* Skip stray trailer */
;;;3366   			if (c < 0xE0) {			/* Two-byte sequense */
;;;3367   				f_read(fil, s, 1, &rc);
;;;3368   				if (rc != 1) break;
;;;3369   				c = ((c & 0x1F) << 6) | (s[0] & 0x3F);
;;;3370   				if (c < 0x80) c = '?';
;;;3371   			} else {
;;;3372   				if (c < 0xF0) {		/* Three-byte sequense */
;;;3373   					f_read(fil, s, 2, &rc);
;;;3374   					if (rc != 2) break;
;;;3375   					c = (c << 12) | ((s[0] & 0x3F) << 6) | (s[1] & 0x3F);
;;;3376   					if (c < 0x800) c = '?';
;;;3377   				} else {			/* Reject four-byte sequense */
;;;3378   					c = '?';
;;;3379   				}
;;;3380   			}
;;;3381   		}
;;;3382   #endif
;;;3383   #if _USE_STRFUNC >= 2
;;;3384   		if (c == '\r') continue;	/* Strip '\r' */
;;;3385   #endif
;;;3386   		*p++ = c;
000024  7035              STRB     r5,[r6,#0]
000026  1c76              ADDS     r6,r6,#1
;;;3387   		n++;
000028  1c64              ADDS     r4,r4,#1
;;;3388   		if (c == '\n') break;		/* Break on EOL */
00002a  2d0a              CMP      r5,#0xa
00002c  d100              BNE      |L18.48|
00002e  e003              B        |L18.56|
                  |L18.48|
000030  9803              LDR      r0,[sp,#0xc]          ;3359
000032  1e40              SUBS     r0,r0,#1              ;3359
000034  42a0              CMP      r0,r4                 ;3359
000036  dce9              BGT      |L18.12|
                  |L18.56|
000038  bf00              NOP                            ;3361
;;;3389   	}
;;;3390   	*p = 0;
00003a  2000              MOVS     r0,#0
00003c  7030              STRB     r0,[r6,#0]
;;;3391   	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
00003e  2c00              CMP      r4,#0
000040  d002              BEQ      |L18.72|
000042  4638              MOV      r0,r7
                  |L18.68|
;;;3392   }
000044  b005              ADD      sp,sp,#0x14
000046  bdf0              POP      {r4-r7,pc}
                  |L18.72|
000048  2000              MOVS     r0,#0                 ;3391
00004a  e7fb              B        |L18.68|
;;;3393   
                          ENDP


                          AREA ||i.f_lseek||, CODE, READONLY, ALIGN=1

                  f_lseek PROC
;;;2370   
;;;2371   FRESULT f_lseek (
000000  b5f0              PUSH     {r4-r7,lr}
;;;2372   	FIL *fp,		/* Pointer to the file object */
;;;2373   	DWORD ofs		/* File pointer from top of file */
;;;2374   )
;;;2375   {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;2376   	FRESULT res;
;;;2377   
;;;2378   
;;;2379   	res = validate(fp->fs, fp->id);		/* Check validity of the object */
000008  88a1              LDRH     r1,[r4,#4]
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       validate
000010  9003              STR      r0,[sp,#0xc]
;;;2380   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
000012  9803              LDR      r0,[sp,#0xc]
000014  2800              CMP      r0,#0
000016  d002              BEQ      |L19.30|
000018  9803              LDR      r0,[sp,#0xc]
                  |L19.26|
;;;2381   	if (fp->flag & FA__ERROR)			/* Check abort flag */
;;;2382   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2383   
;;;2384   #if _USE_FASTSEEK
;;;2385   	if (fp->cltbl) {	/* Fast seek */
;;;2386   		DWORD cl, pcl, ncl, tcl, dsc, tlen, *tbl = fp->cltbl;
;;;2387   		BYTE csc;
;;;2388   
;;;2389   		tlen = *tbl++;
;;;2390   		if (ofs == CREATE_LINKMAP) {	/* Create link map table */
;;;2391   			cl = fp->org_clust;
;;;2392   			if (cl) {
;;;2393   				do {
;;;2394   					if (tlen < 4) {	/* Not enough table items */
;;;2395   						res = FR_NOT_ENOUGH_CORE; break;
;;;2396   					}
;;;2397   					tcl = cl; ncl = 0;
;;;2398   					do {		/* Get a fragment and store the top and length */
;;;2399   						pcl = cl; ncl++;
;;;2400   						cl = get_fat(fp->fs, cl);
;;;2401   						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
;;;2402   						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2403   					} while (cl == pcl + 1);
;;;2404   					*tbl++ = ncl; *tbl++ = tcl;
;;;2405   					tlen -= 2;
;;;2406   				} while (cl < fp->fs->n_fatent);
;;;2407   			}
;;;2408   			*tbl = 0;	/* Terminate table */
;;;2409   
;;;2410   		} else {						/* Fast seek */
;;;2411   			if (ofs > fp->fsize)		/* Clip offset at the file size */
;;;2412   				ofs = fp->fsize;
;;;2413   			fp->fptr = ofs;				/* Set file pointer */
;;;2414   			if (ofs) {
;;;2415   				dsc = (ofs - 1) / SS(fp->fs);
;;;2416   				cl = dsc / fp->fs->csize;
;;;2417   				for (;;) {
;;;2418   					ncl = *tbl++;
;;;2419   					if (!ncl) ABORT(fp->fs, FR_INT_ERR);
;;;2420   					if (cl < ncl) break;
;;;2421   					cl -= ncl; tbl++;
;;;2422   				}
;;;2423   				fp->curr_clust = cl + *tbl;
;;;2424   				csc = (BYTE)(dsc & (fp->fs->csize - 1));
;;;2425   				dsc = clust2sect(fp->fs, fp->curr_clust);
;;;2426   				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
;;;2427   				dsc += csc;
;;;2428   				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {
;;;2429   #if !_FS_TINY
;;;2430   #if !_FS_READONLY
;;;2431   					if (fp->flag & FA__DIRTY) {		/* Flush dirty buffer if needed */
;;;2432   						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2433   							ABORT(fp->fs, FR_DISK_ERR);
;;;2434   						fp->flag &= ~FA__DIRTY;
;;;2435   					}
;;;2436   #endif
;;;2437   					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)
;;;2438   						ABORT(fp->fs, FR_DISK_ERR);
;;;2439   #endif
;;;2440   					fp->dsect = dsc;
;;;2441   				}
;;;2442   			}
;;;2443   		}
;;;2444   	} else
;;;2445   #endif
;;;2446   
;;;2447   	/* Normal Seek */
;;;2448   	{
;;;2449   		DWORD clst, bcs, nsect, ifptr;
;;;2450   
;;;2451   		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
;;;2452   #if !_FS_READONLY
;;;2453   			 && !(fp->flag & FA_WRITE)
;;;2454   #endif
;;;2455   			) ofs = fp->fsize;
;;;2456   
;;;2457   		ifptr = fp->fptr;
;;;2458   		fp->fptr = nsect = 0;
;;;2459   		if (ofs) {
;;;2460   			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
;;;2461   			if (ifptr > 0 &&
;;;2462   				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
;;;2463   				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
;;;2464   				ofs -= fp->fptr;
;;;2465   				clst = fp->curr_clust;
;;;2466   			} else {									/* When seek to back cluster, */
;;;2467   				clst = fp->org_clust;					/* start from the first cluster */
;;;2468   #if !_FS_READONLY
;;;2469   				if (clst == 0) {						/* If no cluster chain, create a new chain */
;;;2470   					clst = create_chain(fp->fs, 0);
;;;2471   					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2472   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2473   					fp->org_clust = clst;
;;;2474   				}
;;;2475   #endif
;;;2476   				fp->curr_clust = clst;
;;;2477   			}
;;;2478   			if (clst != 0) {
;;;2479   				while (ofs > bcs) {						/* Cluster following loop */
;;;2480   #if !_FS_READONLY
;;;2481   					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
;;;2482   						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
;;;2483   						if (clst == 0) {				/* When disk gets full, clip file size */
;;;2484   							ofs = bcs; break;
;;;2485   						}
;;;2486   					} else
;;;2487   #endif
;;;2488   						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
;;;2489   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2490   					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
;;;2491   					fp->curr_clust = clst;
;;;2492   					fp->fptr += bcs;
;;;2493   					ofs -= bcs;
;;;2494   				}
;;;2495   				fp->fptr += ofs;
;;;2496   				if (ofs % SS(fp->fs)) {
;;;2497   					nsect = clust2sect(fp->fs, clst);	/* Current sector */
;;;2498   					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
;;;2499   					nsect += ofs / SS(fp->fs);
;;;2500   				}
;;;2501   			}
;;;2502   		}
;;;2503   		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
;;;2504   #if !_FS_TINY
;;;2505   #if !_FS_READONLY
;;;2506   			if (fp->flag & FA__DIRTY) {			/* Flush dirty buffer if needed */
;;;2507   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2508   					ABORT(fp->fs, FR_DISK_ERR);
;;;2509   				fp->flag &= ~FA__DIRTY;
;;;2510   			}
;;;2511   #endif
;;;2512   			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)
;;;2513   				ABORT(fp->fs, FR_DISK_ERR);
;;;2514   #endif
;;;2515   			fp->dsect = nsect;
;;;2516   		}
;;;2517   #if !_FS_READONLY
;;;2518   		if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
;;;2519   			fp->fsize = fp->fptr;
;;;2520   			fp->flag |= FA__WRITTEN;
;;;2521   		}
;;;2522   #endif
;;;2523   	}
;;;2524   
;;;2525   	LEAVE_FF(fp->fs, res);
;;;2526   }
00001a  b005              ADD      sp,sp,#0x14
00001c  bdf0              POP      {r4-r7,pc}
                  |L19.30|
00001e  79a0              LDRB     r0,[r4,#6]            ;2381
000020  2180              MOVS     r1,#0x80              ;2381
000022  4008              ANDS     r0,r0,r1              ;2381
000024  2800              CMP      r0,#0                 ;2381
000026  d001              BEQ      |L19.44|
000028  2002              MOVS     r0,#2                 ;2382
00002a  e7f6              B        |L19.26|
                  |L19.44|
00002c  68e0              LDR      r0,[r4,#0xc]          ;2451
00002e  42b0              CMP      r0,r6                 ;2451
000030  d205              BCS      |L19.62|
000032  79a0              LDRB     r0,[r4,#6]            ;2453
000034  2102              MOVS     r1,#2                 ;2453
000036  4008              ANDS     r0,r0,r1              ;2453
000038  2800              CMP      r0,#0                 ;2453
00003a  d100              BNE      |L19.62|
00003c  68e6              LDR      r6,[r4,#0xc]          ;2455
                  |L19.62|
00003e  68a0              LDR      r0,[r4,#8]            ;2457
000040  9000              STR      r0,[sp,#0]            ;2457
000042  2000              MOVS     r0,#0                 ;2458
000044  9001              STR      r0,[sp,#4]            ;2458
000046  60a0              STR      r0,[r4,#8]            ;2458
000048  2e00              CMP      r6,#0                 ;2459
00004a  d07d              BEQ      |L19.328|
00004c  6820              LDR      r0,[r4,#0]            ;2460
00004e  7880              LDRB     r0,[r0,#2]            ;2460
000050  0240              LSLS     r0,r0,#9              ;2460
000052  9002              STR      r0,[sp,#8]            ;2460
000054  9800              LDR      r0,[sp,#0]            ;2461
000056  2800              CMP      r0,#0                 ;2461
000058  d015              BEQ      |L19.134|
00005a  1e70              SUBS     r0,r6,#1              ;2462
00005c  9902              LDR      r1,[sp,#8]            ;2462
00005e  f7fffffe          BL       __aeabi_uidivmod
000062  4607              MOV      r7,r0                 ;2462
000064  9900              LDR      r1,[sp,#0]            ;2462
000066  1e48              SUBS     r0,r1,#1              ;2462
000068  9902              LDR      r1,[sp,#8]            ;2462
00006a  f7fffffe          BL       __aeabi_uidivmod
00006e  4287              CMP      r7,r0                 ;2462
000070  d309              BCC      |L19.134|
000072  9800              LDR      r0,[sp,#0]            ;2463
000074  1e40              SUBS     r0,r0,#1              ;2463
000076  9902              LDR      r1,[sp,#8]            ;2463
000078  1e49              SUBS     r1,r1,#1              ;2463
00007a  4388              BICS     r0,r0,r1              ;2463
00007c  60a0              STR      r0,[r4,#8]            ;2463
00007e  68a0              LDR      r0,[r4,#8]            ;2464
000080  1a36              SUBS     r6,r6,r0              ;2464
000082  6965              LDR      r5,[r4,#0x14]         ;2465
000084  e01a              B        |L19.188|
                  |L19.134|
000086  6925              LDR      r5,[r4,#0x10]         ;2467
000088  2d00              CMP      r5,#0                 ;2469
00008a  d116              BNE      |L19.186|
00008c  2100              MOVS     r1,#0                 ;2470
00008e  6820              LDR      r0,[r4,#0]            ;2470
000090  f7fffffe          BL       create_chain
000094  4605              MOV      r5,r0                 ;2470
000096  2d01              CMP      r5,#1                 ;2471
000098  d105              BNE      |L19.166|
00009a  79a0              LDRB     r0,[r4,#6]            ;2471
00009c  2180              MOVS     r1,#0x80              ;2471
00009e  4308              ORRS     r0,r0,r1              ;2471
0000a0  71a0              STRB     r0,[r4,#6]            ;2471
0000a2  2002              MOVS     r0,#2                 ;2471
0000a4  e7b9              B        |L19.26|
                  |L19.166|
0000a6  1c68              ADDS     r0,r5,#1              ;2472
0000a8  2800              CMP      r0,#0                 ;2472
0000aa  d105              BNE      |L19.184|
0000ac  79a0              LDRB     r0,[r4,#6]            ;2472
0000ae  2180              MOVS     r1,#0x80              ;2472
0000b0  4308              ORRS     r0,r0,r1              ;2472
0000b2  71a0              STRB     r0,[r4,#6]            ;2472
0000b4  2001              MOVS     r0,#1                 ;2472
0000b6  e7b0              B        |L19.26|
                  |L19.184|
0000b8  6125              STR      r5,[r4,#0x10]         ;2473
                  |L19.186|
0000ba  6165              STR      r5,[r4,#0x14]         ;2476
                  |L19.188|
0000bc  2d00              CMP      r5,#0                 ;2478
0000be  d04e              BEQ      |L19.350|
0000c0  e02e              B        |L19.288|
                  |L19.194|
0000c2  79a0              LDRB     r0,[r4,#6]            ;2481
0000c4  2102              MOVS     r1,#2                 ;2481
0000c6  4008              ANDS     r0,r0,r1              ;2481
0000c8  2800              CMP      r0,#0                 ;2481
0000ca  d008              BEQ      |L19.222|
0000cc  4629              MOV      r1,r5                 ;2482
0000ce  6820              LDR      r0,[r4,#0]            ;2482
0000d0  f7fffffe          BL       create_chain
0000d4  4605              MOV      r5,r0                 ;2482
0000d6  2d00              CMP      r5,#0                 ;2483
0000d8  d106              BNE      |L19.232|
0000da  9e02              LDR      r6,[sp,#8]            ;2484
0000dc  e023              B        |L19.294|
                  |L19.222|
0000de  4629              MOV      r1,r5                 ;2488
0000e0  6820              LDR      r0,[r4,#0]            ;2488
0000e2  f7fffffe          BL       get_fat
0000e6  4605              MOV      r5,r0                 ;2488
                  |L19.232|
0000e8  1c68              ADDS     r0,r5,#1              ;2489
0000ea  2800              CMP      r0,#0                 ;2489
0000ec  d105              BNE      |L19.250|
0000ee  79a0              LDRB     r0,[r4,#6]            ;2489
0000f0  2180              MOVS     r1,#0x80              ;2489
0000f2  4308              ORRS     r0,r0,r1              ;2489
0000f4  71a0              STRB     r0,[r4,#6]            ;2489
0000f6  2001              MOVS     r0,#1                 ;2489
0000f8  e78f              B        |L19.26|
                  |L19.250|
0000fa  2d01              CMP      r5,#1                 ;2490
0000fc  d903              BLS      |L19.262|
0000fe  6820              LDR      r0,[r4,#0]            ;2490
000100  69c0              LDR      r0,[r0,#0x1c]         ;2490
000102  42a8              CMP      r0,r5                 ;2490
000104  d805              BHI      |L19.274|
                  |L19.262|
000106  79a0              LDRB     r0,[r4,#6]            ;2490
000108  2180              MOVS     r1,#0x80              ;2490
00010a  4308              ORRS     r0,r0,r1              ;2490
00010c  71a0              STRB     r0,[r4,#6]            ;2490
00010e  2002              MOVS     r0,#2                 ;2490
000110  e783              B        |L19.26|
                  |L19.274|
000112  6165              STR      r5,[r4,#0x14]         ;2491
000114  68a1              LDR      r1,[r4,#8]            ;2492
000116  9802              LDR      r0,[sp,#8]            ;2492
000118  1808              ADDS     r0,r1,r0              ;2492
00011a  60a0              STR      r0,[r4,#8]            ;2492
00011c  9802              LDR      r0,[sp,#8]            ;2493
00011e  1a36              SUBS     r6,r6,r0              ;2493
                  |L19.288|
000120  9802              LDR      r0,[sp,#8]            ;2479
000122  4286              CMP      r6,r0                 ;2479
000124  d8cd              BHI      |L19.194|
                  |L19.294|
000126  bf00              NOP                            ;2484
000128  68a0              LDR      r0,[r4,#8]            ;2495
00012a  1980              ADDS     r0,r0,r6              ;2495
00012c  60a0              STR      r0,[r4,#8]            ;2495
00012e  05f0              LSLS     r0,r6,#23             ;2496
000130  0dc0              LSRS     r0,r0,#23             ;2496
000132  2800              CMP      r0,#0                 ;2496
000134  d013              BEQ      |L19.350|
000136  4629              MOV      r1,r5                 ;2497
000138  6820              LDR      r0,[r4,#0]            ;2497
00013a  f7fffffe          BL       clust2sect
00013e  9001              STR      r0,[sp,#4]            ;2497
000140  9801              LDR      r0,[sp,#4]            ;2498
000142  2800              CMP      r0,#0                 ;2498
000144  d107              BNE      |L19.342|
000146  e000              B        |L19.330|
                  |L19.328|
000148  e009              B        |L19.350|
                  |L19.330|
00014a  79a0              LDRB     r0,[r4,#6]            ;2498
00014c  2180              MOVS     r1,#0x80              ;2498
00014e  4308              ORRS     r0,r0,r1              ;2498
000150  71a0              STRB     r0,[r4,#6]            ;2498
000152  2002              MOVS     r0,#2                 ;2498
000154  e761              B        |L19.26|
                  |L19.342|
000156  0a71              LSRS     r1,r6,#9              ;2499
000158  9801              LDR      r0,[sp,#4]            ;2499
00015a  1808              ADDS     r0,r1,r0              ;2499
00015c  9001              STR      r0,[sp,#4]            ;2499
                  |L19.350|
00015e  8920              LDRH     r0,[r4,#8]            ;2503
000160  05c0              LSLS     r0,r0,#23             ;2503
000162  0dc0              LSRS     r0,r0,#23             ;2503
000164  2800              CMP      r0,#0                 ;2503
000166  d02e              BEQ      |L19.454|
000168  69a1              LDR      r1,[r4,#0x18]         ;2503
00016a  9801              LDR      r0,[sp,#4]            ;2503
00016c  4281              CMP      r1,r0                 ;2503
00016e  d02a              BEQ      |L19.454|
000170  79a0              LDRB     r0,[r4,#6]            ;2506
000172  2140              MOVS     r1,#0x40              ;2506
000174  4008              ANDS     r0,r0,r1              ;2506
000176  2800              CMP      r0,#0                 ;2506
000178  d013              BEQ      |L19.418|
00017a  6821              LDR      r1,[r4,#0]            ;2507
00017c  7848              LDRB     r0,[r1,#1]            ;2507
00017e  2301              MOVS     r3,#1                 ;2507
000180  4621              MOV      r1,r4                 ;2507
000182  3124              ADDS     r1,r1,#0x24           ;2507
000184  69a2              LDR      r2,[r4,#0x18]         ;2507
000186  f7fffffe          BL       disk_write
00018a  2800              CMP      r0,#0                 ;2507
00018c  d005              BEQ      |L19.410|
00018e  79a0              LDRB     r0,[r4,#6]            ;2508
000190  2180              MOVS     r1,#0x80              ;2508
000192  4308              ORRS     r0,r0,r1              ;2508
000194  71a0              STRB     r0,[r4,#6]            ;2508
000196  2001              MOVS     r0,#1                 ;2508
000198  e73f              B        |L19.26|
                  |L19.410|
00019a  79a0              LDRB     r0,[r4,#6]            ;2509
00019c  2140              MOVS     r1,#0x40              ;2509
00019e  4388              BICS     r0,r0,r1              ;2509
0001a0  71a0              STRB     r0,[r4,#6]            ;2509
                  |L19.418|
0001a2  6821              LDR      r1,[r4,#0]            ;2512
0001a4  7848              LDRB     r0,[r1,#1]            ;2512
0001a6  2301              MOVS     r3,#1                 ;2512
0001a8  4621              MOV      r1,r4                 ;2512
0001aa  3124              ADDS     r1,r1,#0x24           ;2512
0001ac  9a01              LDR      r2,[sp,#4]            ;2512
0001ae  f7fffffe          BL       disk_read
0001b2  2800              CMP      r0,#0                 ;2512
0001b4  d005              BEQ      |L19.450|
0001b6  79a0              LDRB     r0,[r4,#6]            ;2513
0001b8  2180              MOVS     r1,#0x80              ;2513
0001ba  4308              ORRS     r0,r0,r1              ;2513
0001bc  71a0              STRB     r0,[r4,#6]            ;2513
0001be  2001              MOVS     r0,#1                 ;2513
0001c0  e72b              B        |L19.26|
                  |L19.450|
0001c2  9801              LDR      r0,[sp,#4]            ;2515
0001c4  61a0              STR      r0,[r4,#0x18]         ;2515
                  |L19.454|
0001c6  68e1              LDR      r1,[r4,#0xc]          ;2518
0001c8  68a0              LDR      r0,[r4,#8]            ;2518
0001ca  4288              CMP      r0,r1                 ;2518
0001cc  d905              BLS      |L19.474|
0001ce  68a0              LDR      r0,[r4,#8]            ;2519
0001d0  60e0              STR      r0,[r4,#0xc]          ;2519
0001d2  79a0              LDRB     r0,[r4,#6]            ;2520
0001d4  2120              MOVS     r1,#0x20              ;2520
0001d6  4308              ORRS     r0,r0,r1              ;2520
0001d8  71a0              STRB     r0,[r4,#6]            ;2520
                  |L19.474|
0001da  9803              LDR      r0,[sp,#0xc]          ;2525
0001dc  e71d              B        |L19.26|
;;;2527   
                          ENDP


                          AREA ||i.f_mkdir||, CODE, READONLY, ALIGN=1

                  f_mkdir PROC
;;;2832   
;;;2833   FRESULT f_mkdir (
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;2834   	const TCHAR *path		/* Pointer to the directory path */
;;;2835   )
;;;2836   {
000002  b08e              SUB      sp,sp,#0x38
;;;2837   	FRESULT res;
;;;2838   	DIR dj;
;;;2839   	BYTE *dir, n;
;;;2840   	DWORD dsc, dcl, pcl, tim = get_fattime();
000004  f7fffffe          BL       get_fattime
000008  4607              MOV      r7,r0
;;;2841   	DEF_NAMEBUF;
;;;2842   
;;;2843   
;;;2844   	res = chk_mounted(&path, &dj.fs, 1);
00000a  2201              MOVS     r2,#1
00000c  a907              ADD      r1,sp,#0x1c
00000e  a80e              ADD      r0,sp,#0x38
000010  f7fffffe          BL       chk_mounted
000014  4606              MOV      r6,r0
;;;2845   	if (res == FR_OK) {
000016  2e00              CMP      r6,#0
                  |L20.24|
000018  d17e              BNE      |L20.280|
;;;2846   		INIT_BUF(dj);
00001a  a801              ADD      r0,sp,#4
00001c  900d              STR      r0,[sp,#0x34]
;;;2847   		res = follow_path(&dj, path);			/* Follow the file path */
00001e  a807              ADD      r0,sp,#0x1c
000020  990e              LDR      r1,[sp,#0x38]
000022  f7fffffe          BL       follow_path
000026  4606              MOV      r6,r0
;;;2848   		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
000028  2e00              CMP      r6,#0
00002a  d100              BNE      |L20.46|
00002c  2608              MOVS     r6,#8
                  |L20.46|
;;;2849   		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
00002e  2e04              CMP      r6,#4
000030  d106              BNE      |L20.64|
000032  980d              LDR      r0,[sp,#0x34]
000034  7ac0              LDRB     r0,[r0,#0xb]
000036  2120              MOVS     r1,#0x20
000038  4008              ANDS     r0,r0,r1
00003a  2800              CMP      r0,#0
00003c  d000              BEQ      |L20.64|
;;;2850   			res = FR_INVALID_NAME;
00003e  2606              MOVS     r6,#6
                  |L20.64|
;;;2851   		if (res == FR_NO_FILE) {				/* Can create a new directory */
000040  2e04              CMP      r6,#4
000042  d1e9              BNE      |L20.24|
;;;2852   			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
000044  2100              MOVS     r1,#0
000046  9807              LDR      r0,[sp,#0x1c]
000048  f7fffffe          BL       create_chain
00004c  4605              MOV      r5,r0
;;;2853   			res = FR_OK;
00004e  2600              MOVS     r6,#0
;;;2854   			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
000050  2d00              CMP      r5,#0
000052  d100              BNE      |L20.86|
000054  2607              MOVS     r6,#7
                  |L20.86|
;;;2855   			if (dcl == 1) res = FR_INT_ERR;
000056  2d01              CMP      r5,#1
000058  d100              BNE      |L20.92|
00005a  2602              MOVS     r6,#2
                  |L20.92|
;;;2856   			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
00005c  1c68              ADDS     r0,r5,#1
00005e  2800              CMP      r0,#0
000060  d100              BNE      |L20.100|
000062  2601              MOVS     r6,#1
                  |L20.100|
;;;2857   			if (res == FR_OK)					/* Flush FAT */
000064  2e00              CMP      r6,#0
000066  d104              BNE      |L20.114|
;;;2858   				res = move_window(dj.fs, 0);
000068  2100              MOVS     r1,#0
00006a  9807              LDR      r0,[sp,#0x1c]
00006c  f7fffffe          BL       move_window
000070  4606              MOV      r6,r0
                  |L20.114|
;;;2859   			if (res == FR_OK) {					/* Initialize the new directory table */
000072  2e00              CMP      r6,#0
000074  d174              BNE      |L20.352|
;;;2860   				dsc = clust2sect(dj.fs, dcl);
000076  4629              MOV      r1,r5
000078  9807              LDR      r0,[sp,#0x1c]
00007a  f7fffffe          BL       clust2sect
00007e  9005              STR      r0,[sp,#0x14]
;;;2861   				dir = dj.fs->win;
000080  9807              LDR      r0,[sp,#0x1c]
000082  4604              MOV      r4,r0
000084  3434              ADDS     r4,r4,#0x34
;;;2862   				mem_set(dir, 0, SS(dj.fs));
000086  2201              MOVS     r2,#1
000088  0252              LSLS     r2,r2,#9
00008a  2100              MOVS     r1,#0
00008c  4620              MOV      r0,r4
00008e  f7fffffe          BL       mem_set
;;;2863   				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
000092  220b              MOVS     r2,#0xb
000094  2120              MOVS     r1,#0x20
000096  4620              MOV      r0,r4
000098  f7fffffe          BL       mem_set
;;;2864   				dir[DIR_Name] = '.';
00009c  202e              MOVS     r0,#0x2e
00009e  7020              STRB     r0,[r4,#0]
;;;2865   				dir[DIR_Attr] = AM_DIR;
0000a0  2010              MOVS     r0,#0x10
0000a2  72e0              STRB     r0,[r4,#0xb]
;;;2866   				ST_DWORD(dir+DIR_WrtTime, tim);
0000a4  75a7              STRB     r7,[r4,#0x16]
0000a6  0438              LSLS     r0,r7,#16
0000a8  0e01              LSRS     r1,r0,#24
0000aa  75e1              STRB     r1,[r4,#0x17]
0000ac  0238              LSLS     r0,r7,#8
0000ae  0e01              LSRS     r1,r0,#24
0000b0  7621              STRB     r1,[r4,#0x18]
0000b2  0e39              LSRS     r1,r7,#24
0000b4  7661              STRB     r1,[r4,#0x19]
;;;2867   				ST_WORD(dir+DIR_FstClusLO, dcl);
0000b6  76a5              STRB     r5,[r4,#0x1a]
0000b8  0428              LSLS     r0,r5,#16
0000ba  0e01              LSRS     r1,r0,#24
0000bc  76e1              STRB     r1,[r4,#0x1b]
;;;2868   				ST_WORD(dir+DIR_FstClusHI, dcl >> 16);
0000be  0228              LSLS     r0,r5,#8
0000c0  0e00              LSRS     r0,r0,#24
0000c2  7520              STRB     r0,[r4,#0x14]
0000c4  0e29              LSRS     r1,r5,#24
0000c6  7561              STRB     r1,[r4,#0x15]
;;;2869   				mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
0000c8  2220              MOVS     r2,#0x20
0000ca  4621              MOV      r1,r4
0000cc  18a0              ADDS     r0,r4,r2
0000ce  f7fffffe          BL       mem_cpy
;;;2870   				dir[33] = '.'; pcl = dj.sclust;
0000d2  212e              MOVS     r1,#0x2e
0000d4  2021              MOVS     r0,#0x21
0000d6  5501              STRB     r1,[r0,r4]
0000d8  9809              LDR      r0,[sp,#0x24]
0000da  9004              STR      r0,[sp,#0x10]
;;;2871   				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
0000dc  9807              LDR      r0,[sp,#0x1c]
0000de  7800              LDRB     r0,[r0,#0]
0000e0  2803              CMP      r0,#3
0000e2  d106              BNE      |L20.242|
0000e4  9807              LDR      r0,[sp,#0x1c]
0000e6  6a81              LDR      r1,[r0,#0x28]
0000e8  9804              LDR      r0,[sp,#0x10]
0000ea  4281              CMP      r1,r0
0000ec  d101              BNE      |L20.242|
;;;2872   					pcl = 0;
0000ee  2000              MOVS     r0,#0
0000f0  9004              STR      r0,[sp,#0x10]
                  |L20.242|
;;;2873   				ST_WORD(dir+32+DIR_FstClusLO, pcl);
0000f2  9804              LDR      r0,[sp,#0x10]
0000f4  b2c1              UXTB     r1,r0
0000f6  203a              MOVS     r0,#0x3a
0000f8  5501              STRB     r1,[r0,r4]
0000fa  9804              LDR      r0,[sp,#0x10]
0000fc  0400              LSLS     r0,r0,#16
0000fe  0e01              LSRS     r1,r0,#24
000100  203b              MOVS     r0,#0x3b
000102  5501              STRB     r1,[r0,r4]
;;;2874   				ST_WORD(dir+32+DIR_FstClusHI, pcl >> 16);
000104  9804              LDR      r0,[sp,#0x10]
000106  0200              LSLS     r0,r0,#8
000108  0e01              LSRS     r1,r0,#24
00010a  2034              MOVS     r0,#0x34
00010c  5501              STRB     r1,[r0,r4]
00010e  9804              LDR      r0,[sp,#0x10]
000110  0e01              LSRS     r1,r0,#24
000112  2035              MOVS     r0,#0x35
000114  5501              STRB     r1,[r0,r4]
;;;2875   				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
000116  e000              B        |L20.282|
                  |L20.280|
000118  e04b              B        |L20.434|
                  |L20.282|
00011a  9807              LDR      r0,[sp,#0x1c]
00011c  7880              LDRB     r0,[r0,#2]
00011e  9006              STR      r0,[sp,#0x18]
000120  e01a              B        |L20.344|
                  |L20.290|
;;;2876   					dj.fs->winsect = dsc++;
000122  9907              LDR      r1,[sp,#0x1c]
000124  9805              LDR      r0,[sp,#0x14]
000126  6308              STR      r0,[r1,#0x30]
000128  9805              LDR      r0,[sp,#0x14]
00012a  1c40              ADDS     r0,r0,#1
00012c  9005              STR      r0,[sp,#0x14]
;;;2877   					dj.fs->wflag = 1;
00012e  2001              MOVS     r0,#1
000130  9907              LDR      r1,[sp,#0x1c]
000132  7108              STRB     r0,[r1,#4]
;;;2878   					res = move_window(dj.fs, 0);
000134  2100              MOVS     r1,#0
000136  9807              LDR      r0,[sp,#0x1c]
000138  f7fffffe          BL       move_window
00013c  4606              MOV      r6,r0
;;;2879   					if (res != FR_OK) break;
00013e  2e00              CMP      r6,#0
000140  d000              BEQ      |L20.324|
000142  e00c              B        |L20.350|
                  |L20.324|
;;;2880   					mem_set(dir, 0, SS(dj.fs));
000144  2201              MOVS     r2,#1
000146  0252              LSLS     r2,r2,#9
000148  2100              MOVS     r1,#0
00014a  4620              MOV      r0,r4
00014c  f7fffffe          BL       mem_set
000150  9806              LDR      r0,[sp,#0x18]         ;2875
000152  1e40              SUBS     r0,r0,#1              ;2875
000154  b2c0              UXTB     r0,r0                 ;2875
000156  9006              STR      r0,[sp,#0x18]         ;2875
                  |L20.344|
000158  9806              LDR      r0,[sp,#0x18]         ;2875
00015a  2800              CMP      r0,#0                 ;2875
00015c  d1e1              BNE      |L20.290|
                  |L20.350|
00015e  bf00              NOP                            ;2879
                  |L20.352|
;;;2881   				}
;;;2882   			}
;;;2883   			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
000160  2e00              CMP      r6,#0
000162  d103              BNE      |L20.364|
000164  a807              ADD      r0,sp,#0x1c
000166  f7fffffe          BL       dir_register
00016a  4606              MOV      r6,r0
                  |L20.364|
;;;2884   			if (res != FR_OK) {
00016c  2e00              CMP      r6,#0
00016e  d004              BEQ      |L20.378|
;;;2885   				remove_chain(dj.fs, dcl);				/* Could not register, remove cluster chain */
000170  4629              MOV      r1,r5
000172  9807              LDR      r0,[sp,#0x1c]
000174  f7fffffe          BL       remove_chain
000178  e01b              B        |L20.434|
                  |L20.378|
;;;2886   			} else {
;;;2887   				dir = dj.dir;
00017a  9c0c              LDR      r4,[sp,#0x30]
;;;2888   				dir[DIR_Attr] = AM_DIR;					/* Attribute */
00017c  2010              MOVS     r0,#0x10
00017e  72e0              STRB     r0,[r4,#0xb]
;;;2889   				ST_DWORD(dir+DIR_WrtTime, tim);			/* Created time */
000180  75a7              STRB     r7,[r4,#0x16]
000182  0438              LSLS     r0,r7,#16
000184  0e01              LSRS     r1,r0,#24
000186  75e1              STRB     r1,[r4,#0x17]
000188  0238              LSLS     r0,r7,#8
00018a  0e01              LSRS     r1,r0,#24
00018c  7621              STRB     r1,[r4,#0x18]
00018e  0e39              LSRS     r1,r7,#24
000190  7661              STRB     r1,[r4,#0x19]
;;;2890   				ST_WORD(dir+DIR_FstClusLO, dcl);		/* Table start cluster */
000192  76a5              STRB     r5,[r4,#0x1a]
000194  0428              LSLS     r0,r5,#16
000196  0e01              LSRS     r1,r0,#24
000198  76e1              STRB     r1,[r4,#0x1b]
;;;2891   				ST_WORD(dir+DIR_FstClusHI, dcl >> 16);
00019a  0228              LSLS     r0,r5,#8
00019c  0e00              LSRS     r0,r0,#24
00019e  7520              STRB     r0,[r4,#0x14]
0001a0  0e29              LSRS     r1,r5,#24
0001a2  7561              STRB     r1,[r4,#0x15]
;;;2892   				dj.fs->wflag = 1;
0001a4  2001              MOVS     r0,#1
0001a6  9907              LDR      r1,[sp,#0x1c]
0001a8  7108              STRB     r0,[r1,#4]
;;;2893   				res = sync(dj.fs);
0001aa  9807              LDR      r0,[sp,#0x1c]
0001ac  f7fffffe          BL       sync
0001b0  4606              MOV      r6,r0
                  |L20.434|
;;;2894   			}
;;;2895   		}
;;;2896   		FREE_BUF();
;;;2897   	}
;;;2898   
;;;2899   	LEAVE_FF(dj.fs, res);
0001b2  4630              MOV      r0,r6
;;;2900   }
0001b4  b00f              ADD      sp,sp,#0x3c
0001b6  bdf0              POP      {r4-r7,pc}
;;;2901   
                          ENDP


                          AREA ||i.f_mkfs||, CODE, READONLY, ALIGN=2

                  f_mkfs PROC
;;;3134   
;;;3135   FRESULT f_mkfs (
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;3136   	BYTE drv,		/* Logical drive number */
;;;3137   	BYTE sfd,		/* Partitioning rule 0:FDISK, 1:SFD */
;;;3138   	UINT au			/* Allocation unit size [bytes] */
;;;3139   )
;;;3140   {
000002  b090              SUB      sp,sp,#0x40
;;;3141   	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
;;;3142   	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
;;;3143   	BYTE fmt, md, *tbl;
;;;3144   	DWORD n_clst, vs, n;
;;;3145   	UINT as, i;
;;;3146   	DWORD b_vol, b_fat, b_dir, b_data;		/* Area offset (LBA) */
;;;3147   	DWORD n_vol, n_rsv, n_fat, n_dir;		/* Area size */
;;;3148   	FATFS *fs;
;;;3149   	DSTATUS stat;
;;;3150   
;;;3151   
;;;3152   	/* Check mounted drive and clear work area */
;;;3153   	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
000004  9810              LDR      r0,[sp,#0x40]
000006  2801              CMP      r0,#1
000008  db02              BLT      |L21.16|
00000a  200b              MOVS     r0,#0xb
                  |L21.12|
;;;3154   	fs = FatFs[drv];
;;;3155   	if (!fs) return FR_NOT_ENABLED;
;;;3156   	fs->fs_type = 0;
;;;3157   	drv = LD2PD(drv);
;;;3158   
;;;3159   	/* Get disk statics */
;;;3160   	stat = disk_initialize(drv);
;;;3161   	if (stat & STA_NOINIT) return FR_NOT_READY;
;;;3162   	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
;;;3163   #if _MAX_SS != 512					/* Get disk sector size */
;;;3164   	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
;;;3165   		return FR_DISK_ERR;
;;;3166   #endif
;;;3167   	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
;;;3168   		return FR_DISK_ERR;
;;;3169   	b_vol = (sfd == 1) ? 0 : 63;	/* Volume start sector */
;;;3170   	n_vol -= b_vol;
;;;3171   	if (au & (au - 1)) au = 0;		/* Check validity of the allocation unit size */
;;;3172   	if (!au) {						/* AU auto selection */
;;;3173   		vs = n_vol / (2000 / (SS(fs) / 512));
;;;3174   		for (i = 0; vs < vst[i]; i++) ;
;;;3175   		au = cst[i];
;;;3176   	}
;;;3177   	if (_MAX_SS != 512 && au < SS(fs)) au = SS(fs);
;;;3178   	au /= SS(fs);		/* Number of sectors per cluster */
;;;3179   	if (au == 0) au = 1;
;;;3180   	if (au > 128) au = 128;
;;;3181   
;;;3182   	/* Pre-compute number of clusters and FAT syb-type */
;;;3183   	n_clst = n_vol / au;
;;;3184   	fmt = FS_FAT12;
;;;3185   	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
;;;3186   	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
;;;3187   
;;;3188   	/* Determine offset and size of FAT structure */
;;;3189   	if (fmt == FS_FAT32) {
;;;3190   		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
;;;3191   		n_rsv = 32;
;;;3192   		n_dir = 0;
;;;3193   	} else {
;;;3194   		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
;;;3195   		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
;;;3196   		n_rsv = 1;
;;;3197   		n_dir = N_ROOTDIR * 32UL / SS(fs);
;;;3198   	}
;;;3199   	b_fat = b_vol + n_rsv;				/* FAT area start sector */
;;;3200   	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
;;;3201   	b_data = b_dir + n_dir;				/* Data area start sector */
;;;3202   	if (n_vol < b_data + au) return FR_MKFS_ABORTED;	/* Too small volume */
;;;3203   
;;;3204   	/* Align data start sector to erase block boundary (for flash memory media) */
;;;3205   	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_DISK_ERR;
;;;3206   	if (!n || n > 32768) return FR_MKFS_ABORTED;
;;;3207   	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest boundary from current data start */
;;;3208   	n = (n - b_data) / N_FATS;
;;;3209   	if (fmt == FS_FAT32) {		/* FAT32: Move FAT start */
;;;3210   		n_rsv += n;
;;;3211   		b_fat += n;
;;;3212   	} else {					/* FAT12/16: Expand FAT size */
;;;3213   		n_fat += n;
;;;3214   	}
;;;3215   	/* b_dir and b_data are no longer used below */
;;;3216   
;;;3217   	/* Determine number of cluster and final check of validity of the FAT sub-type */
;;;3218   	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
;;;3219   	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
;;;3220   		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
;;;3221   		return FR_MKFS_ABORTED;
;;;3222   
;;;3223   	/* Create partition table if required */
;;;3224   	if (sfd == 1) {
;;;3225   		md = 0xF0;
;;;3226   	} else {
;;;3227   		DWORD n_disk = b_vol + n_vol;
;;;3228   
;;;3229   		mem_set(fs->win, 0, SS(fs));
;;;3230   		tbl = fs->win+MBR_Table;
;;;3231   		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
;;;3232   		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
;;;3233   			n_disk = n_disk / 63 / 255;
;;;3234   			tbl[7] = (BYTE)n_disk;
;;;3235   			tbl[6] = (BYTE)((n_disk >> 2) | 63);
;;;3236   		} else {
;;;3237   			ST_WORD(&tbl[6], 0xFFFF);
;;;3238   		}
;;;3239   		tbl[5] = 254;
;;;3240   		if (fmt != FS_FAT32)			/* System ID */
;;;3241   			tbl[4] = (n_vol < 0x10000) ? 0x04 : 0x06;
;;;3242   		else
;;;3243   			tbl[4] = 0x0c;
;;;3244   		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
;;;3245   		ST_DWORD(tbl+12, n_vol);		/* Partition size in LBA */
;;;3246   		ST_WORD(tbl+64, 0xAA55);		/* Signature */
;;;3247   		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
;;;3248   			return FR_DISK_ERR;
;;;3249   		md = 0xF8;
;;;3250   	}
;;;3251   
;;;3252   	/* Create VBR */
;;;3253   	tbl = fs->win;								/* Clear buffer */
;;;3254   	mem_set(tbl, 0, SS(fs));
;;;3255   	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
;;;3256   	as = SS(fs);								/* Sector size */
;;;3257   	ST_WORD(tbl+BPB_BytsPerSec, as);
;;;3258   	tbl[BPB_SecPerClus] = (BYTE)au;				/* Sectors per cluster */
;;;3259   	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
;;;3260   	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
;;;3261   	as = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;		/* Number of rootdir entries */
;;;3262   	ST_WORD(tbl+BPB_RootEntCnt, as);
;;;3263   	if (n_vol < 0x10000) {						/* Number of total sectors */
;;;3264   		ST_WORD(tbl+BPB_TotSec16, n_vol);
;;;3265   	} else {
;;;3266   		ST_DWORD(tbl+BPB_TotSec32, n_vol);
;;;3267   	}
;;;3268   	tbl[BPB_Media] = md;						/* Media descriptor */
;;;3269   	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
;;;3270   	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
;;;3271   	ST_DWORD(tbl+BPB_HiddSec, b_vol);			/* Hidden sectors */
;;;3272   	n = get_fattime();							/* Use current time as VSN */
;;;3273   	if (fmt == FS_FAT32) {
;;;3274   		ST_DWORD(tbl+BS_VolID32, n);			/* VSN */
;;;3275   		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of sectors per FAT */
;;;3276   		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory start cluster (2) */
;;;3277   		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (VBR+1) */
;;;3278   		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (VBR+6) */
;;;3279   		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
;;;3280   		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
;;;3281   		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume label, FAT signature */
;;;3282   	} else {
;;;3283   		ST_DWORD(tbl+BS_VolID, n);				/* VSN */
;;;3284   		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of sectors per FAT */
;;;3285   		tbl[BS_DrvNum] = 0x80;					/* Drive number */
;;;3286   		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
;;;3287   		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume label, FAT signature */
;;;3288   	}
;;;3289   	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature (Offset is fixed here regardless of sector size) */
;;;3290   	if (disk_write(drv, tbl, b_vol, 1) != RES_OK)	/* Original (VBR) */
;;;3291   		return FR_DISK_ERR;
;;;3292   	if (fmt == FS_FAT32)						/* Backup (VBR+6) */
;;;3293   		disk_write(drv, tbl, b_vol + 6, 1);
;;;3294   
;;;3295   	/* Initialize FAT area */
;;;3296   	for (i = 0; i < N_FATS; i++) {
;;;3297   		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
;;;3298   		n = md;								/* Media descriptor byte */
;;;3299   		if (fmt != FS_FAT32) {
;;;3300   			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
;;;3301   			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
;;;3302   		} else {
;;;3303   			n |= 0x0FFFFF00;
;;;3304   			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
;;;3305   			ST_DWORD(tbl+4, 0x0FFFFFFF);
;;;3306   			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
;;;3307   		}
;;;3308   		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
;;;3309   			return FR_DISK_ERR;
;;;3310   		mem_set(tbl, 0, SS(fs));		/* Fill following FAT entries with zero */
;;;3311   		for (n = 1; n < n_fat; n++) {	/* This loop may take a time on FAT32 volume due to many single sector write */
;;;3312   			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
;;;3313   				return FR_DISK_ERR;
;;;3314   		}
;;;3315   	}
;;;3316   
;;;3317   	/* Initialize root directory */
;;;3318   	n = (fmt == FS_FAT32) ? as : n_dir;
;;;3319   	while (n--) {
;;;3320   		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
;;;3321   			return FR_DISK_ERR;
;;;3322   	}
;;;3323   
;;;3324   	/* Create FSInfo record if needed */
;;;3325   	if (fmt == FS_FAT32) {
;;;3326   		ST_WORD(tbl+BS_55AA, 0xAA55);
;;;3327   		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
;;;3328   		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
;;;3329   		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
;;;3330   		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
;;;3331   		disk_write(drv, tbl, b_vol + 1, 1);	/* Original (VBR+1) */
;;;3332   		disk_write(drv, tbl, b_vol + 7, 1);	/* Backup  (VBR+7) */
;;;3333   	}
;;;3334   
;;;3335   	return (disk_ioctl(drv, CTRL_SYNC, (void*)0) == RES_OK) ? FR_OK : FR_DISK_ERR;
;;;3336   }
00000c  b013              ADD      sp,sp,#0x4c
00000e  bdf0              POP      {r4-r7,pc}
                  |L21.16|
000010  9810              LDR      r0,[sp,#0x40]         ;3154
000012  0080              LSLS     r0,r0,#2              ;3154
000014  49fe              LDR      r1,|L21.1040|
000016  5808              LDR      r0,[r1,r0]            ;3154
000018  9003              STR      r0,[sp,#0xc]          ;3154
00001a  9803              LDR      r0,[sp,#0xc]          ;3155
00001c  2800              CMP      r0,#0                 ;3155
00001e  d101              BNE      |L21.36|
000020  200c              MOVS     r0,#0xc               ;3155
000022  e7f3              B        |L21.12|
                  |L21.36|
000024  2100              MOVS     r1,#0                 ;3156
000026  9803              LDR      r0,[sp,#0xc]          ;3156
000028  7001              STRB     r1,[r0,#0]            ;3156
00002a  9810              LDR      r0,[sp,#0x40]         ;3157
00002c  9010              STR      r0,[sp,#0x40]         ;3157
00002e  9810              LDR      r0,[sp,#0x40]         ;3160
000030  f7fffffe          BL       disk_initialize
000034  9002              STR      r0,[sp,#8]            ;3160
000036  9802              LDR      r0,[sp,#8]            ;3161
000038  07c0              LSLS     r0,r0,#31             ;3161
00003a  0fc0              LSRS     r0,r0,#31             ;3161
00003c  2800              CMP      r0,#0                 ;3161
00003e  d001              BEQ      |L21.68|
000040  2003              MOVS     r0,#3                 ;3161
000042  e7e3              B        |L21.12|
                  |L21.68|
000044  2104              MOVS     r1,#4                 ;3162
000046  9802              LDR      r0,[sp,#8]            ;3162
000048  4008              ANDS     r0,r0,r1              ;3162
00004a  2800              CMP      r0,#0                 ;3162
00004c  d001              BEQ      |L21.82|
00004e  200a              MOVS     r0,#0xa               ;3162
000050  e7dc              B        |L21.12|
                  |L21.82|
000052  aa06              ADD      r2,sp,#0x18           ;3167
000054  2101              MOVS     r1,#1                 ;3167
000056  9810              LDR      r0,[sp,#0x40]         ;3167
000058  f7fffffe          BL       disk_ioctl
00005c  2800              CMP      r0,#0                 ;3167
00005e  d102              BNE      |L21.102|
000060  9806              LDR      r0,[sp,#0x18]         ;3167
000062  2880              CMP      r0,#0x80              ;3167
000064  d201              BCS      |L21.106|
                  |L21.102|
000066  2001              MOVS     r0,#1                 ;3168
000068  e7d0              B        |L21.12|
                  |L21.106|
00006a  9811              LDR      r0,[sp,#0x44]         ;3169
00006c  2801              CMP      r0,#1                 ;3169
00006e  d101              BNE      |L21.116|
000070  2000              MOVS     r0,#0                 ;3169
000072  e000              B        |L21.118|
                  |L21.116|
000074  203f              MOVS     r0,#0x3f              ;3169
                  |L21.118|
000076  900a              STR      r0,[sp,#0x28]         ;3169
000078  9906              LDR      r1,[sp,#0x18]         ;3170
00007a  980a              LDR      r0,[sp,#0x28]         ;3170
00007c  1a08              SUBS     r0,r1,r0              ;3170
00007e  9006              STR      r0,[sp,#0x18]         ;3170
000080  9812              LDR      r0,[sp,#0x48]         ;3171
000082  1e40              SUBS     r0,r0,#1              ;3171
000084  9912              LDR      r1,[sp,#0x48]         ;3171
000086  4008              ANDS     r0,r0,r1              ;3171
000088  2800              CMP      r0,#0                 ;3171
00008a  d001              BEQ      |L21.144|
00008c  2000              MOVS     r0,#0                 ;3171
00008e  9012              STR      r0,[sp,#0x48]         ;3171
                  |L21.144|
000090  9812              LDR      r0,[sp,#0x48]         ;3172
000092  2800              CMP      r0,#0                 ;3172
000094  d117              BNE      |L21.198|
000096  217d              MOVS     r1,#0x7d              ;3173
000098  0109              LSLS     r1,r1,#4              ;3173
00009a  9806              LDR      r0,[sp,#0x18]         ;3173
00009c  f7fffffe          BL       __aeabi_uidivmod
0000a0  900e              STR      r0,[sp,#0x38]         ;3173
0000a2  2000              MOVS     r0,#0                 ;3174
0000a4  900b              STR      r0,[sp,#0x2c]         ;3174
0000a6  e002              B        |L21.174|
                  |L21.168|
0000a8  980b              LDR      r0,[sp,#0x2c]         ;3174
0000aa  1c40              ADDS     r0,r0,#1              ;3174
0000ac  900b              STR      r0,[sp,#0x2c]         ;3174
                  |L21.174|
0000ae  980b              LDR      r0,[sp,#0x2c]         ;3174
0000b0  0040              LSLS     r0,r0,#1              ;3174
0000b2  49d8              LDR      r1,|L21.1044|
0000b4  5a09              LDRH     r1,[r1,r0]            ;3174
0000b6  980e              LDR      r0,[sp,#0x38]         ;3174
0000b8  4281              CMP      r1,r0                 ;3174
0000ba  d8f5              BHI      |L21.168|
0000bc  980b              LDR      r0,[sp,#0x2c]         ;3175
0000be  0040              LSLS     r0,r0,#1              ;3175
0000c0  49d5              LDR      r1,|L21.1048|
0000c2  5a08              LDRH     r0,[r1,r0]            ;3175
0000c4  9012              STR      r0,[sp,#0x48]         ;3175
                  |L21.198|
0000c6  bf00              NOP                            ;3177
0000c8  9812              LDR      r0,[sp,#0x48]         ;3178
0000ca  0a40              LSRS     r0,r0,#9              ;3178
0000cc  9012              STR      r0,[sp,#0x48]         ;3178
0000ce  9812              LDR      r0,[sp,#0x48]         ;3179
0000d0  2800              CMP      r0,#0                 ;3179
0000d2  d101              BNE      |L21.216|
0000d4  2001              MOVS     r0,#1                 ;3179
0000d6  9012              STR      r0,[sp,#0x48]         ;3179
                  |L21.216|
0000d8  9812              LDR      r0,[sp,#0x48]         ;3180
0000da  2880              CMP      r0,#0x80              ;3180
0000dc  d901              BLS      |L21.226|
0000de  2080              MOVS     r0,#0x80              ;3180
0000e0  9012              STR      r0,[sp,#0x48]         ;3180
                  |L21.226|
0000e2  9912              LDR      r1,[sp,#0x48]         ;3183
0000e4  9806              LDR      r0,[sp,#0x18]         ;3183
0000e6  f7fffffe          BL       __aeabi_uidivmod
0000ea  4607              MOV      r7,r0                 ;3183
0000ec  2501              MOVS     r5,#1                 ;3184
0000ee  49cb              LDR      r1,|L21.1052|
0000f0  428f              CMP      r7,r1                 ;3185
0000f2  d300              BCC      |L21.246|
0000f4  2502              MOVS     r5,#2                 ;3185
                  |L21.246|
0000f6  48ca              LDR      r0,|L21.1056|
0000f8  4287              CMP      r7,r0                 ;3186
0000fa  d300              BCC      |L21.254|
0000fc  2503              MOVS     r5,#3                 ;3186
                  |L21.254|
0000fe  2d03              CMP      r5,#3                 ;3189
000100  d10a              BNE      |L21.280|
000102  00b8              LSLS     r0,r7,#2              ;3190
000104  3008              ADDS     r0,r0,#8              ;3190
000106  30ff              ADDS     r0,r0,#0xff           ;3190
000108  30ff              ADDS     r0,r0,#0xff           ;3190
00010a  3001              ADDS     r0,#1                 ;3190
00010c  0a46              LSRS     r6,r0,#9              ;3190
00010e  2020              MOVS     r0,#0x20              ;3191
000110  9005              STR      r0,[sp,#0x14]         ;3191
000112  2000              MOVS     r0,#0                 ;3192
000114  9004              STR      r0,[sp,#0x10]         ;3192
000116  e012              B        |L21.318|
                  |L21.280|
000118  2d01              CMP      r5,#1                 ;3194
00011a  d105              BNE      |L21.296|
00011c  0078              LSLS     r0,r7,#1              ;3194
00011e  1838              ADDS     r0,r7,r0              ;3194
000120  1c40              ADDS     r0,r0,#1              ;3194
000122  0840              LSRS     r0,r0,#1              ;3194
000124  1cc0              ADDS     r0,r0,#3              ;3194
000126  e001              B        |L21.300|
                  |L21.296|
000128  0078              LSLS     r0,r7,#1              ;3194
00012a  1d00              ADDS     r0,r0,#4              ;3194
                  |L21.300|
00012c  4606              MOV      r6,r0                 ;3194
00012e  1df0              ADDS     r0,r6,#7              ;3195
000130  30ff              ADDS     r0,r0,#0xff           ;3195
000132  30f9              ADDS     r0,r0,#0xf9           ;3195
000134  0a46              LSRS     r6,r0,#9              ;3195
000136  2001              MOVS     r0,#1                 ;3196
000138  9005              STR      r0,[sp,#0x14]         ;3196
00013a  2020              MOVS     r0,#0x20              ;3197
00013c  9004              STR      r0,[sp,#0x10]         ;3197
                  |L21.318|
00013e  9905              LDR      r1,[sp,#0x14]         ;3199
000140  980a              LDR      r0,[sp,#0x28]         ;3199
000142  1840              ADDS     r0,r0,r1              ;3199
000144  9009              STR      r0,[sp,#0x24]         ;3199
000146  9809              LDR      r0,[sp,#0x24]         ;3200
000148  1830              ADDS     r0,r6,r0              ;3200
00014a  9008              STR      r0,[sp,#0x20]         ;3200
00014c  9904              LDR      r1,[sp,#0x10]         ;3201
00014e  9808              LDR      r0,[sp,#0x20]         ;3201
000150  1840              ADDS     r0,r0,r1              ;3201
000152  9007              STR      r0,[sp,#0x1c]         ;3201
000154  9912              LDR      r1,[sp,#0x48]         ;3202
000156  9807              LDR      r0,[sp,#0x1c]         ;3202
000158  1840              ADDS     r0,r0,r1              ;3202
00015a  9906              LDR      r1,[sp,#0x18]         ;3202
00015c  4288              CMP      r0,r1                 ;3202
00015e  d901              BLS      |L21.356|
000160  200e              MOVS     r0,#0xe               ;3202
000162  e753              B        |L21.12|
                  |L21.356|
000164  aa0d              ADD      r2,sp,#0x34           ;3205
000166  2103              MOVS     r1,#3                 ;3205
000168  9810              LDR      r0,[sp,#0x40]         ;3205
00016a  f7fffffe          BL       disk_ioctl
00016e  2800              CMP      r0,#0                 ;3205
000170  d001              BEQ      |L21.374|
000172  2001              MOVS     r0,#1                 ;3205
000174  e74a              B        |L21.12|
                  |L21.374|
000176  980d              LDR      r0,[sp,#0x34]         ;3206
000178  2800              CMP      r0,#0                 ;3206
00017a  d004              BEQ      |L21.390|
00017c  2101              MOVS     r1,#1                 ;3206
00017e  03c9              LSLS     r1,r1,#15             ;3206
000180  980d              LDR      r0,[sp,#0x34]         ;3206
000182  4288              CMP      r0,r1                 ;3206
000184  d901              BLS      |L21.394|
                  |L21.390|
000186  200e              MOVS     r0,#0xe               ;3206
000188  e740              B        |L21.12|
                  |L21.394|
00018a  990d              LDR      r1,[sp,#0x34]         ;3207
00018c  9807              LDR      r0,[sp,#0x1c]         ;3207
00018e  1840              ADDS     r0,r0,r1              ;3207
000190  1e40              SUBS     r0,r0,#1              ;3207
000192  1e49              SUBS     r1,r1,#1              ;3207
000194  4388              BICS     r0,r0,r1              ;3207
000196  900d              STR      r0,[sp,#0x34]         ;3207
000198  990d              LDR      r1,[sp,#0x34]         ;3208
00019a  9807              LDR      r0,[sp,#0x1c]         ;3208
00019c  1a08              SUBS     r0,r1,r0              ;3208
00019e  900d              STR      r0,[sp,#0x34]         ;3208
0001a0  2d03              CMP      r5,#3                 ;3209
0001a2  d108              BNE      |L21.438|
0001a4  990d              LDR      r1,[sp,#0x34]         ;3210
0001a6  9805              LDR      r0,[sp,#0x14]         ;3210
0001a8  1840              ADDS     r0,r0,r1              ;3210
0001aa  9005              STR      r0,[sp,#0x14]         ;3210
0001ac  990d              LDR      r1,[sp,#0x34]         ;3211
0001ae  9809              LDR      r0,[sp,#0x24]         ;3211
0001b0  1840              ADDS     r0,r0,r1              ;3211
0001b2  9009              STR      r0,[sp,#0x24]         ;3211
0001b4  e001              B        |L21.442|
                  |L21.438|
0001b6  980d              LDR      r0,[sp,#0x34]         ;3213
0001b8  1836              ADDS     r6,r6,r0              ;3213
                  |L21.442|
0001ba  9a06              LDR      r2,[sp,#0x18]         ;3218
0001bc  9905              LDR      r1,[sp,#0x14]         ;3218
0001be  1a51              SUBS     r1,r2,r1              ;3218
0001c0  1b8a              SUBS     r2,r1,r6              ;3218
0001c2  9904              LDR      r1,[sp,#0x10]         ;3218
0001c4  1a50              SUBS     r0,r2,r1              ;3218
0001c6  9912              LDR      r1,[sp,#0x48]         ;3218
0001c8  f7fffffe          BL       __aeabi_uidivmod
0001cc  4607              MOV      r7,r0                 ;3218
0001ce  2d02              CMP      r5,#2                 ;3219
0001d0  d102              BNE      |L21.472|
0001d2  4892              LDR      r0,|L21.1052|
0001d4  4287              CMP      r7,r0                 ;3219
0001d6  d304              BCC      |L21.482|
                  |L21.472|
0001d8  2d03              CMP      r5,#3                 ;3220
0001da  d104              BNE      |L21.486|
0001dc  4890              LDR      r0,|L21.1056|
0001de  4287              CMP      r7,r0                 ;3220
0001e0  d201              BCS      |L21.486|
                  |L21.482|
0001e2  200e              MOVS     r0,#0xe               ;3221
0001e4  e712              B        |L21.12|
                  |L21.486|
0001e6  9811              LDR      r0,[sp,#0x44]         ;3224
0001e8  2801              CMP      r0,#1                 ;3224
0001ea  d102              BNE      |L21.498|
0001ec  20f0              MOVS     r0,#0xf0              ;3225
0001ee  900f              STR      r0,[sp,#0x3c]         ;3225
0001f0  e065              B        |L21.702|
                  |L21.498|
0001f2  9906              LDR      r1,[sp,#0x18]         ;3227
0001f4  980a              LDR      r0,[sp,#0x28]         ;3227
0001f6  1840              ADDS     r0,r0,r1              ;3227
0001f8  9001              STR      r0,[sp,#4]            ;3227
0001fa  2201              MOVS     r2,#1                 ;3229
0001fc  0252              LSLS     r2,r2,#9              ;3229
0001fe  2100              MOVS     r1,#0                 ;3229
000200  9803              LDR      r0,[sp,#0xc]          ;3229
000202  3034              ADDS     r0,r0,#0x34           ;3229
000204  f7fffffe          BL       mem_set
000208  9803              LDR      r0,[sp,#0xc]          ;3230
00020a  4604              MOV      r4,r0                 ;3230
00020c  34ff              ADDS     r4,r4,#0xff           ;3230
00020e  34f3              ADDS     r4,r4,#0xf3           ;3230
000210  2080              MOVS     r0,#0x80              ;3231
000212  7020              STRB     r0,[r4,#0]            ;3231
000214  2001              MOVS     r0,#1                 ;3231
000216  7060              STRB     r0,[r4,#1]            ;3231
000218  70a0              STRB     r0,[r4,#2]            ;3231
00021a  2000              MOVS     r0,#0                 ;3231
00021c  70e0              STRB     r0,[r4,#3]            ;3231
00021e  4981              LDR      r1,|L21.1060|
000220  9801              LDR      r0,[sp,#4]            ;3232
000222  4288              CMP      r0,r1                 ;3232
000224  d210              BCS      |L21.584|
000226  213f              MOVS     r1,#0x3f              ;3233
000228  9801              LDR      r0,[sp,#4]            ;3233
00022a  f7fffffe          BL       __aeabi_uidivmod
00022e  21ff              MOVS     r1,#0xff              ;3233
000230  9000              STR      r0,[sp,#0]            ;3233
000232  f7fffffe          BL       __aeabi_uidivmod
000236  9001              STR      r0,[sp,#4]            ;3233
000238  9801              LDR      r0,[sp,#4]            ;3234
00023a  71e0              STRB     r0,[r4,#7]            ;3234
00023c  9801              LDR      r0,[sp,#4]            ;3235
00023e  0880              LSRS     r0,r0,#2              ;3235
000240  213f              MOVS     r1,#0x3f              ;3235
000242  4308              ORRS     r0,r0,r1              ;3235
000244  71a0              STRB     r0,[r4,#6]            ;3235
000246  e003              B        |L21.592|
                  |L21.584|
000248  20ff              MOVS     r0,#0xff              ;3237
00024a  71a0              STRB     r0,[r4,#6]            ;3237
00024c  21ff              MOVS     r1,#0xff              ;3237
00024e  71e1              STRB     r1,[r4,#7]            ;3237
                  |L21.592|
000250  20fe              MOVS     r0,#0xfe              ;3239
000252  7160              STRB     r0,[r4,#5]            ;3239
000254  2d03              CMP      r5,#3                 ;3240
000256  d009              BEQ      |L21.620|
000258  2101              MOVS     r1,#1                 ;3241
00025a  0409              LSLS     r1,r1,#16             ;3241
00025c  9806              LDR      r0,[sp,#0x18]         ;3241
00025e  4288              CMP      r0,r1                 ;3241
000260  d201              BCS      |L21.614|
000262  2004              MOVS     r0,#4                 ;3241
000264  e000              B        |L21.616|
                  |L21.614|
000266  2006              MOVS     r0,#6                 ;3241
                  |L21.616|
000268  7120              STRB     r0,[r4,#4]            ;3241
00026a  e001              B        |L21.624|
                  |L21.620|
00026c  200c              MOVS     r0,#0xc               ;3243
00026e  7120              STRB     r0,[r4,#4]            ;3243
                  |L21.624|
000270  203f              MOVS     r0,#0x3f              ;3244
000272  7220              STRB     r0,[r4,#8]            ;3244
000274  2100              MOVS     r1,#0                 ;3244
000276  7261              STRB     r1,[r4,#9]            ;3244
000278  72a1              STRB     r1,[r4,#0xa]          ;3244
00027a  72e1              STRB     r1,[r4,#0xb]          ;3244
00027c  9806              LDR      r0,[sp,#0x18]         ;3245
00027e  7320              STRB     r0,[r4,#0xc]          ;3245
000280  9806              LDR      r0,[sp,#0x18]         ;3245
000282  0400              LSLS     r0,r0,#16             ;3245
000284  0e01              LSRS     r1,r0,#24             ;3245
000286  7361              STRB     r1,[r4,#0xd]          ;3245
000288  9806              LDR      r0,[sp,#0x18]         ;3245
00028a  0200              LSLS     r0,r0,#8              ;3245
00028c  0e01              LSRS     r1,r0,#24             ;3245
00028e  73a1              STRB     r1,[r4,#0xe]          ;3245
000290  9806              LDR      r0,[sp,#0x18]         ;3245
000292  0e01              LSRS     r1,r0,#24             ;3245
000294  73e1              STRB     r1,[r4,#0xf]          ;3245
000296  2155              MOVS     r1,#0x55              ;3246
000298  2040              MOVS     r0,#0x40              ;3246
00029a  5501              STRB     r1,[r0,r4]            ;3246
00029c  21aa              MOVS     r1,#0xaa              ;3246
00029e  2041              MOVS     r0,#0x41              ;3246
0002a0  5501              STRB     r1,[r0,r4]            ;3246
0002a2  2301              MOVS     r3,#1                 ;3247
0002a4  2200              MOVS     r2,#0                 ;3247
0002a6  9903              LDR      r1,[sp,#0xc]          ;3247
0002a8  3134              ADDS     r1,r1,#0x34           ;3247
0002aa  9810              LDR      r0,[sp,#0x40]         ;3247
0002ac  f7fffffe          BL       disk_write
0002b0  2800              CMP      r0,#0                 ;3247
0002b2  d001              BEQ      |L21.696|
0002b4  2001              MOVS     r0,#1                 ;3248
0002b6  e6a9              B        |L21.12|
                  |L21.696|
0002b8  20f8              MOVS     r0,#0xf8              ;3249
0002ba  900f              STR      r0,[sp,#0x3c]         ;3249
0002bc  bf00              NOP                            ;3250
                  |L21.702|
0002be  9803              LDR      r0,[sp,#0xc]          ;3253
0002c0  4604              MOV      r4,r0                 ;3253
0002c2  3434              ADDS     r4,r4,#0x34           ;3253
0002c4  2201              MOVS     r2,#1                 ;3254
0002c6  0252              LSLS     r2,r2,#9              ;3254
0002c8  2100              MOVS     r1,#0                 ;3254
0002ca  4620              MOV      r0,r4                 ;3254
0002cc  f7fffffe          BL       mem_set
0002d0  20eb              MOVS     r0,#0xeb              ;3255
0002d2  7020              STRB     r0,[r4,#0]            ;3255
0002d4  20fe              MOVS     r0,#0xfe              ;3255
0002d6  7060              STRB     r0,[r4,#1]            ;3255
0002d8  2090              MOVS     r0,#0x90              ;3255
0002da  70a0              STRB     r0,[r4,#2]            ;3255
0002dc  2000              MOVS     r0,#0                 ;3255
0002de  70e0              STRB     r0,[r4,#3]            ;3255
0002e0  2001              MOVS     r0,#1                 ;3256
0002e2  0240              LSLS     r0,r0,#9              ;3256
0002e4  900c              STR      r0,[sp,#0x30]         ;3256
0002e6  980c              LDR      r0,[sp,#0x30]         ;3257
0002e8  72e0              STRB     r0,[r4,#0xb]          ;3257
0002ea  980c              LDR      r0,[sp,#0x30]         ;3257
0002ec  1201              ASRS     r1,r0,#8              ;3257
0002ee  7321              STRB     r1,[r4,#0xc]          ;3257
0002f0  9812              LDR      r0,[sp,#0x48]         ;3258
0002f2  7360              STRB     r0,[r4,#0xd]          ;3258
0002f4  9805              LDR      r0,[sp,#0x14]         ;3259
0002f6  73a0              STRB     r0,[r4,#0xe]          ;3259
0002f8  9805              LDR      r0,[sp,#0x14]         ;3259
0002fa  0400              LSLS     r0,r0,#16             ;3259
0002fc  0e01              LSRS     r1,r0,#24             ;3259
0002fe  73e1              STRB     r1,[r4,#0xf]          ;3259
000300  2001              MOVS     r0,#1                 ;3260
000302  7420              STRB     r0,[r4,#0x10]         ;3260
000304  2d03              CMP      r5,#3                 ;3261
000306  d101              BNE      |L21.780|
000308  2000              MOVS     r0,#0                 ;3261
00030a  e001              B        |L21.784|
                  |L21.780|
00030c  2001              MOVS     r0,#1                 ;3261
00030e  0240              LSLS     r0,r0,#9              ;3261
                  |L21.784|
000310  900c              STR      r0,[sp,#0x30]         ;3261
000312  980c              LDR      r0,[sp,#0x30]         ;3262
000314  7460              STRB     r0,[r4,#0x11]         ;3262
000316  980c              LDR      r0,[sp,#0x30]         ;3262
000318  0400              LSLS     r0,r0,#16             ;3262
00031a  0e01              LSRS     r1,r0,#24             ;3262
00031c  74a1              STRB     r1,[r4,#0x12]         ;3262
00031e  2101              MOVS     r1,#1                 ;3263
000320  0409              LSLS     r1,r1,#16             ;3263
000322  9806              LDR      r0,[sp,#0x18]         ;3263
000324  4288              CMP      r0,r1                 ;3263
000326  d206              BCS      |L21.822|
000328  9806              LDR      r0,[sp,#0x18]         ;3264
00032a  74e0              STRB     r0,[r4,#0x13]         ;3264
00032c  9806              LDR      r0,[sp,#0x18]         ;3264
00032e  0400              LSLS     r0,r0,#16             ;3264
000330  0e01              LSRS     r1,r0,#24             ;3264
000332  7521              STRB     r1,[r4,#0x14]         ;3264
000334  e011              B        |L21.858|
                  |L21.822|
000336  9806              LDR      r0,[sp,#0x18]         ;3266
000338  b2c1              UXTB     r1,r0                 ;3266
00033a  2020              MOVS     r0,#0x20              ;3266
00033c  5501              STRB     r1,[r0,r4]            ;3266
00033e  9806              LDR      r0,[sp,#0x18]         ;3266
000340  0400              LSLS     r0,r0,#16             ;3266
000342  0e01              LSRS     r1,r0,#24             ;3266
000344  2021              MOVS     r0,#0x21              ;3266
000346  5501              STRB     r1,[r0,r4]            ;3266
000348  9806              LDR      r0,[sp,#0x18]         ;3266
00034a  0200              LSLS     r0,r0,#8              ;3266
00034c  0e01              LSRS     r1,r0,#24             ;3266
00034e  2022              MOVS     r0,#0x22              ;3266
000350  5501              STRB     r1,[r0,r4]            ;3266
000352  9806              LDR      r0,[sp,#0x18]         ;3266
000354  0e01              LSRS     r1,r0,#24             ;3266
000356  2023              MOVS     r0,#0x23              ;3266
000358  5501              STRB     r1,[r0,r4]            ;3266
                  |L21.858|
00035a  980f              LDR      r0,[sp,#0x3c]         ;3268
00035c  7560              STRB     r0,[r4,#0x15]         ;3268
00035e  203f              MOVS     r0,#0x3f              ;3269
000360  7620              STRB     r0,[r4,#0x18]         ;3269
000362  2100              MOVS     r1,#0                 ;3269
000364  7661              STRB     r1,[r4,#0x19]         ;3269
000366  20ff              MOVS     r0,#0xff              ;3270
000368  76a0              STRB     r0,[r4,#0x1a]         ;3270
00036a  76e1              STRB     r1,[r4,#0x1b]         ;3270
00036c  980a              LDR      r0,[sp,#0x28]         ;3271
00036e  7720              STRB     r0,[r4,#0x1c]         ;3271
000370  980a              LDR      r0,[sp,#0x28]         ;3271
000372  0400              LSLS     r0,r0,#16             ;3271
000374  0e01              LSRS     r1,r0,#24             ;3271
000376  7761              STRB     r1,[r4,#0x1d]         ;3271
000378  980a              LDR      r0,[sp,#0x28]         ;3271
00037a  0200              LSLS     r0,r0,#8              ;3271
00037c  0e01              LSRS     r1,r0,#24             ;3271
00037e  77a1              STRB     r1,[r4,#0x1e]         ;3271
000380  980a              LDR      r0,[sp,#0x28]         ;3271
000382  0e01              LSRS     r1,r0,#24             ;3271
000384  77e1              STRB     r1,[r4,#0x1f]         ;3271
000386  f7fffffe          BL       get_fattime
00038a  900d              STR      r0,[sp,#0x34]         ;3272
00038c  2d03              CMP      r5,#3                 ;3273
00038e  d158              BNE      |L21.1090|
000390  980d              LDR      r0,[sp,#0x34]         ;3274
000392  b2c1              UXTB     r1,r0                 ;3274
000394  2043              MOVS     r0,#0x43              ;3274
000396  5501              STRB     r1,[r0,r4]            ;3274
000398  980d              LDR      r0,[sp,#0x34]         ;3274
00039a  0400              LSLS     r0,r0,#16             ;3274
00039c  0e01              LSRS     r1,r0,#24             ;3274
00039e  2044              MOVS     r0,#0x44              ;3274
0003a0  5501              STRB     r1,[r0,r4]            ;3274
0003a2  980d              LDR      r0,[sp,#0x34]         ;3274
0003a4  0200              LSLS     r0,r0,#8              ;3274
0003a6  0e01              LSRS     r1,r0,#24             ;3274
0003a8  2045              MOVS     r0,#0x45              ;3274
0003aa  5501              STRB     r1,[r0,r4]            ;3274
0003ac  980d              LDR      r0,[sp,#0x34]         ;3274
0003ae  0e01              LSRS     r1,r0,#24             ;3274
0003b0  2046              MOVS     r0,#0x46              ;3274
0003b2  5501              STRB     r1,[r0,r4]            ;3274
0003b4  2024              MOVS     r0,#0x24              ;3275
0003b6  5506              STRB     r6,[r0,r4]            ;3275
0003b8  0430              LSLS     r0,r6,#16             ;3275
0003ba  0e01              LSRS     r1,r0,#24             ;3275
0003bc  2025              MOVS     r0,#0x25              ;3275
0003be  5501              STRB     r1,[r0,r4]            ;3275
0003c0  0230              LSLS     r0,r6,#8              ;3275
0003c2  0e01              LSRS     r1,r0,#24             ;3275
0003c4  2026              MOVS     r0,#0x26              ;3275
0003c6  5501              STRB     r1,[r0,r4]            ;3275
0003c8  0e31              LSRS     r1,r6,#24             ;3275
0003ca  2027              MOVS     r0,#0x27              ;3275
0003cc  5501              STRB     r1,[r0,r4]            ;3275
0003ce  2102              MOVS     r1,#2                 ;3276
0003d0  202c              MOVS     r0,#0x2c              ;3276
0003d2  5501              STRB     r1,[r0,r4]            ;3276
0003d4  2100              MOVS     r1,#0                 ;3276
0003d6  202d              MOVS     r0,#0x2d              ;3276
0003d8  5501              STRB     r1,[r0,r4]            ;3276
0003da  202e              MOVS     r0,#0x2e              ;3276
0003dc  5501              STRB     r1,[r0,r4]            ;3276
0003de  202f              MOVS     r0,#0x2f              ;3276
0003e0  5501              STRB     r1,[r0,r4]            ;3276
0003e2  2101              MOVS     r1,#1                 ;3277
0003e4  2030              MOVS     r0,#0x30              ;3277
0003e6  5501              STRB     r1,[r0,r4]            ;3277
0003e8  2100              MOVS     r1,#0                 ;3277
0003ea  2031              MOVS     r0,#0x31              ;3277
0003ec  5501              STRB     r1,[r0,r4]            ;3277
0003ee  2106              MOVS     r1,#6                 ;3278
0003f0  2032              MOVS     r0,#0x32              ;3278
0003f2  5501              STRB     r1,[r0,r4]            ;3278
0003f4  2100              MOVS     r1,#0                 ;3278
0003f6  2033              MOVS     r0,#0x33              ;3278
0003f8  5501              STRB     r1,[r0,r4]            ;3278
0003fa  2180              MOVS     r1,#0x80              ;3279
0003fc  2040              MOVS     r0,#0x40              ;3279
0003fe  5501              STRB     r1,[r0,r4]            ;3279
000400  2129              MOVS     r1,#0x29              ;3280
000402  2042              MOVS     r0,#0x42              ;3280
000404  5501              STRB     r1,[r0,r4]            ;3280
000406  2213              MOVS     r2,#0x13              ;3281
000408  a107              ADR      r1,|L21.1064|
00040a  4620              MOV      r0,r4                 ;3281
00040c  3047              ADDS     r0,r0,#0x47           ;3281
00040e  e015              B        |L21.1084|
                  |L21.1040|
                          DCD      FatFs
                  |L21.1044|
                          DCD      vst
                  |L21.1048|
                          DCD      ||cst||
                  |L21.1052|
                          DCD      0x00000ff6
                  |L21.1056|
                          DCD      0x0000fff6
                  |L21.1060|
                          DCD      0x00fb0400
                  |L21.1064|
000428  4e4f204e          DCB      "NO NAME    FAT32   ",0
00042c  414d4520
000430  20202046
000434  41543332
000438  20202000
                  |L21.1084|
00043c  f7fffffe          BL       mem_cpy
000440  e021              B        |L21.1158|
                  |L21.1090|
000442  980d              LDR      r0,[sp,#0x34]         ;3283
000444  b2c1              UXTB     r1,r0                 ;3283
000446  2027              MOVS     r0,#0x27              ;3283
000448  5501              STRB     r1,[r0,r4]            ;3283
00044a  980d              LDR      r0,[sp,#0x34]         ;3283
00044c  0400              LSLS     r0,r0,#16             ;3283
00044e  0e01              LSRS     r1,r0,#24             ;3283
000450  2028              MOVS     r0,#0x28              ;3283
000452  5501              STRB     r1,[r0,r4]            ;3283
000454  980d              LDR      r0,[sp,#0x34]         ;3283
000456  0200              LSLS     r0,r0,#8              ;3283
000458  0e01              LSRS     r1,r0,#24             ;3283
00045a  2029              MOVS     r0,#0x29              ;3283
00045c  5501              STRB     r1,[r0,r4]            ;3283
00045e  980d              LDR      r0,[sp,#0x34]         ;3283
000460  0e01              LSRS     r1,r0,#24             ;3283
000462  202a              MOVS     r0,#0x2a              ;3283
000464  5501              STRB     r1,[r0,r4]            ;3283
000466  75a6              STRB     r6,[r4,#0x16]         ;3284
000468  0430              LSLS     r0,r6,#16             ;3284
00046a  0e01              LSRS     r1,r0,#24             ;3284
00046c  75e1              STRB     r1,[r4,#0x17]         ;3284
00046e  2180              MOVS     r1,#0x80              ;3285
000470  2024              MOVS     r0,#0x24              ;3285
000472  5501              STRB     r1,[r0,r4]            ;3285
000474  2129              MOVS     r1,#0x29              ;3286
000476  2026              MOVS     r0,#0x26              ;3286
000478  5501              STRB     r1,[r0,r4]            ;3286
00047a  2213              MOVS     r2,#0x13              ;3287
00047c  a17e              ADR      r1,|L21.1656|
00047e  4620              MOV      r0,r4                 ;3287
000480  302b              ADDS     r0,r0,#0x2b           ;3287
000482  f7fffffe          BL       mem_cpy
                  |L21.1158|
000486  2155              MOVS     r1,#0x55              ;3289
000488  20ff              MOVS     r0,#0xff              ;3289
00048a  30ff              ADDS     r0,r0,#0xff           ;3289
00048c  5501              STRB     r1,[r0,r4]            ;3289
00048e  21aa              MOVS     r1,#0xaa              ;3289
000490  1c40              ADDS     r0,r0,#1              ;3289
000492  5501              STRB     r1,[r0,r4]            ;3289
000494  2301              MOVS     r3,#1                 ;3290
000496  4621              MOV      r1,r4                 ;3290
000498  9a0a              LDR      r2,[sp,#0x28]         ;3290
00049a  9810              LDR      r0,[sp,#0x40]         ;3290
00049c  f7fffffe          BL       disk_write
0004a0  2800              CMP      r0,#0                 ;3290
0004a2  d001              BEQ      |L21.1192|
0004a4  2001              MOVS     r0,#1                 ;3291
0004a6  e5b1              B        |L21.12|
                  |L21.1192|
0004a8  2d03              CMP      r5,#3                 ;3292
0004aa  d106              BNE      |L21.1210|
0004ac  2301              MOVS     r3,#1                 ;3293
0004ae  9a0a              LDR      r2,[sp,#0x28]         ;3293
0004b0  1d92              ADDS     r2,r2,#6              ;3293
0004b2  4621              MOV      r1,r4                 ;3293
0004b4  9810              LDR      r0,[sp,#0x40]         ;3293
0004b6  f7fffffe          BL       disk_write
                  |L21.1210|
0004ba  2000              MOVS     r0,#0                 ;3296
0004bc  900b              STR      r0,[sp,#0x2c]         ;3296
0004be  e06a              B        |L21.1430|
                  |L21.1216|
0004c0  2201              MOVS     r2,#1                 ;3297
0004c2  0252              LSLS     r2,r2,#9              ;3297
0004c4  2100              MOVS     r1,#0                 ;3297
0004c6  4620              MOV      r0,r4                 ;3297
0004c8  f7fffffe          BL       mem_set
0004cc  980f              LDR      r0,[sp,#0x3c]         ;3298
0004ce  900d              STR      r0,[sp,#0x34]         ;3298
0004d0  2d03              CMP      r5,#3                 ;3299
0004d2  d016              BEQ      |L21.1282|
0004d4  2d01              CMP      r5,#1                 ;3300
0004d6  d101              BNE      |L21.1244|
0004d8  486c              LDR      r0,|L21.1676|
0004da  e001              B        |L21.1248|
                  |L21.1244|
0004dc  20ff              MOVS     r0,#0xff              ;3300
0004de  43c0              MVNS     r0,r0                 ;3300
                  |L21.1248|
0004e0  990d              LDR      r1,[sp,#0x34]         ;3300
0004e2  4308              ORRS     r0,r0,r1              ;3300
0004e4  900d              STR      r0,[sp,#0x34]         ;3300
0004e6  980d              LDR      r0,[sp,#0x34]         ;3301
0004e8  7020              STRB     r0,[r4,#0]            ;3301
0004ea  980d              LDR      r0,[sp,#0x34]         ;3301
0004ec  0400              LSLS     r0,r0,#16             ;3301
0004ee  0e00              LSRS     r0,r0,#24             ;3301
0004f0  7060              STRB     r0,[r4,#1]            ;3301
0004f2  980d              LDR      r0,[sp,#0x34]         ;3301
0004f4  0200              LSLS     r0,r0,#8              ;3301
0004f6  0e00              LSRS     r0,r0,#24             ;3301
0004f8  70a0              STRB     r0,[r4,#2]            ;3301
0004fa  980d              LDR      r0,[sp,#0x34]         ;3301
0004fc  0e00              LSRS     r0,r0,#24             ;3301
0004fe  70e0              STRB     r0,[r4,#3]            ;3301
000500  e01d              B        |L21.1342|
                  |L21.1282|
000502  4963              LDR      r1,|L21.1680|
000504  980d              LDR      r0,[sp,#0x34]         ;3303
000506  4308              ORRS     r0,r0,r1              ;3303
000508  900d              STR      r0,[sp,#0x34]         ;3303
00050a  980d              LDR      r0,[sp,#0x34]         ;3304
00050c  7020              STRB     r0,[r4,#0]            ;3304
00050e  980d              LDR      r0,[sp,#0x34]         ;3304
000510  0400              LSLS     r0,r0,#16             ;3304
000512  0e00              LSRS     r0,r0,#24             ;3304
000514  7060              STRB     r0,[r4,#1]            ;3304
000516  980d              LDR      r0,[sp,#0x34]         ;3304
000518  0200              LSLS     r0,r0,#8              ;3304
00051a  0e00              LSRS     r0,r0,#24             ;3304
00051c  70a0              STRB     r0,[r4,#2]            ;3304
00051e  980d              LDR      r0,[sp,#0x34]         ;3304
000520  0e00              LSRS     r0,r0,#24             ;3304
000522  70e0              STRB     r0,[r4,#3]            ;3304
000524  20ff              MOVS     r0,#0xff              ;3305
000526  7120              STRB     r0,[r4,#4]            ;3305
000528  21ff              MOVS     r1,#0xff              ;3305
00052a  7161              STRB     r1,[r4,#5]            ;3305
00052c  71a1              STRB     r1,[r4,#6]            ;3305
00052e  210f              MOVS     r1,#0xf               ;3305
000530  71e1              STRB     r1,[r4,#7]            ;3305
000532  7220              STRB     r0,[r4,#8]            ;3306
000534  21ff              MOVS     r1,#0xff              ;3306
000536  7261              STRB     r1,[r4,#9]            ;3306
000538  72a1              STRB     r1,[r4,#0xa]          ;3306
00053a  210f              MOVS     r1,#0xf               ;3306
00053c  72e1              STRB     r1,[r4,#0xb]          ;3306
                  |L21.1342|
00053e  9809              LDR      r0,[sp,#0x24]         ;3308
000540  1c41              ADDS     r1,r0,#1              ;3308
000542  4602              MOV      r2,r0                 ;3308
000544  2301              MOVS     r3,#1                 ;3308
000546  9109              STR      r1,[sp,#0x24]         ;3308
000548  4621              MOV      r1,r4                 ;3308
00054a  9810              LDR      r0,[sp,#0x40]         ;3308
00054c  f7fffffe          BL       disk_write
000550  2800              CMP      r0,#0                 ;3308
000552  d001              BEQ      |L21.1368|
000554  2001              MOVS     r0,#1                 ;3309
000556  e559              B        |L21.12|
                  |L21.1368|
000558  2201              MOVS     r2,#1                 ;3310
00055a  0252              LSLS     r2,r2,#9              ;3310
00055c  2100              MOVS     r1,#0                 ;3310
00055e  4620              MOV      r0,r4                 ;3310
000560  f7fffffe          BL       mem_set
000564  2001              MOVS     r0,#1                 ;3311
000566  900d              STR      r0,[sp,#0x34]         ;3311
000568  e00f              B        |L21.1418|
                  |L21.1386|
00056a  9809              LDR      r0,[sp,#0x24]         ;3312
00056c  1c41              ADDS     r1,r0,#1              ;3312
00056e  4602              MOV      r2,r0                 ;3312
000570  2301              MOVS     r3,#1                 ;3312
000572  9109              STR      r1,[sp,#0x24]         ;3312
000574  4621              MOV      r1,r4                 ;3312
000576  9810              LDR      r0,[sp,#0x40]         ;3312
000578  f7fffffe          BL       disk_write
00057c  2800              CMP      r0,#0                 ;3312
00057e  d001              BEQ      |L21.1412|
000580  2001              MOVS     r0,#1                 ;3313
000582  e543              B        |L21.12|
                  |L21.1412|
000584  980d              LDR      r0,[sp,#0x34]         ;3311
000586  1c40              ADDS     r0,r0,#1              ;3311
000588  900d              STR      r0,[sp,#0x34]         ;3311
                  |L21.1418|
00058a  980d              LDR      r0,[sp,#0x34]         ;3311
00058c  42b0              CMP      r0,r6                 ;3311
00058e  d3ec              BCC      |L21.1386|
000590  980b              LDR      r0,[sp,#0x2c]         ;3296
000592  1c40              ADDS     r0,r0,#1              ;3296
000594  900b              STR      r0,[sp,#0x2c]         ;3296
                  |L21.1430|
000596  980b              LDR      r0,[sp,#0x2c]         ;3296
000598  2800              CMP      r0,#0                 ;3296
00059a  d091              BEQ      |L21.1216|
00059c  2d03              CMP      r5,#3                 ;3318
00059e  d101              BNE      |L21.1444|
0005a0  980c              LDR      r0,[sp,#0x30]         ;3318
0005a2  e000              B        |L21.1446|
                  |L21.1444|
0005a4  9804              LDR      r0,[sp,#0x10]         ;3318
                  |L21.1446|
0005a6  900d              STR      r0,[sp,#0x34]         ;3318
0005a8  e00c              B        |L21.1476|
                  |L21.1450|
0005aa  9809              LDR      r0,[sp,#0x24]         ;3320
0005ac  1c41              ADDS     r1,r0,#1              ;3320
0005ae  4602              MOV      r2,r0                 ;3320
0005b0  2301              MOVS     r3,#1                 ;3320
0005b2  9109              STR      r1,[sp,#0x24]         ;3320
0005b4  4621              MOV      r1,r4                 ;3320
0005b6  9810              LDR      r0,[sp,#0x40]         ;3320
0005b8  f7fffffe          BL       disk_write
0005bc  2800              CMP      r0,#0                 ;3320
0005be  d001              BEQ      |L21.1476|
0005c0  2001              MOVS     r0,#1                 ;3321
0005c2  e523              B        |L21.12|
                  |L21.1476|
0005c4  990d              LDR      r1,[sp,#0x34]         ;3319
0005c6  1e48              SUBS     r0,r1,#1              ;3319
0005c8  900d              STR      r0,[sp,#0x34]         ;3319
0005ca  2900              CMP      r1,#0                 ;3319
0005cc  d1ed              BNE      |L21.1450|
0005ce  2d03              CMP      r5,#3                 ;3325
0005d0  d146              BNE      |L21.1632|
0005d2  2155              MOVS     r1,#0x55              ;3326
0005d4  20ff              MOVS     r0,#0xff              ;3326
0005d6  30ff              ADDS     r0,r0,#0xff           ;3326
0005d8  5501              STRB     r1,[r0,r4]            ;3326
0005da  21aa              MOVS     r1,#0xaa              ;3326
0005dc  1c40              ADDS     r0,r0,#1              ;3326
0005de  5501              STRB     r1,[r0,r4]            ;3326
0005e0  2052              MOVS     r0,#0x52              ;3327
0005e2  7020              STRB     r0,[r4,#0]            ;3327
0005e4  7060              STRB     r0,[r4,#1]            ;3327
0005e6  2061              MOVS     r0,#0x61              ;3327
0005e8  70a0              STRB     r0,[r4,#2]            ;3327
0005ea  2041              MOVS     r0,#0x41              ;3327
0005ec  70e0              STRB     r0,[r4,#3]            ;3327
0005ee  2172              MOVS     r1,#0x72              ;3328
0005f0  20ff              MOVS     r0,#0xff              ;3328
0005f2  30e5              ADDS     r0,r0,#0xe5           ;3328
0005f4  5501              STRB     r1,[r0,r4]            ;3328
0005f6  1c40              ADDS     r0,r0,#1              ;3328
0005f8  5501              STRB     r1,[r0,r4]            ;3328
0005fa  2141              MOVS     r1,#0x41              ;3328
0005fc  1c40              ADDS     r0,r0,#1              ;3328
0005fe  5501              STRB     r1,[r0,r4]            ;3328
000600  2161              MOVS     r1,#0x61              ;3328
000602  1c40              ADDS     r0,r0,#1              ;3328
000604  5501              STRB     r1,[r0,r4]            ;3328
000606  1e78              SUBS     r0,r7,#1              ;3329
000608  b2c1              UXTB     r1,r0                 ;3329
00060a  20ff              MOVS     r0,#0xff              ;3329
00060c  30e9              ADDS     r0,r0,#0xe9           ;3329
00060e  5501              STRB     r1,[r0,r4]            ;3329
000610  1e78              SUBS     r0,r7,#1              ;3329
000612  0400              LSLS     r0,r0,#16             ;3329
000614  0e01              LSRS     r1,r0,#24             ;3329
000616  20ff              MOVS     r0,#0xff              ;3329
000618  30ea              ADDS     r0,r0,#0xea           ;3329
00061a  5501              STRB     r1,[r0,r4]            ;3329
00061c  1e78              SUBS     r0,r7,#1              ;3329
00061e  0200              LSLS     r0,r0,#8              ;3329
000620  0e01              LSRS     r1,r0,#24             ;3329
000622  20ff              MOVS     r0,#0xff              ;3329
000624  30eb              ADDS     r0,r0,#0xeb           ;3329
000626  5501              STRB     r1,[r0,r4]            ;3329
000628  1e78              SUBS     r0,r7,#1              ;3329
00062a  0e01              LSRS     r1,r0,#24             ;3329
00062c  20ff              MOVS     r0,#0xff              ;3329
00062e  30ec              ADDS     r0,r0,#0xec           ;3329
000630  5501              STRB     r1,[r0,r4]            ;3329
000632  21ff              MOVS     r1,#0xff              ;3330
000634  1c40              ADDS     r0,r0,#1              ;3330
000636  5501              STRB     r1,[r0,r4]            ;3330
000638  1c40              ADDS     r0,r0,#1              ;3330
00063a  5501              STRB     r1,[r0,r4]            ;3330
00063c  1c40              ADDS     r0,r0,#1              ;3330
00063e  5501              STRB     r1,[r0,r4]            ;3330
000640  1c40              ADDS     r0,r0,#1              ;3330
000642  5501              STRB     r1,[r0,r4]            ;3330
000644  2301              MOVS     r3,#1                 ;3331
000646  9a0a              LDR      r2,[sp,#0x28]         ;3331
000648  1c52              ADDS     r2,r2,#1              ;3331
00064a  4621              MOV      r1,r4                 ;3331
00064c  9810              LDR      r0,[sp,#0x40]         ;3331
00064e  f7fffffe          BL       disk_write
000652  2301              MOVS     r3,#1                 ;3332
000654  9a0a              LDR      r2,[sp,#0x28]         ;3332
000656  1dd2              ADDS     r2,r2,#7              ;3332
000658  4621              MOV      r1,r4                 ;3332
00065a  9810              LDR      r0,[sp,#0x40]         ;3332
00065c  f7fffffe          BL       disk_write
                  |L21.1632|
000660  2200              MOVS     r2,#0                 ;3335
000662  4611              MOV      r1,r2                 ;3335
000664  9810              LDR      r0,[sp,#0x40]         ;3335
000666  f7fffffe          BL       disk_ioctl
00066a  2800              CMP      r0,#0                 ;3335
00066c  d001              BEQ      |L21.1650|
00066e  2001              MOVS     r0,#1                 ;3335
000670  e4cc              B        |L21.12|
                  |L21.1650|
000672  2000              MOVS     r0,#0                 ;3335
000674  e4ca              B        |L21.12|
;;;3337   
                          ENDP

000676  0000              DCW      0x0000
                  |L21.1656|
000678  4e4f204e          DCB      "NO NAME    FAT     ",0
00067c  414d4520
000680  20202046
000684  41542020
000688  20202000
                  |L21.1676|
                          DCD      0x00ffff00
                  |L21.1680|
                          DCD      0x0fffff00

                          AREA ||i.f_mount||, CODE, READONLY, ALIGN=2

                  f_mount PROC
;;;1850   
;;;1851   FRESULT f_mount (
000000  b510              PUSH     {r4,lr}
;;;1852   	BYTE vol,		/* Logical drive number to be mounted/unmounted */
;;;1853   	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
;;;1854   )
;;;1855   {
000002  4602              MOV      r2,r0
;;;1856   	FATFS *rfs;
;;;1857   
;;;1858   
;;;1859   	if (vol >= _DRIVES)				/* Check if the drive number is valid */
000004  2a01              CMP      r2,#1
000006  db01              BLT      |L22.12|
;;;1860   		return FR_INVALID_DRIVE;
000008  200b              MOVS     r0,#0xb
                  |L22.10|
;;;1861   	rfs = FatFs[vol];				/* Get current fs object */
;;;1862   
;;;1863   	if (rfs) {
;;;1864   #if _FS_REENTRANT					/* Discard sync object of the current volume */
;;;1865   		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
;;;1866   #endif
;;;1867   		rfs->fs_type = 0;			/* Clear old fs object */
;;;1868   	}
;;;1869   
;;;1870   	if (fs) {
;;;1871   		fs->fs_type = 0;			/* Clear new fs object */
;;;1872   #if _FS_REENTRANT					/* Create sync object for the new volume */
;;;1873   		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
;;;1874   #endif
;;;1875   	}
;;;1876   	FatFs[vol] = fs;				/* Register new fs object */
;;;1877   
;;;1878   	return FR_OK;
;;;1879   }
00000a  bd10              POP      {r4,pc}
                  |L22.12|
00000c  0090              LSLS     r0,r2,#2              ;1861
00000e  4c07              LDR      r4,|L22.44|
000010  5823              LDR      r3,[r4,r0]            ;1861
000012  2b00              CMP      r3,#0                 ;1863
000014  d001              BEQ      |L22.26|
000016  2000              MOVS     r0,#0                 ;1867
000018  7018              STRB     r0,[r3,#0]            ;1867
                  |L22.26|
00001a  2900              CMP      r1,#0                 ;1870
00001c  d001              BEQ      |L22.34|
00001e  2000              MOVS     r0,#0                 ;1871
000020  7008              STRB     r0,[r1,#0]            ;1871
                  |L22.34|
000022  0090              LSLS     r0,r2,#2              ;1876
000024  4c01              LDR      r4,|L22.44|
000026  5021              STR      r1,[r4,r0]            ;1876
000028  2000              MOVS     r0,#0                 ;1878
00002a  e7ee              B        |L22.10|
;;;1880   
                          ENDP

                  |L22.44|
                          DCD      FatFs

                          AREA ||i.f_open||, CODE, READONLY, ALIGN=1

                  f_open PROC
;;;1887   
;;;1888   FRESULT f_open (
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;1889   	FIL *fp,			/* Pointer to the blank file object */
;;;1890   	const TCHAR *path,	/* Pointer to the file name */
;;;1891   	BYTE mode			/* Access mode and file open mode flags */
;;;1892   )
;;;1893   {
000002  b08c              SUB      sp,sp,#0x30
000004  4605              MOV      r5,r0
000006  4616              MOV      r6,r2
;;;1894   	FRESULT res;
;;;1895   	DIR dj;
;;;1896   	BYTE *dir;
;;;1897   	DEF_NAMEBUF;
;;;1898   
;;;1899   
;;;1900   	fp->fs = 0;			/* Clear file object */
000008  2000              MOVS     r0,#0
00000a  6028              STR      r0,[r5,#0]
;;;1901   
;;;1902   #if !_FS_READONLY
;;;1903   	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
00000c  06f6              LSLS     r6,r6,#27
00000e  0ef6              LSRS     r6,r6,#27
;;;1904   	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
000010  0872              LSRS     r2,r6,#1
000012  0052              LSLS     r2,r2,#1
000014  a905              ADD      r1,sp,#0x14
000016  a80d              ADD      r0,sp,#0x34
000018  f7fffffe          BL       chk_mounted
00001c  4607              MOV      r7,r0
;;;1905   #else
;;;1906   	mode &= FA_READ;
;;;1907   	res = chk_mounted(&path, &dj.fs, 0);
;;;1908   #endif
;;;1909   	INIT_BUF(dj);
00001e  a802              ADD      r0,sp,#8
000020  900b              STR      r0,[sp,#0x2c]
;;;1910   	if (res == FR_OK)
000022  2f00              CMP      r7,#0
000024  d104              BNE      |L23.48|
;;;1911   		res = follow_path(&dj, path);	/* Follow the file path */
000026  a805              ADD      r0,sp,#0x14
000028  990d              LDR      r1,[sp,#0x34]
00002a  f7fffffe          BL       follow_path
00002e  4607              MOV      r7,r0
                  |L23.48|
;;;1912   	dir = dj.dir;
000030  9c0a              LDR      r4,[sp,#0x28]
;;;1913   
;;;1914   #if !_FS_READONLY	/* R/W configuration */
;;;1915   	if (res == FR_OK) {
000032  2f00              CMP      r7,#0
000034  d102              BNE      |L23.60|
;;;1916   		if (!dir)	/* Current dir itself */
000036  2c00              CMP      r4,#0
000038  d100              BNE      |L23.60|
;;;1917   			res = FR_INVALID_NAME;
00003a  2706              MOVS     r7,#6
                  |L23.60|
;;;1918   #if _FS_SHARE
;;;1919   		else
;;;1920   			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;1921   #endif
;;;1922   	}
;;;1923   	/* Create or Open a file */
;;;1924   	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
00003c  201c              MOVS     r0,#0x1c
00003e  4030              ANDS     r0,r0,r6
000040  2800              CMP      r0,#0
000042  d05f              BEQ      |L23.260|
;;;1925   		DWORD dw, cl;
;;;1926   
;;;1927   		if (res != FR_OK) {				/* No file, create new */
000044  2f00              CMP      r7,#0
000046  d009              BEQ      |L23.92|
;;;1928   			if (res == FR_NO_FILE)		/* There is no file to open, create a new entry */
000048  2f04              CMP      r7,#4
00004a  d103              BNE      |L23.84|
;;;1929   #if _FS_SHARE
;;;1930   				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
;;;1931   #else
;;;1932   				res = dir_register(&dj);
00004c  a805              ADD      r0,sp,#0x14
00004e  f7fffffe          BL       dir_register
000052  4607              MOV      r7,r0
                  |L23.84|
;;;1933   #endif
;;;1934   			mode |= FA_CREATE_ALWAYS;
000054  2008              MOVS     r0,#8
000056  4306              ORRS     r6,r6,r0
;;;1935   			dir = dj.dir;				/* New entry */
000058  9c0a              LDR      r4,[sp,#0x28]
00005a  e00b              B        |L23.116|
                  |L23.92|
;;;1936   		}
;;;1937   		else {							/* Any object is already existing */
;;;1938   			if (mode & FA_CREATE_NEW) {			/* Cannot create new */
00005c  2004              MOVS     r0,#4
00005e  4030              ANDS     r0,r0,r6
000060  2800              CMP      r0,#0
000062  d001              BEQ      |L23.104|
;;;1939   				res = FR_EXIST;
000064  2708              MOVS     r7,#8
000066  e005              B        |L23.116|
                  |L23.104|
;;;1940   			} else {
;;;1941   				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
000068  7ae0              LDRB     r0,[r4,#0xb]
00006a  2111              MOVS     r1,#0x11
00006c  4008              ANDS     r0,r0,r1
00006e  2800              CMP      r0,#0
000070  d000              BEQ      |L23.116|
;;;1942   					res = FR_DENIED;
000072  2707              MOVS     r7,#7
                  |L23.116|
;;;1943   			}
;;;1944   		}
;;;1945   		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
000074  2f00              CMP      r7,#0
000076  d144              BNE      |L23.258|
000078  2008              MOVS     r0,#8
00007a  4030              ANDS     r0,r0,r6
00007c  2800              CMP      r0,#0
00007e  d040              BEQ      |L23.258|
;;;1946   			dw = get_fattime();						/* Created time */
000080  f7fffffe          BL       get_fattime
000084  9001              STR      r0,[sp,#4]
;;;1947   			ST_DWORD(dir+DIR_CrtTime, dw);
000086  9801              LDR      r0,[sp,#4]
000088  73a0              STRB     r0,[r4,#0xe]
00008a  9801              LDR      r0,[sp,#4]
00008c  0400              LSLS     r0,r0,#16
00008e  0e01              LSRS     r1,r0,#24
000090  73e1              STRB     r1,[r4,#0xf]
000092  9801              LDR      r0,[sp,#4]
000094  0200              LSLS     r0,r0,#8
000096  0e01              LSRS     r1,r0,#24
000098  7421              STRB     r1,[r4,#0x10]
00009a  9801              LDR      r0,[sp,#4]
00009c  0e01              LSRS     r1,r0,#24
00009e  7461              STRB     r1,[r4,#0x11]
;;;1948   			dir[DIR_Attr] = 0;					/* Reset attribute */
0000a0  2000              MOVS     r0,#0
0000a2  72e0              STRB     r0,[r4,#0xb]
;;;1949   			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
0000a4  7720              STRB     r0,[r4,#0x1c]
0000a6  2100              MOVS     r1,#0
0000a8  7761              STRB     r1,[r4,#0x1d]
0000aa  77a1              STRB     r1,[r4,#0x1e]
0000ac  77e1              STRB     r1,[r4,#0x1f]
;;;1950   			cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
0000ae  7d60              LDRB     r0,[r4,#0x15]
0000b0  0200              LSLS     r0,r0,#8
0000b2  7d21              LDRB     r1,[r4,#0x14]
0000b4  4308              ORRS     r0,r0,r1
0000b6  0400              LSLS     r0,r0,#16
0000b8  7ee1              LDRB     r1,[r4,#0x1b]
0000ba  0209              LSLS     r1,r1,#8
0000bc  7ea2              LDRB     r2,[r4,#0x1a]
0000be  4311              ORRS     r1,r1,r2
0000c0  4308              ORRS     r0,r0,r1
0000c2  9000              STR      r0,[sp,#0]
;;;1951   			ST_WORD(dir+DIR_FstClusHI, 0);		/* cluster = 0 */
0000c4  2000              MOVS     r0,#0
0000c6  7520              STRB     r0,[r4,#0x14]
0000c8  2100              MOVS     r1,#0
0000ca  7561              STRB     r1,[r4,#0x15]
;;;1952   			ST_WORD(dir+DIR_FstClusLO, 0);
0000cc  76a0              STRB     r0,[r4,#0x1a]
0000ce  76e1              STRB     r1,[r4,#0x1b]
;;;1953   			dj.fs->wflag = 1;
0000d0  2001              MOVS     r0,#1
0000d2  9905              LDR      r1,[sp,#0x14]
0000d4  7108              STRB     r0,[r1,#4]
;;;1954   			if (cl) {							/* Remove the cluster chain if exist */
0000d6  9800              LDR      r0,[sp,#0]
0000d8  2800              CMP      r0,#0
0000da  d012              BEQ      |L23.258|
;;;1955   				dw = dj.fs->winsect;
0000dc  9805              LDR      r0,[sp,#0x14]
0000de  6b00              LDR      r0,[r0,#0x30]
0000e0  9001              STR      r0,[sp,#4]
;;;1956   				res = remove_chain(dj.fs, cl);
0000e2  9900              LDR      r1,[sp,#0]
0000e4  9805              LDR      r0,[sp,#0x14]
0000e6  f7fffffe          BL       remove_chain
0000ea  4607              MOV      r7,r0
;;;1957   				if (res == FR_OK) {
0000ec  2f00              CMP      r7,#0
0000ee  d108              BNE      |L23.258|
;;;1958   					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
0000f0  9800              LDR      r0,[sp,#0]
0000f2  1e40              SUBS     r0,r0,#1
0000f4  9905              LDR      r1,[sp,#0x14]
0000f6  60c8              STR      r0,[r1,#0xc]
;;;1959   					res = move_window(dj.fs, dw);
0000f8  9901              LDR      r1,[sp,#4]
0000fa  9805              LDR      r0,[sp,#0x14]
0000fc  f7fffffe          BL       move_window
000100  4607              MOV      r7,r0
                  |L23.258|
;;;1960   				}
;;;1961   			}
;;;1962   		}
;;;1963   	}
000102  e012              B        |L23.298|
                  |L23.260|
;;;1964   	else {	/* Open an existing file */
;;;1965   		if (res == FR_OK) {						/* Follow succeeded */
000104  2f00              CMP      r7,#0
000106  d110              BNE      |L23.298|
;;;1966   			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
000108  7ae0              LDRB     r0,[r4,#0xb]
00010a  2110              MOVS     r1,#0x10
00010c  4008              ANDS     r0,r0,r1
00010e  2800              CMP      r0,#0
000110  d001              BEQ      |L23.278|
;;;1967   				res = FR_NO_FILE;
000112  2704              MOVS     r7,#4
000114  e009              B        |L23.298|
                  |L23.278|
;;;1968   			} else {
;;;1969   				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
000116  2002              MOVS     r0,#2
000118  4030              ANDS     r0,r0,r6
00011a  2800              CMP      r0,#0
00011c  d005              BEQ      |L23.298|
00011e  7ae0              LDRB     r0,[r4,#0xb]
000120  07c0              LSLS     r0,r0,#31
000122  0fc0              LSRS     r0,r0,#31
000124  2800              CMP      r0,#0
000126  d000              BEQ      |L23.298|
;;;1970   					res = FR_DENIED;
000128  2707              MOVS     r7,#7
                  |L23.298|
;;;1971   			}
;;;1972   		}
;;;1973   	}
;;;1974   	if (res == FR_OK) {
00012a  2f00              CMP      r7,#0
00012c  d109              BNE      |L23.322|
;;;1975   		if (mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW))
00012e  201e              MOVS     r0,#0x1e
000130  4030              ANDS     r0,r0,r6
000132  2800              CMP      r0,#0
000134  d001              BEQ      |L23.314|
;;;1976   			mode |= FA__WRITTEN;				/* Set file changed flag */
000136  2020              MOVS     r0,#0x20
000138  4306              ORRS     r6,r6,r0
                  |L23.314|
;;;1977   		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
00013a  9805              LDR      r0,[sp,#0x14]
00013c  6b00              LDR      r0,[r0,#0x30]
00013e  61e8              STR      r0,[r5,#0x1c]
;;;1978   		fp->dir_ptr = dir;
000140  622c              STR      r4,[r5,#0x20]
                  |L23.322|
;;;1979   #if _FS_SHARE
;;;1980   		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;1981   		if (!fp->lockid) res = FR_INT_ERR;
;;;1982   #endif
;;;1983   	}
;;;1984   
;;;1985   #else				/* R/O configuration */
;;;1986   	if (res == FR_OK) {					/* Follow succeeded */
;;;1987   		if (!dir) {						/* Current dir itself */
;;;1988   			res = FR_INVALID_NAME;
;;;1989   		} else {
;;;1990   			if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
;;;1991   				res = FR_NO_FILE;
;;;1992   		}
;;;1993   	}
;;;1994   #endif
;;;1995   	FREE_BUF();
;;;1996   
;;;1997   	if (res == FR_OK) {
000142  2f00              CMP      r7,#0
000144  d11e              BNE      |L23.388|
;;;1998   		fp->flag = mode;					/* File access mode */
000146  71ae              STRB     r6,[r5,#6]
;;;1999   		fp->org_clust =						/* File start cluster */
000148  7d60              LDRB     r0,[r4,#0x15]
00014a  0200              LSLS     r0,r0,#8
00014c  7d21              LDRB     r1,[r4,#0x14]
00014e  4308              ORRS     r0,r0,r1
000150  0400              LSLS     r0,r0,#16
000152  7ee1              LDRB     r1,[r4,#0x1b]
000154  0209              LSLS     r1,r1,#8
000156  7ea2              LDRB     r2,[r4,#0x1a]
000158  4311              ORRS     r1,r1,r2
00015a  4308              ORRS     r0,r0,r1
00015c  6128              STR      r0,[r5,#0x10]
;;;2000   			((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
;;;2001   		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
00015e  7fe0              LDRB     r0,[r4,#0x1f]
000160  0600              LSLS     r0,r0,#24
000162  7fa1              LDRB     r1,[r4,#0x1e]
000164  0409              LSLS     r1,r1,#16
000166  4308              ORRS     r0,r0,r1
000168  7f61              LDRB     r1,[r4,#0x1d]
00016a  0209              LSLS     r1,r1,#8
00016c  4308              ORRS     r0,r0,r1
00016e  7f21              LDRB     r1,[r4,#0x1c]
000170  4308              ORRS     r0,r0,r1
000172  60e8              STR      r0,[r5,#0xc]
;;;2002   		fp->fptr = 0;						/* File pointer */
000174  2000              MOVS     r0,#0
000176  60a8              STR      r0,[r5,#8]
;;;2003   		fp->dsect = 0;
000178  61a8              STR      r0,[r5,#0x18]
;;;2004   #if _USE_FASTSEEK
;;;2005   		fp->cltbl = 0;						/* No cluster link map table */
;;;2006   #endif
;;;2007   		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
00017a  9805              LDR      r0,[sp,#0x14]
00017c  6028              STR      r0,[r5,#0]
00017e  9805              LDR      r0,[sp,#0x14]
000180  88c0              LDRH     r0,[r0,#6]
000182  80a8              STRH     r0,[r5,#4]
                  |L23.388|
;;;2008   	}
;;;2009   
;;;2010   	LEAVE_FF(dj.fs, res);
000184  4638              MOV      r0,r7
;;;2011   }
000186  b00f              ADD      sp,sp,#0x3c
000188  bdf0              POP      {r4-r7,pc}
;;;2012   
                          ENDP


                          AREA ||i.f_opendir||, CODE, READONLY, ALIGN=1

                  f_opendir PROC
;;;2534   
;;;2535   FRESULT f_opendir (
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;2536   	DIR *dj,			/* Pointer to directory object to create */
;;;2537   	const TCHAR *path	/* Pointer to the directory path */
;;;2538   )
;;;2539   {
000002  b084              SUB      sp,sp,#0x10
000004  4604              MOV      r4,r0
;;;2540   	FRESULT res;
;;;2541   	BYTE *dir;
;;;2542   	DEF_NAMEBUF;
;;;2543   
;;;2544   
;;;2545   	res = chk_mounted(&path, &dj->fs, 0);
000006  2200              MOVS     r2,#0
000008  4621              MOV      r1,r4
00000a  a805              ADD      r0,sp,#0x14
00000c  f7fffffe          BL       chk_mounted
000010  4606              MOV      r6,r0
;;;2546   	if (res == FR_OK) {
000012  2e00              CMP      r6,#0
000014  d12a              BNE      |L24.108|
;;;2547   		INIT_BUF(*dj);
000016  a801              ADD      r0,sp,#4
000018  61a0              STR      r0,[r4,#0x18]
;;;2548   		res = follow_path(dj, path);			/* Follow the path to the directory */
00001a  4620              MOV      r0,r4
00001c  9905              LDR      r1,[sp,#0x14]
00001e  f7fffffe          BL       follow_path
000022  4606              MOV      r6,r0
;;;2549   		FREE_BUF();
;;;2550   		if (res == FR_OK) {						/* Follow completed */
000024  2e00              CMP      r6,#0
000026  d11e              BNE      |L24.102|
;;;2551   			dir = dj->dir;
000028  6965              LDR      r5,[r4,#0x14]
;;;2552   			if (dir) {							/* It is not the current dir */
00002a  2d00              CMP      r5,#0
00002c  d011              BEQ      |L24.82|
;;;2553   				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
00002e  7ae8              LDRB     r0,[r5,#0xb]
000030  2110              MOVS     r1,#0x10
000032  4008              ANDS     r0,r0,r1
000034  2800              CMP      r0,#0
000036  d00b              BEQ      |L24.80|
;;;2554   					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
000038  7d68              LDRB     r0,[r5,#0x15]
00003a  0200              LSLS     r0,r0,#8
00003c  7d29              LDRB     r1,[r5,#0x14]
00003e  4308              ORRS     r0,r0,r1
000040  0400              LSLS     r0,r0,#16
000042  7ee9              LDRB     r1,[r5,#0x1b]
000044  0209              LSLS     r1,r1,#8
000046  7eaa              LDRB     r2,[r5,#0x1a]
000048  4311              ORRS     r1,r1,r2
00004a  4308              ORRS     r0,r0,r1
00004c  60a0              STR      r0,[r4,#8]
00004e  e000              B        |L24.82|
                  |L24.80|
;;;2555   				} else {						/* The object is not a directory */
;;;2556   					res = FR_NO_PATH;
000050  2605              MOVS     r6,#5
                  |L24.82|
;;;2557   				}
;;;2558   			}
;;;2559   			if (res == FR_OK) {
000052  2e00              CMP      r6,#0
000054  d107              BNE      |L24.102|
;;;2560   				dj->id = dj->fs->id;
000056  6820              LDR      r0,[r4,#0]
000058  88c0              LDRH     r0,[r0,#6]
00005a  80a0              STRH     r0,[r4,#4]
;;;2561   				res = dir_sdi(dj, 0);			/* Rewind dir */
00005c  2100              MOVS     r1,#0
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       dir_sdi
000064  4606              MOV      r6,r0
                  |L24.102|
;;;2562   			}
;;;2563   		}
;;;2564   		if (res == FR_NO_FILE) res = FR_NO_PATH;
000066  2e04              CMP      r6,#4
000068  d100              BNE      |L24.108|
00006a  2605              MOVS     r6,#5
                  |L24.108|
;;;2565   	}
;;;2566   
;;;2567   	LEAVE_FF(dj->fs, res);
00006c  4630              MOV      r0,r6
;;;2568   }
00006e  b006              ADD      sp,sp,#0x18
000070  bd70              POP      {r4-r6,pc}
;;;2569   
                          ENDP


                          AREA ||i.f_printf||, CODE, READONLY, ALIGN=1

                  f_printf PROC
;;;3463   /*-----------------------------------------------------------------------*/
;;;3464   int f_printf (
000000  b40f              PUSH     {r0-r3}
;;;3465   	FIL* fil,			/* Pointer to the file object */
;;;3466   	const TCHAR* str,	/* Pointer to the format string */
;;;3467   	...					/* Optional arguments... */
;;;3468   )
;;;3469   {
000002  b5f0              PUSH     {r4-r7,lr}
000004  b08b              SUB      sp,sp,#0x2c
;;;3470   	va_list arp;
;;;3471   	BYTE f, r;
;;;3472   	UINT i, w;
;;;3473   	ULONG val;
;;;3474   	TCHAR c, d, s[16];
;;;3475   	int res, cc;
;;;3476   
;;;3477   
;;;3478   	va_start(arp, str);
000006  a812              ADD      r0,sp,#0x48
000008  900a              STR      r0,[sp,#0x28]
;;;3479   
;;;3480   	for (cc = res = 0; cc != EOF; res += cc) {
00000a  2000              MOVS     r0,#0
00000c  4606              MOV      r6,r0
00000e  9001              STR      r0,[sp,#4]
000010  e103              B        |L25.538|
                  |L25.18|
;;;3481   		c = *str++;
000012  9811              LDR      r0,[sp,#0x44]
000014  7804              LDRB     r4,[r0,#0]
000016  1c40              ADDS     r0,r0,#1
000018  9011              STR      r0,[sp,#0x44]
;;;3482   		if (c == 0) break;			/* End of string */
00001a  2c00              CMP      r4,#0
00001c  d100              BNE      |L25.32|
00001e  e100              B        |L25.546|
                  |L25.32|
;;;3483   		if (c != '%') {				/* Non escape character */
000020  2c25              CMP      r4,#0x25
000022  d009              BEQ      |L25.56|
;;;3484   			cc = f_putc(c, fil);
000024  4620              MOV      r0,r4
000026  9910              LDR      r1,[sp,#0x40]
000028  f7fffffe          BL       f_putc
00002c  4606              MOV      r6,r0
;;;3485   			if (cc != EOF) cc = 1;
00002e  1c70              ADDS     r0,r6,#1
000030  2800              CMP      r0,#0
000032  d000              BEQ      |L25.54|
000034  2601              MOVS     r6,#1
                  |L25.54|
;;;3486   			continue;
000036  e0ed              B        |L25.532|
                  |L25.56|
;;;3487   		}
;;;3488   		w = f = 0;
000038  2000              MOVS     r0,#0
00003a  9009              STR      r0,[sp,#0x24]
00003c  9007              STR      r0,[sp,#0x1c]
;;;3489   		c = *str++;
00003e  9811              LDR      r0,[sp,#0x44]
000040  7804              LDRB     r4,[r0,#0]
000042  1c40              ADDS     r0,r0,#1
000044  9011              STR      r0,[sp,#0x44]
;;;3490   		if (c == '0') {				/* Flag: '0' padding */
000046  2c30              CMP      r4,#0x30
000048  d105              BNE      |L25.86|
;;;3491   			f = 1; c = *str++;
00004a  2001              MOVS     r0,#1
00004c  9009              STR      r0,[sp,#0x24]
00004e  9811              LDR      r0,[sp,#0x44]
000050  7804              LDRB     r4,[r0,#0]
000052  1c40              ADDS     r0,r0,#1
000054  9011              STR      r0,[sp,#0x44]
                  |L25.86|
;;;3492   		}
;;;3493   		while (IsDigit(c)) {		/* Precision */
000056  e009              B        |L25.108|
                  |L25.88|
;;;3494   			w = w * 10 + c - '0';
000058  210a              MOVS     r1,#0xa
00005a  9807              LDR      r0,[sp,#0x1c]
00005c  4348              MULS     r0,r1,r0
00005e  1900              ADDS     r0,r0,r4
000060  3830              SUBS     r0,r0,#0x30
000062  9007              STR      r0,[sp,#0x1c]
;;;3495   			c = *str++;
000064  9811              LDR      r0,[sp,#0x44]
000066  7804              LDRB     r4,[r0,#0]
000068  1c40              ADDS     r0,r0,#1
00006a  9011              STR      r0,[sp,#0x44]
                  |L25.108|
00006c  2c30              CMP      r4,#0x30              ;3493
00006e  db01              BLT      |L25.116|
000070  2c39              CMP      r4,#0x39              ;3493
000072  ddf1              BLE      |L25.88|
                  |L25.116|
;;;3496   		}
;;;3497   		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
000074  2c6c              CMP      r4,#0x6c
000076  d001              BEQ      |L25.124|
000078  2c4c              CMP      r4,#0x4c
00007a  d107              BNE      |L25.140|
                  |L25.124|
;;;3498   			f |= 2; c = *str++;
00007c  2102              MOVS     r1,#2
00007e  9809              LDR      r0,[sp,#0x24]
000080  4308              ORRS     r0,r0,r1
000082  9009              STR      r0,[sp,#0x24]
000084  9811              LDR      r0,[sp,#0x44]
000086  7804              LDRB     r4,[r0,#0]
000088  1c40              ADDS     r0,r0,#1
00008a  9011              STR      r0,[sp,#0x44]
                  |L25.140|
;;;3499   		}
;;;3500   		if (!c) break;
00008c  2c00              CMP      r4,#0
00008e  d100              BNE      |L25.146|
000090  e0c7              B        |L25.546|
                  |L25.146|
;;;3501   		d = c;
000092  4625              MOV      r5,r4
;;;3502   		if (IsLower(d)) d -= 0x20;
000094  2d61              CMP      r5,#0x61
000096  db04              BLT      |L25.162|
000098  2d7a              CMP      r5,#0x7a
00009a  dc02              BGT      |L25.162|
00009c  4628              MOV      r0,r5
00009e  3820              SUBS     r0,r0,#0x20
0000a0  b2c5              UXTB     r5,r0
                  |L25.162|
;;;3503   		switch (d) {				/* Type is... */
0000a2  2d4f              CMP      r5,#0x4f
0000a4  d023              BEQ      |L25.238|
0000a6  dc06              BGT      |L25.182|
0000a8  2d42              CMP      r5,#0x42
0000aa  d01d              BEQ      |L25.232|
0000ac  2d43              CMP      r5,#0x43
0000ae  d011              BEQ      |L25.212|
0000b0  2d44              CMP      r5,#0x44
0000b2  d126              BNE      |L25.258|
0000b4  e01e              B        |L25.244|
                  |L25.182|
0000b6  2d53              CMP      r5,#0x53
0000b8  d004              BEQ      |L25.196|
0000ba  2d55              CMP      r5,#0x55
0000bc  d01b              BEQ      |L25.246|
0000be  2d58              CMP      r5,#0x58
0000c0  d11f              BNE      |L25.258|
0000c2  e01b              B        |L25.252|
                  |L25.196|
;;;3504   		case 'S' :					/* String */
;;;3505   			cc = f_puts(va_arg(arp, TCHAR*), fil); continue;
0000c4  990a              LDR      r1,[sp,#0x28]
0000c6  c901              LDM      r1!,{r0}
0000c8  910a              STR      r1,[sp,#0x28]
0000ca  9910              LDR      r1,[sp,#0x40]
0000cc  f7fffffe          BL       f_puts
0000d0  4606              MOV      r6,r0
0000d2  e09f              B        |L25.532|
                  |L25.212|
;;;3506   		case 'C' :					/* Character */
;;;3507   			cc = f_putc((TCHAR)va_arg(arp, int), fil); continue;
0000d4  990a              LDR      r1,[sp,#0x28]
0000d6  780a              LDRB     r2,[r1,#0]
0000d8  1d09              ADDS     r1,r1,#4
0000da  b2d0              UXTB     r0,r2
0000dc  910a              STR      r1,[sp,#0x28]
0000de  9910              LDR      r1,[sp,#0x40]
0000e0  f7fffffe          BL       f_putc
0000e4  4606              MOV      r6,r0
0000e6  e095              B        |L25.532|
                  |L25.232|
;;;3508   		case 'B' :					/* Binary */
;;;3509   			r = 2; break;
0000e8  2002              MOVS     r0,#2
0000ea  9008              STR      r0,[sp,#0x20]
0000ec  e00f              B        |L25.270|
                  |L25.238|
;;;3510   		case 'O' :					/* Octal */
;;;3511   			r = 8; break;
0000ee  2008              MOVS     r0,#8
0000f0  9008              STR      r0,[sp,#0x20]
0000f2  e00c              B        |L25.270|
                  |L25.244|
;;;3512   		case 'D' :					/* Signed decimal */
;;;3513   		case 'U' :					/* Unsigned decimal */
0000f4  bf00              NOP      
                  |L25.246|
;;;3514   			r = 10; break;
0000f6  200a              MOVS     r0,#0xa
0000f8  9008              STR      r0,[sp,#0x20]
0000fa  e008              B        |L25.270|
                  |L25.252|
;;;3515   		case 'X' :					/* Hexdecimal */
;;;3516   			r = 16; break;
0000fc  2010              MOVS     r0,#0x10
0000fe  9008              STR      r0,[sp,#0x20]
000100  e005              B        |L25.270|
                  |L25.258|
;;;3517   		default:					/* Unknown */
;;;3518   			cc = f_putc(c, fil); continue;
000102  4620              MOV      r0,r4
000104  9910              LDR      r1,[sp,#0x40]
000106  f7fffffe          BL       f_putc
00010a  4606              MOV      r6,r0
00010c  e082              B        |L25.532|
                  |L25.270|
00010e  bf00              NOP                            ;3509
;;;3519   		}
;;;3520   
;;;3521   		/* Get an argument */
;;;3522   		val = (f & 2) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : va_arg(arp, unsigned int));
000110  2102              MOVS     r1,#2
000112  9809              LDR      r0,[sp,#0x24]
000114  4008              ANDS     r0,r0,r1
000116  2800              CMP      r0,#0
000118  d005              BEQ      |L25.294|
00011a  980a              LDR      r0,[sp,#0x28]
00011c  6800              LDR      r0,[r0,#0]
00011e  990a              LDR      r1,[sp,#0x28]
000120  1d09              ADDS     r1,r1,#4
000122  910a              STR      r1,[sp,#0x28]
000124  e00c              B        |L25.320|
                  |L25.294|
000126  2d44              CMP      r5,#0x44
000128  d105              BNE      |L25.310|
00012a  980a              LDR      r0,[sp,#0x28]
00012c  6800              LDR      r0,[r0,#0]
00012e  990a              LDR      r1,[sp,#0x28]
000130  1d09              ADDS     r1,r1,#4
000132  910a              STR      r1,[sp,#0x28]
000134  e004              B        |L25.320|
                  |L25.310|
000136  980a              LDR      r0,[sp,#0x28]
000138  6800              LDR      r0,[r0,#0]
00013a  990a              LDR      r1,[sp,#0x28]
00013c  1d09              ADDS     r1,r1,#4
00013e  910a              STR      r1,[sp,#0x28]
                  |L25.320|
000140  9006              STR      r0,[sp,#0x18]
;;;3523   		if (d == 'D' && (val & 0x80000000)) {
000142  2d44              CMP      r5,#0x44
000144  d10b              BNE      |L25.350|
000146  9806              LDR      r0,[sp,#0x18]
000148  0fc0              LSRS     r0,r0,#31
00014a  07c0              LSLS     r0,r0,#31
00014c  2800              CMP      r0,#0
00014e  d006              BEQ      |L25.350|
;;;3524   			val = 0 - val;
000150  9806              LDR      r0,[sp,#0x18]
000152  4240              RSBS     r0,r0,#0
000154  9006              STR      r0,[sp,#0x18]
;;;3525   			f |= 4;
000156  2104              MOVS     r1,#4
000158  9809              LDR      r0,[sp,#0x24]
00015a  4308              ORRS     r0,r0,r1
00015c  9009              STR      r0,[sp,#0x24]
                  |L25.350|
;;;3526   		}
;;;3527   		/* Put it in numeral string */
;;;3528   		i = 0;
00015e  2700              MOVS     r7,#0
;;;3529   		do {
000160  bf00              NOP      
                  |L25.354|
;;;3530   			d = (TCHAR)(val % r); val /= r;
000162  9908              LDR      r1,[sp,#0x20]
000164  9806              LDR      r0,[sp,#0x18]
000166  f7fffffe          BL       __aeabi_uidivmod
00016a  b2cd              UXTB     r5,r1
00016c  9908              LDR      r1,[sp,#0x20]
00016e  9806              LDR      r0,[sp,#0x18]
000170  f7fffffe          BL       __aeabi_uidivmod
000174  9006              STR      r0,[sp,#0x18]
;;;3531   			if (d > 9) {
000176  2d09              CMP      r5,#9
000178  dd06              BLE      |L25.392|
;;;3532   				d += 7;
00017a  1de8              ADDS     r0,r5,#7
00017c  b2c5              UXTB     r5,r0
;;;3533   				if (c == 'x') d += 0x20;
00017e  2c78              CMP      r4,#0x78
000180  d102              BNE      |L25.392|
000182  4628              MOV      r0,r5
000184  3020              ADDS     r0,r0,#0x20
000186  b2c5              UXTB     r5,r0
                  |L25.392|
;;;3534   			}
;;;3535   			s[i++] = d + '0';
000188  4628              MOV      r0,r5
00018a  3030              ADDS     r0,r0,#0x30
00018c  b2c2              UXTB     r2,r0
00018e  4638              MOV      r0,r7
000190  1c7f              ADDS     r7,r7,#1
000192  a902              ADD      r1,sp,#8
000194  540a              STRB     r2,[r1,r0]
;;;3536   		} while (val && i < sizeof(s) / sizeof(s[0]));
000196  9806              LDR      r0,[sp,#0x18]
000198  2800              CMP      r0,#0
00019a  d001              BEQ      |L25.416|
00019c  2f10              CMP      r7,#0x10
00019e  d3e0              BCC      |L25.354|
                  |L25.416|
;;;3537   		if (f & 4) s[i++] = '-';
0001a0  2104              MOVS     r1,#4
0001a2  9809              LDR      r0,[sp,#0x24]
0001a4  4008              ANDS     r0,r0,r1
0001a6  2800              CMP      r0,#0
0001a8  d004              BEQ      |L25.436|
0001aa  222d              MOVS     r2,#0x2d
0001ac  4638              MOV      r0,r7
0001ae  1c7f              ADDS     r7,r7,#1
0001b0  a902              ADD      r1,sp,#8
0001b2  540a              STRB     r2,[r1,r0]
                  |L25.436|
;;;3538   		cc = 0;
0001b4  2600              MOVS     r6,#0
;;;3539   		while (i < w-- && cc != EOF) {
0001b6  e00f              B        |L25.472|
                  |L25.440|
;;;3540   			cc = f_putc((TCHAR)((f & 1) ? '0' : ' '), fil);
0001b8  9909              LDR      r1,[sp,#0x24]
0001ba  07c9              LSLS     r1,r1,#31
0001bc  0fc9              LSRS     r1,r1,#31
0001be  2900              CMP      r1,#0
0001c0  d001              BEQ      |L25.454|
0001c2  2130              MOVS     r1,#0x30
0001c4  e000              B        |L25.456|
                  |L25.454|
0001c6  2120              MOVS     r1,#0x20
                  |L25.456|
0001c8  4608              MOV      r0,r1
0001ca  9910              LDR      r1,[sp,#0x40]
0001cc  f7fffffe          BL       f_putc
0001d0  4606              MOV      r6,r0
;;;3541   			res++;
0001d2  9801              LDR      r0,[sp,#4]
0001d4  1c40              ADDS     r0,r0,#1
0001d6  9001              STR      r0,[sp,#4]
                  |L25.472|
0001d8  9807              LDR      r0,[sp,#0x1c]         ;3539
0001da  1e41              SUBS     r1,r0,#1              ;3539
0001dc  9107              STR      r1,[sp,#0x1c]         ;3539
0001de  42b8              CMP      r0,r7                 ;3539
0001e0  d902              BLS      |L25.488|
0001e2  1c70              ADDS     r0,r6,#1              ;3539
0001e4  2800              CMP      r0,#0                 ;3539
0001e6  d1e7              BNE      |L25.440|
                  |L25.488|
;;;3542   		}
;;;3543   		do {
0001e8  bf00              NOP      
                  |L25.490|
;;;3544   			cc = f_putc(s[--i], fil); 
0001ea  1e79              SUBS     r1,r7,#1
0001ec  460f              MOV      r7,r1
0001ee  aa02              ADD      r2,sp,#8
0001f0  5c50              LDRB     r0,[r2,r1]
0001f2  9910              LDR      r1,[sp,#0x40]
0001f4  f7fffffe          BL       f_putc
0001f8  4606              MOV      r6,r0
;;;3545   			res++;
0001fa  9801              LDR      r0,[sp,#4]
0001fc  1c40              ADDS     r0,r0,#1
0001fe  9001              STR      r0,[sp,#4]
;;;3546   		} while (i && cc != EOF);
000200  2f00              CMP      r7,#0
000202  d002              BEQ      |L25.522|
000204  1c70              ADDS     r0,r6,#1
000206  2800              CMP      r0,#0
000208  d1ef              BNE      |L25.490|
                  |L25.522|
;;;3547   		if (cc != EOF) cc = 0;
00020a  1c70              ADDS     r0,r6,#1
00020c  2800              CMP      r0,#0
00020e  d000              BEQ      |L25.530|
000210  2600              MOVS     r6,#0
                  |L25.530|
000212  bf00              NOP                            ;3486
                  |L25.532|
000214  9801              LDR      r0,[sp,#4]            ;3480
000216  1980              ADDS     r0,r0,r6              ;3480
000218  9001              STR      r0,[sp,#4]            ;3480
                  |L25.538|
00021a  1c70              ADDS     r0,r6,#1              ;3480
00021c  2800              CMP      r0,#0                 ;3480
00021e  d000              BEQ      |L25.546|
000220  e6f7              B        |L25.18|
                  |L25.546|
000222  bf00              NOP                            ;3482
;;;3548   	}
;;;3549   
;;;3550   	va_end(arp);
000224  2000              MOVS     r0,#0
000226  900a              STR      r0,[sp,#0x28]
;;;3551   	return (cc == EOF) ? cc : res;
000228  1c70              ADDS     r0,r6,#1
00022a  2800              CMP      r0,#0
00022c  d105              BNE      |L25.570|
00022e  4630              MOV      r0,r6
                  |L25.560|
;;;3552   }
000230  b00b              ADD      sp,sp,#0x2c
000232  bcf0              POP      {r4-r7}
000234  bc08              POP      {r3}
000236  b004              ADD      sp,sp,#0x10
000238  4718              BX       r3
                  |L25.570|
00023a  9801              LDR      r0,[sp,#4]            ;3551
00023c  e7f8              B        |L25.560|
;;;3553   
                          ENDP


                          AREA ||i.f_putc||, CODE, READONLY, ALIGN=1

                  f_putc PROC
;;;3400   /*-----------------------------------------------------------------------*/
;;;3401   int f_putc (
000000  b57c              PUSH     {r2-r6,lr}
;;;3402   	TCHAR c,	/* A character to be output */
;;;3403   	FIL* fil	/* Pointer to the file object */
;;;3404   )
;;;3405   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;3406   	UINT bw, btw;
;;;3407   	BYTE s[3];
;;;3408   
;;;3409   
;;;3410   #if _USE_STRFUNC >= 2
;;;3411   	if (c == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
;;;3412   #endif
;;;3413   
;;;3414   #if _LFN_UNICODE	/* Write the character in UTF-8 encoding */
;;;3415   	if (c < 0x80) {			/* 7-bit */
;;;3416   		s[0] = (BYTE)c;
;;;3417   		btw = 1;
;;;3418   	} else {
;;;3419   		if (c < 0x800) {	/* 11-bit */
;;;3420   			s[0] = (BYTE)(0xC0 | (c >> 6));
;;;3421   			s[1] = (BYTE)(0x80 | (c & 0x3F));
;;;3422   			btw = 2;
;;;3423   		} else {			/* 16-bit */
;;;3424   			s[0] = (BYTE)(0xE0 | (c >> 12));
;;;3425   			s[1] = (BYTE)(0x80 | ((c >> 6) & 0x3F));
;;;3426   			s[2] = (BYTE)(0x80 | (c & 0x3F));
;;;3427   			btw = 3;
;;;3428   		}
;;;3429   	}
;;;3430   #else				/* Write the character without conversion */
;;;3431   	s[0] = (BYTE)c;
000006  4668              MOV      r0,sp
000008  7004              STRB     r4,[r0,#0]
;;;3432   	btw = 1;
00000a  2601              MOVS     r6,#1
;;;3433   #endif
;;;3434   	f_write(fil, s, btw, &bw);		/* Write the char to the file */
00000c  ab01              ADD      r3,sp,#4
00000e  4632              MOV      r2,r6
000010  4669              MOV      r1,sp
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       f_write
;;;3435   	return (bw == btw) ? 1 : EOF;	/* Return the result */
000018  9801              LDR      r0,[sp,#4]
00001a  42b0              CMP      r0,r6
00001c  d100              BNE      |L26.32|
                  |L26.30|
;;;3436   }
00001e  bd7c              POP      {r2-r6,pc}
                  |L26.32|
000020  2000              MOVS     r0,#0                 ;3435
000022  43c0              MVNS     r0,r0                 ;3435
000024  e7fb              B        |L26.30|
;;;3437   
                          ENDP


                          AREA ||i.f_puts||, CODE, READONLY, ALIGN=1

                  f_puts PROC
;;;3443   /*-----------------------------------------------------------------------*/
;;;3444   int f_puts (
000000  b570              PUSH     {r4-r6,lr}
;;;3445   	const TCHAR* str,	/* Pointer to the string to be output */
;;;3446   	FIL* fil			/* Pointer to the file object */
;;;3447   )
;;;3448   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;3449   	int n;
;;;3450   
;;;3451   
;;;3452   	for (n = 0; *str; str++, n++) {
000006  2500              MOVS     r5,#0
000008  e00a              B        |L27.32|
                  |L27.10|
;;;3453   		if (f_putc(*str, fil) == EOF) return EOF;
00000a  7820              LDRB     r0,[r4,#0]
00000c  4631              MOV      r1,r6
00000e  f7fffffe          BL       f_putc
000012  1c40              ADDS     r0,r0,#1
000014  2800              CMP      r0,#0
000016  d101              BNE      |L27.28|
000018  1e40              SUBS     r0,r0,#1
                  |L27.26|
;;;3454   	}
;;;3455   	return n;
;;;3456   }
00001a  bd70              POP      {r4-r6,pc}
                  |L27.28|
00001c  1c64              ADDS     r4,r4,#1              ;3452
00001e  1c6d              ADDS     r5,r5,#1              ;3452
                  |L27.32|
000020  7820              LDRB     r0,[r4,#0]            ;3452
000022  2800              CMP      r0,#0                 ;3452
000024  d1f1              BNE      |L27.10|
000026  4628              MOV      r0,r5                 ;3455
000028  e7f7              B        |L27.26|
;;;3457   
                          ENDP


                          AREA ||i.f_read||, CODE, READONLY, ALIGN=1

                  f_read PROC
;;;2019   
;;;2020   FRESULT f_read (
000000  b5ff              PUSH     {r0-r7,lr}
;;;2021   	FIL *fp, 		/* Pointer to the file object */
;;;2022   	void *buff,		/* Pointer to data buffer */
;;;2023   	UINT btr,		/* Number of bytes to read */
;;;2024   	UINT *br		/* Pointer to number of bytes read */
;;;2025   )
;;;2026   {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  4615              MOV      r5,r2
;;;2027   	FRESULT res;
;;;2028   	DWORD clst, sect, remain;
;;;2029   	UINT rcnt, cc;
;;;2030   	BYTE csect, *rbuff = buff;
000008  9808              LDR      r0,[sp,#0x20]
00000a  9001              STR      r0,[sp,#4]
;;;2031   
;;;2032   
;;;2033   	*br = 0;	/* Initialize byte counter */
00000c  2100              MOVS     r1,#0
00000e  980a              LDR      r0,[sp,#0x28]
000010  6001              STR      r1,[r0,#0]
;;;2034   
;;;2035   	res = validate(fp->fs, fp->id);					/* Check validity of the object */
000012  88a1              LDRH     r1,[r4,#4]
000014  6820              LDR      r0,[r4,#0]
000016  f7fffffe          BL       validate
00001a  9006              STR      r0,[sp,#0x18]
;;;2036   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00001c  9806              LDR      r0,[sp,#0x18]
00001e  2800              CMP      r0,#0
000020  d002              BEQ      |L28.40|
000022  9806              LDR      r0,[sp,#0x18]
                  |L28.36|
;;;2037   	if (fp->flag & FA__ERROR)						/* Check abort flag */
;;;2038   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2039   	if (!(fp->flag & FA_READ)) 						/* Check access mode */
;;;2040   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2041   	remain = fp->fsize - fp->fptr;
;;;2042   	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
;;;2043   
;;;2044   	for ( ;  btr;									/* Repeat until all data transferred */
;;;2045   		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
;;;2046   		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
;;;2047   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2048   			if (!csect) {							/* On the cluster boundary? */
;;;2049   				clst = (fp->fptr == 0) ?			/* On the top of the file? */
;;;2050   					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
;;;2051   				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
;;;2052   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2053   				fp->curr_clust = clst;				/* Update current cluster */
;;;2054   			}
;;;2055   			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
;;;2056   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2057   			sect += csect;
;;;2058   			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
;;;2059   			if (cc) {								/* Read maximum contiguous sectors directly */
;;;2060   				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
;;;2061   					cc = fp->fs->csize - csect;
;;;2062   				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
;;;2063   					ABORT(fp->fs, FR_DISK_ERR);
;;;2064   #if !_FS_READONLY && _FS_MINIMIZE <= 2				/* Replace one of the read sectors with cached data if it contains a dirty sector */
;;;2065   #if _FS_TINY
;;;2066   				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
;;;2067   					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
;;;2068   #else
;;;2069   				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
;;;2070   					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
;;;2071   #endif
;;;2072   #endif
;;;2073   				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
;;;2074   				continue;
;;;2075   			}
;;;2076   #if !_FS_TINY
;;;2077   #if !_FS_READONLY
;;;2078   			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
;;;2079   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2080   					ABORT(fp->fs, FR_DISK_ERR);
;;;2081   				fp->flag &= ~FA__DIRTY;
;;;2082   			}
;;;2083   #endif
;;;2084   			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
;;;2085   				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
;;;2086   					ABORT(fp->fs, FR_DISK_ERR);
;;;2087   			}
;;;2088   #endif
;;;2089   			fp->dsect = sect;
;;;2090   		}
;;;2091   		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
;;;2092   		if (rcnt > btr) rcnt = btr;
;;;2093   #if _FS_TINY
;;;2094   		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
;;;2095   			ABORT(fp->fs, FR_DISK_ERR);
;;;2096   		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2097   #else
;;;2098   		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2099   #endif
;;;2100   	}
;;;2101   
;;;2102   	LEAVE_FF(fp->fs, FR_OK);
;;;2103   }
000024  b00b              ADD      sp,sp,#0x2c
000026  bdf0              POP      {r4-r7,pc}
                  |L28.40|
000028  79a0              LDRB     r0,[r4,#6]            ;2037
00002a  2180              MOVS     r1,#0x80              ;2037
00002c  4008              ANDS     r0,r0,r1              ;2037
00002e  2800              CMP      r0,#0                 ;2037
000030  d001              BEQ      |L28.54|
000032  2002              MOVS     r0,#2                 ;2038
000034  e7f6              B        |L28.36|
                  |L28.54|
000036  79a0              LDRB     r0,[r4,#6]            ;2039
000038  07c0              LSLS     r0,r0,#31             ;2039
00003a  0fc0              LSRS     r0,r0,#31             ;2039
00003c  2800              CMP      r0,#0                 ;2039
00003e  d101              BNE      |L28.68|
000040  2007              MOVS     r0,#7                 ;2040
000042  e7ef              B        |L28.36|
                  |L28.68|
000044  68a1              LDR      r1,[r4,#8]            ;2041
000046  68e0              LDR      r0,[r4,#0xc]          ;2041
000048  1a40              SUBS     r0,r0,r1              ;2041
00004a  9004              STR      r0,[sp,#0x10]         ;2041
00004c  9804              LDR      r0,[sp,#0x10]         ;2042
00004e  4285              CMP      r5,r0                 ;2042
000050  d900              BLS      |L28.84|
000052  9d04              LDR      r5,[sp,#0x10]         ;2042
                  |L28.84|
000054  e0c7              B        |L28.486|
                  |L28.86|
000056  8920              LDRH     r0,[r4,#8]            ;2046
000058  05c0              LSLS     r0,r0,#23             ;2046
00005a  0dc0              LSRS     r0,r0,#23             ;2046
00005c  2800              CMP      r0,#0                 ;2046
00005e  d172              BNE      |L28.326|
000060  68a0              LDR      r0,[r4,#8]            ;2047
000062  0a40              LSRS     r0,r0,#9              ;2047
000064  6821              LDR      r1,[r4,#0]            ;2047
000066  7889              LDRB     r1,[r1,#2]            ;2047
000068  1e49              SUBS     r1,r1,#1              ;2047
00006a  4008              ANDS     r0,r0,r1              ;2047
00006c  b2c0              UXTB     r0,r0                 ;2047
00006e  9002              STR      r0,[sp,#8]            ;2047
000070  9802              LDR      r0,[sp,#8]            ;2048
000072  2800              CMP      r0,#0                 ;2048
000074  d11e              BNE      |L28.180|
000076  68a0              LDR      r0,[r4,#8]            ;2049
000078  2800              CMP      r0,#0                 ;2049
00007a  d101              BNE      |L28.128|
00007c  6920              LDR      r0,[r4,#0x10]         ;2050
00007e  e003              B        |L28.136|
                  |L28.128|
000080  6961              LDR      r1,[r4,#0x14]         ;2050
000082  6820              LDR      r0,[r4,#0]            ;2050
000084  f7fffffe          BL       get_fat
                  |L28.136|
000088  9005              STR      r0,[sp,#0x14]         ;2050
00008a  9805              LDR      r0,[sp,#0x14]         ;2051
00008c  2801              CMP      r0,#1                 ;2051
00008e  d805              BHI      |L28.156|
000090  79a0              LDRB     r0,[r4,#6]            ;2051
000092  2180              MOVS     r1,#0x80              ;2051
000094  4308              ORRS     r0,r0,r1              ;2051
000096  71a0              STRB     r0,[r4,#6]            ;2051
000098  2002              MOVS     r0,#2                 ;2051
00009a  e7c3              B        |L28.36|
                  |L28.156|
00009c  9805              LDR      r0,[sp,#0x14]         ;2052
00009e  1c40              ADDS     r0,r0,#1              ;2052
0000a0  2800              CMP      r0,#0                 ;2052
0000a2  d105              BNE      |L28.176|
0000a4  79a0              LDRB     r0,[r4,#6]            ;2052
0000a6  2180              MOVS     r1,#0x80              ;2052
0000a8  4308              ORRS     r0,r0,r1              ;2052
0000aa  71a0              STRB     r0,[r4,#6]            ;2052
0000ac  2001              MOVS     r0,#1                 ;2052
0000ae  e7b9              B        |L28.36|
                  |L28.176|
0000b0  9805              LDR      r0,[sp,#0x14]         ;2053
0000b2  6160              STR      r0,[r4,#0x14]         ;2053
                  |L28.180|
0000b4  6961              LDR      r1,[r4,#0x14]         ;2055
0000b6  6820              LDR      r0,[r4,#0]            ;2055
0000b8  f7fffffe          BL       clust2sect
0000bc  4606              MOV      r6,r0                 ;2055
0000be  2e00              CMP      r6,#0                 ;2056
0000c0  d105              BNE      |L28.206|
0000c2  79a0              LDRB     r0,[r4,#6]            ;2056
0000c4  2180              MOVS     r1,#0x80              ;2056
0000c6  4308              ORRS     r0,r0,r1              ;2056
0000c8  71a0              STRB     r0,[r4,#6]            ;2056
0000ca  2002              MOVS     r0,#2                 ;2056
0000cc  e7aa              B        |L28.36|
                  |L28.206|
0000ce  9802              LDR      r0,[sp,#8]            ;2057
0000d0  1836              ADDS     r6,r6,r0              ;2057
0000d2  0a68              LSRS     r0,r5,#9              ;2058
0000d4  9003              STR      r0,[sp,#0xc]          ;2058
0000d6  9803              LDR      r0,[sp,#0xc]          ;2059
0000d8  2800              CMP      r0,#0                 ;2059
0000da  d035              BEQ      |L28.328|
0000dc  9903              LDR      r1,[sp,#0xc]          ;2060
0000de  9802              LDR      r0,[sp,#8]            ;2060
0000e0  1840              ADDS     r0,r0,r1              ;2060
0000e2  6821              LDR      r1,[r4,#0]            ;2060
0000e4  7889              LDRB     r1,[r1,#2]            ;2060
0000e6  4288              CMP      r0,r1                 ;2060
0000e8  d904              BLS      |L28.244|
0000ea  6820              LDR      r0,[r4,#0]            ;2061
0000ec  7881              LDRB     r1,[r0,#2]            ;2061
0000ee  9802              LDR      r0,[sp,#8]            ;2061
0000f0  1a08              SUBS     r0,r1,r0              ;2061
0000f2  9003              STR      r0,[sp,#0xc]          ;2061
                  |L28.244|
0000f4  9803              LDR      r0,[sp,#0xc]          ;2062
0000f6  b2c3              UXTB     r3,r0                 ;2062
0000f8  6820              LDR      r0,[r4,#0]            ;2062
0000fa  7840              LDRB     r0,[r0,#1]            ;2062
0000fc  4632              MOV      r2,r6                 ;2062
0000fe  9000              STR      r0,[sp,#0]            ;2062
000100  9901              LDR      r1,[sp,#4]            ;2062
000102  f7fffffe          BL       disk_read
000106  2800              CMP      r0,#0                 ;2062
000108  d005              BEQ      |L28.278|
00010a  79a0              LDRB     r0,[r4,#6]            ;2063
00010c  2180              MOVS     r1,#0x80              ;2063
00010e  4308              ORRS     r0,r0,r1              ;2063
000110  71a0              STRB     r0,[r4,#6]            ;2063
000112  2001              MOVS     r0,#1                 ;2063
000114  e786              B        |L28.36|
                  |L28.278|
000116  79a0              LDRB     r0,[r4,#6]            ;2069
000118  2140              MOVS     r1,#0x40              ;2069
00011a  4008              ANDS     r0,r0,r1              ;2069
00011c  2800              CMP      r0,#0                 ;2069
00011e  d00f              BEQ      |L28.320|
000120  69a0              LDR      r0,[r4,#0x18]         ;2069
000122  1b81              SUBS     r1,r0,r6              ;2069
000124  9803              LDR      r0,[sp,#0xc]          ;2069
000126  4281              CMP      r1,r0                 ;2069
000128  d20a              BCS      |L28.320|
00012a  69a1              LDR      r1,[r4,#0x18]         ;2070
00012c  1b89              SUBS     r1,r1,r6              ;2070
00012e  024a              LSLS     r2,r1,#9              ;2070
000130  9901              LDR      r1,[sp,#4]            ;2070
000132  1850              ADDS     r0,r2,r1              ;2070
000134  2201              MOVS     r2,#1                 ;2070
000136  0252              LSLS     r2,r2,#9              ;2070
000138  4621              MOV      r1,r4                 ;2070
00013a  3124              ADDS     r1,r1,#0x24           ;2070
00013c  f7fffffe          BL       mem_cpy
                  |L28.320|
000140  9803              LDR      r0,[sp,#0xc]          ;2073
000142  0247              LSLS     r7,r0,#9              ;2073
000144  e043              B        |L28.462|
                  |L28.326|
000146  e02e              B        |L28.422|
                  |L28.328|
000148  79a0              LDRB     r0,[r4,#6]            ;2078
00014a  2140              MOVS     r1,#0x40              ;2078
00014c  4008              ANDS     r0,r0,r1              ;2078
00014e  2800              CMP      r0,#0                 ;2078
000150  d014              BEQ      |L28.380|
000152  6820              LDR      r0,[r4,#0]            ;2079
000154  7840              LDRB     r0,[r0,#1]            ;2079
000156  69a2              LDR      r2,[r4,#0x18]         ;2079
000158  2301              MOVS     r3,#1                 ;2079
00015a  4621              MOV      r1,r4                 ;2079
00015c  3124              ADDS     r1,r1,#0x24           ;2079
00015e  9000              STR      r0,[sp,#0]            ;2079
000160  f7fffffe          BL       disk_write
000164  2800              CMP      r0,#0                 ;2079
000166  d005              BEQ      |L28.372|
000168  79a0              LDRB     r0,[r4,#6]            ;2080
00016a  2180              MOVS     r1,#0x80              ;2080
00016c  4308              ORRS     r0,r0,r1              ;2080
00016e  71a0              STRB     r0,[r4,#6]            ;2080
000170  2001              MOVS     r0,#1                 ;2080
000172  e757              B        |L28.36|
                  |L28.372|
000174  79a0              LDRB     r0,[r4,#6]            ;2081
000176  2140              MOVS     r1,#0x40              ;2081
000178  4388              BICS     r0,r0,r1              ;2081
00017a  71a0              STRB     r0,[r4,#6]            ;2081
                  |L28.380|
00017c  69a0              LDR      r0,[r4,#0x18]         ;2084
00017e  42b0              CMP      r0,r6                 ;2084
000180  d010              BEQ      |L28.420|
000182  6820              LDR      r0,[r4,#0]            ;2085
000184  7840              LDRB     r0,[r0,#1]            ;2085
000186  2301              MOVS     r3,#1                 ;2085
000188  4632              MOV      r2,r6                 ;2085
00018a  4621              MOV      r1,r4                 ;2085
00018c  3124              ADDS     r1,r1,#0x24           ;2085
00018e  9000              STR      r0,[sp,#0]            ;2085
000190  f7fffffe          BL       disk_read
000194  2800              CMP      r0,#0                 ;2085
000196  d005              BEQ      |L28.420|
000198  79a0              LDRB     r0,[r4,#6]            ;2086
00019a  2180              MOVS     r1,#0x80              ;2086
00019c  4308              ORRS     r0,r0,r1              ;2086
00019e  71a0              STRB     r0,[r4,#6]            ;2086
0001a0  2001              MOVS     r0,#1                 ;2086
0001a2  e73f              B        |L28.36|
                  |L28.420|
0001a4  61a6              STR      r6,[r4,#0x18]         ;2089
                  |L28.422|
0001a6  8920              LDRH     r0,[r4,#8]            ;2091
0001a8  05c0              LSLS     r0,r0,#23             ;2091
0001aa  0dc0              LSRS     r0,r0,#23             ;2091
0001ac  2101              MOVS     r1,#1                 ;2091
0001ae  0249              LSLS     r1,r1,#9              ;2091
0001b0  1a0f              SUBS     r7,r1,r0              ;2091
0001b2  42af              CMP      r7,r5                 ;2092
0001b4  d900              BLS      |L28.440|
0001b6  462f              MOV      r7,r5                 ;2092
                  |L28.440|
0001b8  8920              LDRH     r0,[r4,#8]            ;2098
0001ba  05c2              LSLS     r2,r0,#23             ;2098
0001bc  0dd2              LSRS     r2,r2,#23             ;2098
0001be  4620              MOV      r0,r4                 ;2098
0001c0  3024              ADDS     r0,r0,#0x24           ;2098
0001c2  1811              ADDS     r1,r2,r0              ;2098
0001c4  463a              MOV      r2,r7                 ;2098
0001c6  9801              LDR      r0,[sp,#4]            ;2098
0001c8  f7fffffe          BL       mem_cpy
0001cc  bf00              NOP                            ;2074
                  |L28.462|
0001ce  9801              LDR      r0,[sp,#4]            ;2045
0001d0  19c0              ADDS     r0,r0,r7              ;2045
0001d2  9001              STR      r0,[sp,#4]            ;2045
0001d4  68a0              LDR      r0,[r4,#8]            ;2045
0001d6  19c0              ADDS     r0,r0,r7              ;2045
0001d8  60a0              STR      r0,[r4,#8]            ;2045
0001da  980a              LDR      r0,[sp,#0x28]         ;2045
0001dc  6800              LDR      r0,[r0,#0]            ;2045
0001de  19c1              ADDS     r1,r0,r7              ;2045
0001e0  980a              LDR      r0,[sp,#0x28]         ;2045
0001e2  6001              STR      r1,[r0,#0]            ;2045
0001e4  1bed              SUBS     r5,r5,r7              ;2045
                  |L28.486|
0001e6  2d00              CMP      r5,#0                 ;2044
0001e8  d000              BEQ      |L28.492|
0001ea  e734              B        |L28.86|
                  |L28.492|
0001ec  2000              MOVS     r0,#0                 ;2102
0001ee  e719              B        |L28.36|
;;;2104   
                          ENDP


                          AREA ||i.f_readdir||, CODE, READONLY, ALIGN=1

                  f_readdir PROC
;;;2576   
;;;2577   FRESULT f_readdir (
000000  b5fe              PUSH     {r1-r7,lr}
;;;2578   	DIR *dj,			/* Pointer to the open directory object */
;;;2579   	FILINFO *fno		/* Pointer to file information to return */
;;;2580   )
;;;2581   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;2582   	FRESULT res;
;;;2583   	DEF_NAMEBUF;
;;;2584   
;;;2585   
;;;2586   	res = validate(dj->fs, dj->id);			/* Check validity of the object */
000006  88a1              LDRH     r1,[r4,#4]
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       validate
00000e  4605              MOV      r5,r0
;;;2587   	if (res == FR_OK) {
000010  2d00              CMP      r5,#0
000012  d122              BNE      |L29.90|
;;;2588   		if (!fno) {
000014  2e00              CMP      r6,#0
000016  d105              BNE      |L29.36|
;;;2589   			res = dir_sdi(dj, 0);
000018  2100              MOVS     r1,#0
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       dir_sdi
000020  4605              MOV      r5,r0
000022  e01a              B        |L29.90|
                  |L29.36|
;;;2590   		} else {
;;;2591   			INIT_BUF(*dj);
000024  4668              MOV      r0,sp
000026  61a0              STR      r0,[r4,#0x18]
;;;2592   			res = dir_read(dj);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       dir_read
00002e  4605              MOV      r5,r0
;;;2593   			if (res == FR_NO_FILE) {
000030  2d04              CMP      r5,#4
000032  d102              BNE      |L29.58|
;;;2594   				dj->sect = 0;
000034  2000              MOVS     r0,#0
000036  6120              STR      r0,[r4,#0x10]
;;;2595   				res = FR_OK;
000038  2500              MOVS     r5,#0
                  |L29.58|
;;;2596   			}
;;;2597   			if (res == FR_OK) {				/* A valid entry is found */
00003a  2d00              CMP      r5,#0
00003c  d10d              BNE      |L29.90|
;;;2598   				get_fileinfo(dj, fno);		/* Get the object information */
00003e  4631              MOV      r1,r6
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       get_fileinfo
;;;2599   				res = dir_next(dj, 0);		/* Increment index for next */
000046  2100              MOVS     r1,#0
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       dir_next
00004e  4605              MOV      r5,r0
;;;2600   				if (res == FR_NO_FILE) {
000050  2d04              CMP      r5,#4
000052  d102              BNE      |L29.90|
;;;2601   					dj->sect = 0;
000054  2000              MOVS     r0,#0
000056  6120              STR      r0,[r4,#0x10]
;;;2602   					res = FR_OK;
000058  2500              MOVS     r5,#0
                  |L29.90|
;;;2603   				}
;;;2604   			}
;;;2605   			FREE_BUF();
;;;2606   		}
;;;2607   	}
;;;2608   
;;;2609   	LEAVE_FF(dj->fs, res);
00005a  4628              MOV      r0,r5
;;;2610   }
00005c  bdfe              POP      {r1-r7,pc}
;;;2611   
                          ENDP


                          AREA ||i.f_rename||, CODE, READONLY, ALIGN=1

                  f_rename PROC
;;;2991   
;;;2992   FRESULT f_rename (
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;2993   	const TCHAR *path_old,	/* Pointer to the old name */
;;;2994   	const TCHAR *path_new	/* Pointer to the new name */
;;;2995   )
;;;2996   {
000002  b097              SUB      sp,sp,#0x5c
;;;2997   	FRESULT res;
;;;2998   	DIR djo, djn;
;;;2999   	BYTE buf[21], *dir;
;;;3000   	DWORD dw;
;;;3001   	DEF_NAMEBUF;
;;;3002   
;;;3003   
;;;3004   	res = chk_mounted(&path_old, &djo.fs, 1);
000004  2201              MOVS     r2,#1
000006  a910              ADD      r1,sp,#0x40
000008  a817              ADD      r0,sp,#0x5c
00000a  f7fffffe          BL       chk_mounted
00000e  4605              MOV      r5,r0
;;;3005   	if (res == FR_OK) {
000010  2d00              CMP      r5,#0
000012  d117              BNE      |L30.68|
;;;3006   		djn.fs = djo.fs;
000014  9810              LDR      r0,[sp,#0x40]
000016  9009              STR      r0,[sp,#0x24]
;;;3007   		INIT_BUF(djo);
000018  4668              MOV      r0,sp
00001a  9016              STR      r0,[sp,#0x58]
;;;3008   		res = follow_path(&djo, path_old);		/* Check old object */
00001c  a810              ADD      r0,sp,#0x40
00001e  9917              LDR      r1,[sp,#0x5c]
000020  f7fffffe          BL       follow_path
000024  4605              MOV      r5,r0
;;;3009   		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
000026  2d00              CMP      r5,#0
000028  d106              BNE      |L30.56|
00002a  9816              LDR      r0,[sp,#0x58]
00002c  7ac0              LDRB     r0,[r0,#0xb]
00002e  2120              MOVS     r1,#0x20
000030  4008              ANDS     r0,r0,r1
000032  2800              CMP      r0,#0
000034  d000              BEQ      |L30.56|
;;;3010   			res = FR_INVALID_NAME;
000036  2506              MOVS     r5,#6
                  |L30.56|
;;;3011   #if _FS_SHARE
;;;3012   		if (res == FR_OK) res = chk_lock(&djo, 2);
;;;3013   #endif
;;;3014   		if (res == FR_OK) {						/* Old object is found */
000038  2d00              CMP      r5,#0
00003a  d17d              BNE      |L30.312|
;;;3015   			if (!djo.dir) {						/* Is root dir? */
00003c  9815              LDR      r0,[sp,#0x54]
00003e  2800              CMP      r0,#0
000040  d101              BNE      |L30.70|
;;;3016   				res = FR_NO_FILE;
000042  2504              MOVS     r5,#4
                  |L30.68|
000044  e078              B        |L30.312|
                  |L30.70|
;;;3017   			} else {
;;;3018   				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
000046  9815              LDR      r0,[sp,#0x54]
000048  4601              MOV      r1,r0
00004a  310b              ADDS     r1,r1,#0xb
00004c  2215              MOVS     r2,#0x15
00004e  a803              ADD      r0,sp,#0xc
000050  f7fffffe          BL       mem_cpy
;;;3019   				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
000054  221c              MOVS     r2,#0x1c
000056  a910              ADD      r1,sp,#0x40
000058  a809              ADD      r0,sp,#0x24
00005a  f7fffffe          BL       mem_cpy
;;;3020   				res = follow_path(&djn, path_new);
00005e  a809              ADD      r0,sp,#0x24
000060  9918              LDR      r1,[sp,#0x60]
000062  f7fffffe          BL       follow_path
000066  4605              MOV      r5,r0
;;;3021   				if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
000068  2d00              CMP      r5,#0
00006a  d100              BNE      |L30.110|
00006c  2508              MOVS     r5,#8
                  |L30.110|
;;;3022   				if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
00006e  2d04              CMP      r5,#4
000070  d162              BNE      |L30.312|
;;;3023   /* Start critical section that any interruption or error can cause cross-link */
;;;3024   					res = dir_register(&djn);			/* Register the new entry */
000072  a809              ADD      r0,sp,#0x24
000074  f7fffffe          BL       dir_register
000078  4605              MOV      r5,r0
;;;3025   					if (res == FR_OK) {
00007a  2d00              CMP      r5,#0
00007c  d15c              BNE      |L30.312|
;;;3026   						dir = djn.dir;					/* Copy object information except for name */
00007e  9c0e              LDR      r4,[sp,#0x38]
;;;3027   						mem_cpy(dir+13, buf+2, 19);
000080  2213              MOVS     r2,#0x13
000082  a903              ADD      r1,sp,#0xc
000084  3102              ADDS     r1,#2
000086  4620              MOV      r0,r4
000088  300d              ADDS     r0,r0,#0xd
00008a  f7fffffe          BL       mem_cpy
;;;3028   						dir[DIR_Attr] = buf[0] | AM_ARC;
00008e  4668              MOV      r0,sp
000090  7b00              LDRB     r0,[r0,#0xc]
000092  2120              MOVS     r1,#0x20
000094  4308              ORRS     r0,r0,r1
000096  72e0              STRB     r0,[r4,#0xb]
;;;3029   						djo.fs->wflag = 1;
000098  2001              MOVS     r0,#1
00009a  9910              LDR      r1,[sp,#0x40]
00009c  7108              STRB     r0,[r1,#4]
;;;3030   						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
00009e  990b              LDR      r1,[sp,#0x2c]
0000a0  9812              LDR      r0,[sp,#0x48]
0000a2  4288              CMP      r0,r1
0000a4  d03c              BEQ      |L30.288|
0000a6  7ae0              LDRB     r0,[r4,#0xb]
0000a8  2110              MOVS     r1,#0x10
0000aa  4008              ANDS     r0,r0,r1
0000ac  2800              CMP      r0,#0
0000ae  d037              BEQ      |L30.288|
;;;3031   							dw = clust2sect(djn.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
0000b0  7d62              LDRB     r2,[r4,#0x15]
0000b2  0212              LSLS     r2,r2,#8
0000b4  7d23              LDRB     r3,[r4,#0x14]
0000b6  431a              ORRS     r2,r2,r3
0000b8  7ee3              LDRB     r3,[r4,#0x1b]
0000ba  021b              LSLS     r3,r3,#8
0000bc  7ea7              LDRB     r7,[r4,#0x1a]
0000be  433b              ORRS     r3,r3,r7
0000c0  431a              ORRS     r2,r2,r3
0000c2  4611              MOV      r1,r2
0000c4  9809              LDR      r0,[sp,#0x24]
0000c6  f7fffffe          BL       clust2sect
0000ca  4606              MOV      r6,r0
;;;3032   							if (!dw) {
0000cc  2e00              CMP      r6,#0
0000ce  d101              BNE      |L30.212|
;;;3033   								res = FR_INT_ERR;
0000d0  2502              MOVS     r5,#2
0000d2  e025              B        |L30.288|
                  |L30.212|
;;;3034   							} else {
;;;3035   								res = move_window(djn.fs, dw);
0000d4  4631              MOV      r1,r6
0000d6  9809              LDR      r0,[sp,#0x24]
0000d8  f7fffffe          BL       move_window
0000dc  4605              MOV      r5,r0
;;;3036   								dir = djn.fs->win+32;	/* .. entry */
0000de  9809              LDR      r0,[sp,#0x24]
0000e0  4604              MOV      r4,r0
0000e2  3454              ADDS     r4,r4,#0x54
;;;3037   								if (res == FR_OK && dir[1] == '.') {
0000e4  2d00              CMP      r5,#0
0000e6  d11b              BNE      |L30.288|
0000e8  7860              LDRB     r0,[r4,#1]
0000ea  282e              CMP      r0,#0x2e
0000ec  d118              BNE      |L30.288|
;;;3038   									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
0000ee  9809              LDR      r0,[sp,#0x24]
0000f0  7800              LDRB     r0,[r0,#0]
0000f2  2803              CMP      r0,#3
0000f4  d106              BNE      |L30.260|
0000f6  9909              LDR      r1,[sp,#0x24]
0000f8  980b              LDR      r0,[sp,#0x2c]
0000fa  6a89              LDR      r1,[r1,#0x28]
0000fc  4288              CMP      r0,r1
0000fe  d101              BNE      |L30.260|
000100  2000              MOVS     r0,#0
000102  e000              B        |L30.262|
                  |L30.260|
000104  980b              LDR      r0,[sp,#0x2c]
                  |L30.262|
000106  4606              MOV      r6,r0
;;;3039   									ST_WORD(dir+DIR_FstClusLO, dw);
000108  76a6              STRB     r6,[r4,#0x1a]
00010a  0430              LSLS     r0,r6,#16
00010c  0e01              LSRS     r1,r0,#24
00010e  76e1              STRB     r1,[r4,#0x1b]
;;;3040   									ST_WORD(dir+DIR_FstClusHI, dw >> 16);
000110  0230              LSLS     r0,r6,#8
000112  0e00              LSRS     r0,r0,#24
000114  7520              STRB     r0,[r4,#0x14]
000116  0e31              LSRS     r1,r6,#24
000118  7561              STRB     r1,[r4,#0x15]
;;;3041   									djn.fs->wflag = 1;
00011a  2001              MOVS     r0,#1
00011c  9909              LDR      r1,[sp,#0x24]
00011e  7108              STRB     r0,[r1,#4]
                  |L30.288|
;;;3042   								}
;;;3043   							}
;;;3044   						}
;;;3045   						if (res == FR_OK) {
000120  2d00              CMP      r5,#0
000122  d109              BNE      |L30.312|
;;;3046   							res = dir_remove(&djo);		/* Remove old entry */
000124  a810              ADD      r0,sp,#0x40
000126  f7fffffe          BL       dir_remove
00012a  4605              MOV      r5,r0
;;;3047   							if (res == FR_OK)
00012c  2d00              CMP      r5,#0
00012e  d103              BNE      |L30.312|
;;;3048   								res = sync(djo.fs);
000130  9810              LDR      r0,[sp,#0x40]
000132  f7fffffe          BL       sync
000136  4605              MOV      r5,r0
                  |L30.312|
;;;3049   						}
;;;3050   					}
;;;3051   /* End critical section */
;;;3052   				}
;;;3053   			}
;;;3054   		}
;;;3055   		FREE_BUF();
;;;3056   	}
;;;3057   	LEAVE_FF(djo.fs, res);
000138  4628              MOV      r0,r5
;;;3058   }
00013a  b019              ADD      sp,sp,#0x64
00013c  bdf0              POP      {r4-r7,pc}
;;;3059   
                          ENDP


                          AREA ||i.f_stat||, CODE, READONLY, ALIGN=1

                  f_stat PROC
;;;2618   
;;;2619   FRESULT f_stat (
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;2620   	const TCHAR *path,	/* Pointer to the file path */
;;;2621   	FILINFO *fno		/* Pointer to file information to return */
;;;2622   )
;;;2623   {
000002  b08b              SUB      sp,sp,#0x2c
000004  460d              MOV      r5,r1
;;;2624   	FRESULT res;
;;;2625   	DIR dj;
;;;2626   	DEF_NAMEBUF;
;;;2627   
;;;2628   
;;;2629   	res = chk_mounted(&path, &dj.fs, 0);
000006  2200              MOVS     r2,#0
000008  a904              ADD      r1,sp,#0x10
00000a  a80b              ADD      r0,sp,#0x2c
00000c  f7fffffe          BL       chk_mounted
000010  4604              MOV      r4,r0
;;;2630   	if (res == FR_OK) {
000012  2c00              CMP      r4,#0
000014  d111              BNE      |L31.58|
;;;2631   		INIT_BUF(dj);
000016  a801              ADD      r0,sp,#4
000018  900a              STR      r0,[sp,#0x28]
;;;2632   		res = follow_path(&dj, path);	/* Follow the file path */
00001a  a804              ADD      r0,sp,#0x10
00001c  990b              LDR      r1,[sp,#0x2c]
00001e  f7fffffe          BL       follow_path
000022  4604              MOV      r4,r0
;;;2633   		if (res == FR_OK) {				/* Follow completed */
000024  2c00              CMP      r4,#0
000026  d108              BNE      |L31.58|
;;;2634   			if (dj.dir)		/* Found an object */
000028  9809              LDR      r0,[sp,#0x24]
00002a  2800              CMP      r0,#0
00002c  d004              BEQ      |L31.56|
;;;2635   				get_fileinfo(&dj, fno);
00002e  4629              MOV      r1,r5
000030  a804              ADD      r0,sp,#0x10
000032  f7fffffe          BL       get_fileinfo
000036  e000              B        |L31.58|
                  |L31.56|
;;;2636   			else			/* It is root dir */
;;;2637   				res = FR_INVALID_NAME;
000038  2406              MOVS     r4,#6
                  |L31.58|
;;;2638   		}
;;;2639   		FREE_BUF();
;;;2640   	}
;;;2641   
;;;2642   	LEAVE_FF(dj.fs, res);
00003a  4620              MOV      r0,r4
;;;2643   }
00003c  b00d              ADD      sp,sp,#0x34
00003e  bd30              POP      {r4,r5,pc}
;;;2644   
                          ENDP


                          AREA ||i.f_sync||, CODE, READONLY, ALIGN=1

                  f_sync PROC
;;;2226   
;;;2227   FRESULT f_sync (
000000  b5f8              PUSH     {r3-r7,lr}
;;;2228   	FIL *fp		/* Pointer to the file object */
;;;2229   )
;;;2230   {
000002  4604              MOV      r4,r0
;;;2231   	FRESULT res;
;;;2232   	DWORD tim;
;;;2233   	BYTE *dir;
;;;2234   
;;;2235   
;;;2236   	res = validate(fp->fs, fp->id);		/* Check validity of the object */
000004  88a1              LDRH     r1,[r4,#4]
000006  6820              LDR      r0,[r4,#0]
000008  f7fffffe          BL       validate
00000c  4607              MOV      r7,r0
;;;2237   	if (res == FR_OK) {
00000e  2f00              CMP      r7,#0
000010  d156              BNE      |L32.192|
;;;2238   		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
000012  79a0              LDRB     r0,[r4,#6]
000014  2120              MOVS     r1,#0x20
000016  4008              ANDS     r0,r0,r1
000018  2800              CMP      r0,#0
00001a  d051              BEQ      |L32.192|
;;;2239   #if !_FS_TINY	/* Write-back dirty buffer */
;;;2240   			if (fp->flag & FA__DIRTY) {
00001c  79a0              LDRB     r0,[r4,#6]
00001e  2140              MOVS     r1,#0x40
000020  4008              ANDS     r0,r0,r1
000022  2800              CMP      r0,#0
000024  d00f              BEQ      |L32.70|
;;;2241   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
000026  6821              LDR      r1,[r4,#0]
000028  7848              LDRB     r0,[r1,#1]
00002a  2301              MOVS     r3,#1
00002c  4621              MOV      r1,r4
00002e  3124              ADDS     r1,r1,#0x24
000030  69a2              LDR      r2,[r4,#0x18]
000032  f7fffffe          BL       disk_write
000036  2800              CMP      r0,#0
000038  d001              BEQ      |L32.62|
;;;2242   					LEAVE_FF(fp->fs, FR_DISK_ERR);
00003a  2001              MOVS     r0,#1
                  |L32.60|
;;;2243   				fp->flag &= ~FA__DIRTY;
;;;2244   			}
;;;2245   #endif
;;;2246   			/* Update the directory entry */
;;;2247   			res = move_window(fp->fs, fp->dir_sect);
;;;2248   			if (res == FR_OK) {
;;;2249   				dir = fp->dir_ptr;
;;;2250   				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
;;;2251   				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
;;;2252   				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
;;;2253   				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
;;;2254   				tim = get_fattime();						/* Update updated time */
;;;2255   				ST_DWORD(dir+DIR_WrtTime, tim);
;;;2256   				fp->flag &= ~FA__WRITTEN;
;;;2257   				fp->fs->wflag = 1;
;;;2258   				res = sync(fp->fs);
;;;2259   			}
;;;2260   		}
;;;2261   	}
;;;2262   
;;;2263   	LEAVE_FF(fp->fs, res);
;;;2264   }
00003c  bdf8              POP      {r3-r7,pc}
                  |L32.62|
00003e  79a0              LDRB     r0,[r4,#6]            ;2243
000040  2140              MOVS     r1,#0x40              ;2243
000042  4388              BICS     r0,r0,r1              ;2243
000044  71a0              STRB     r0,[r4,#6]            ;2243
                  |L32.70|
000046  69e1              LDR      r1,[r4,#0x1c]         ;2247
000048  6820              LDR      r0,[r4,#0]            ;2247
00004a  f7fffffe          BL       move_window
00004e  4607              MOV      r7,r0                 ;2247
000050  2f00              CMP      r7,#0                 ;2248
000052  d135              BNE      |L32.192|
000054  6a25              LDR      r5,[r4,#0x20]         ;2249
000056  7ae8              LDRB     r0,[r5,#0xb]          ;2250
000058  2120              MOVS     r1,#0x20              ;2250
00005a  4308              ORRS     r0,r0,r1              ;2250
00005c  72e8              STRB     r0,[r5,#0xb]          ;2250
00005e  7b20              LDRB     r0,[r4,#0xc]          ;2251
000060  7728              STRB     r0,[r5,#0x1c]         ;2251
000062  89a0              LDRH     r0,[r4,#0xc]          ;2251
000064  0400              LSLS     r0,r0,#16             ;2251
000066  0e01              LSRS     r1,r0,#24             ;2251
000068  7769              STRB     r1,[r5,#0x1d]         ;2251
00006a  68e0              LDR      r0,[r4,#0xc]          ;2251
00006c  0200              LSLS     r0,r0,#8              ;2251
00006e  0e01              LSRS     r1,r0,#24             ;2251
000070  77a9              STRB     r1,[r5,#0x1e]         ;2251
000072  68e0              LDR      r0,[r4,#0xc]          ;2251
000074  0e01              LSRS     r1,r0,#24             ;2251
000076  77e9              STRB     r1,[r5,#0x1f]         ;2251
000078  7c20              LDRB     r0,[r4,#0x10]         ;2252
00007a  76a8              STRB     r0,[r5,#0x1a]         ;2252
00007c  8a20              LDRH     r0,[r4,#0x10]         ;2252
00007e  0400              LSLS     r0,r0,#16             ;2252
000080  0e01              LSRS     r1,r0,#24             ;2252
000082  76e9              STRB     r1,[r5,#0x1b]         ;2252
000084  6920              LDR      r0,[r4,#0x10]         ;2253
000086  0200              LSLS     r0,r0,#8              ;2253
000088  0e00              LSRS     r0,r0,#24             ;2253
00008a  7528              STRB     r0,[r5,#0x14]         ;2253
00008c  6920              LDR      r0,[r4,#0x10]         ;2253
00008e  0e01              LSRS     r1,r0,#24             ;2253
000090  7569              STRB     r1,[r5,#0x15]         ;2253
000092  f7fffffe          BL       get_fattime
000096  4606              MOV      r6,r0                 ;2254
000098  75ae              STRB     r6,[r5,#0x16]         ;2255
00009a  0430              LSLS     r0,r6,#16             ;2255
00009c  0e01              LSRS     r1,r0,#24             ;2255
00009e  75e9              STRB     r1,[r5,#0x17]         ;2255
0000a0  0230              LSLS     r0,r6,#8              ;2255
0000a2  0e01              LSRS     r1,r0,#24             ;2255
0000a4  7629              STRB     r1,[r5,#0x18]         ;2255
0000a6  0e31              LSRS     r1,r6,#24             ;2255
0000a8  7669              STRB     r1,[r5,#0x19]         ;2255
0000aa  79a0              LDRB     r0,[r4,#6]            ;2256
0000ac  2120              MOVS     r1,#0x20              ;2256
0000ae  4388              BICS     r0,r0,r1              ;2256
0000b0  71a0              STRB     r0,[r4,#6]            ;2256
0000b2  2001              MOVS     r0,#1                 ;2257
0000b4  6821              LDR      r1,[r4,#0]            ;2257
0000b6  7108              STRB     r0,[r1,#4]            ;2257
0000b8  6820              LDR      r0,[r4,#0]            ;2258
0000ba  f7fffffe          BL       sync
0000be  4607              MOV      r7,r0                 ;2258
                  |L32.192|
0000c0  4638              MOV      r0,r7                 ;2263
0000c2  e7bb              B        |L32.60|
;;;2265   
                          ENDP


                          AREA ||i.f_truncate||, CODE, READONLY, ALIGN=2

                  f_truncate PROC
;;;2716   
;;;2717   FRESULT f_truncate (
000000  b570              PUSH     {r4-r6,lr}
;;;2718   	FIL *fp		/* Pointer to the file object */
;;;2719   )
;;;2720   {
000002  4604              MOV      r4,r0
;;;2721   	FRESULT res;
;;;2722   	DWORD ncl;
;;;2723   
;;;2724   
;;;2725   	res = validate(fp->fs, fp->id);		/* Check validity of the object */
000004  88a1              LDRH     r1,[r4,#4]
000006  6820              LDR      r0,[r4,#0]
000008  f7fffffe          BL       validate
00000c  4605              MOV      r5,r0
;;;2726   	if (res == FR_OK) {
00000e  2d00              CMP      r5,#0
000010  d10c              BNE      |L33.44|
;;;2727   		if (fp->flag & FA__ERROR) {			/* Check abort flag */
000012  79a0              LDRB     r0,[r4,#6]
000014  2180              MOVS     r1,#0x80
000016  4008              ANDS     r0,r0,r1
000018  2800              CMP      r0,#0
00001a  d001              BEQ      |L33.32|
;;;2728   			res = FR_INT_ERR;
00001c  2502              MOVS     r5,#2
00001e  e005              B        |L33.44|
                  |L33.32|
;;;2729   		} else {
;;;2730   			if (!(fp->flag & FA_WRITE))		/* Check access mode */
000020  79a0              LDRB     r0,[r4,#6]
000022  2102              MOVS     r1,#2
000024  4008              ANDS     r0,r0,r1
000026  2800              CMP      r0,#0
000028  d100              BNE      |L33.44|
;;;2731   				res = FR_DENIED;
00002a  2507              MOVS     r5,#7
                  |L33.44|
;;;2732   		}
;;;2733   	}
;;;2734   	if (res == FR_OK) {
00002c  2d00              CMP      r5,#0
00002e  d13a              BNE      |L33.166|
;;;2735   		if (fp->fsize > fp->fptr) {
000030  68a1              LDR      r1,[r4,#8]
000032  68e0              LDR      r0,[r4,#0xc]
000034  4288              CMP      r0,r1
000036  d930              BLS      |L33.154|
;;;2736   			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
000038  68a0              LDR      r0,[r4,#8]
00003a  60e0              STR      r0,[r4,#0xc]
;;;2737   			fp->flag |= FA__WRITTEN;
00003c  79a0              LDRB     r0,[r4,#6]
00003e  2120              MOVS     r1,#0x20
000040  4308              ORRS     r0,r0,r1
000042  71a0              STRB     r0,[r4,#6]
;;;2738   			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
000044  68a0              LDR      r0,[r4,#8]
000046  2800              CMP      r0,#0
000048  d107              BNE      |L33.90|
;;;2739   				res = remove_chain(fp->fs, fp->org_clust);
00004a  6921              LDR      r1,[r4,#0x10]
00004c  6820              LDR      r0,[r4,#0]
00004e  f7fffffe          BL       remove_chain
000052  4605              MOV      r5,r0
;;;2740   				fp->org_clust = 0;
000054  2000              MOVS     r0,#0
000056  6120              STR      r0,[r4,#0x10]
000058  e01f              B        |L33.154|
                  |L33.90|
;;;2741   			} else {				/* When truncate a part of the file, remove remaining clusters */
;;;2742   				ncl = get_fat(fp->fs, fp->curr_clust);
00005a  6961              LDR      r1,[r4,#0x14]
00005c  6820              LDR      r0,[r4,#0]
00005e  f7fffffe          BL       get_fat
000062  4606              MOV      r6,r0
;;;2743   				res = FR_OK;
000064  2500              MOVS     r5,#0
;;;2744   				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
000066  1c70              ADDS     r0,r6,#1
000068  2800              CMP      r0,#0
00006a  d100              BNE      |L33.110|
00006c  2501              MOVS     r5,#1
                  |L33.110|
;;;2745   				if (ncl == 1) res = FR_INT_ERR;
00006e  2e01              CMP      r6,#1
000070  d100              BNE      |L33.116|
000072  2502              MOVS     r5,#2
                  |L33.116|
;;;2746   				if (res == FR_OK && ncl < fp->fs->n_fatent) {
000074  2d00              CMP      r5,#0
000076  d110              BNE      |L33.154|
000078  6820              LDR      r0,[r4,#0]
00007a  69c0              LDR      r0,[r0,#0x1c]
00007c  42b0              CMP      r0,r6
00007e  d90c              BLS      |L33.154|
;;;2747   					res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
000080  4a0a              LDR      r2,|L33.172|
000082  6961              LDR      r1,[r4,#0x14]
000084  6820              LDR      r0,[r4,#0]
000086  f7fffffe          BL       put_fat
00008a  4605              MOV      r5,r0
;;;2748   					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
00008c  2d00              CMP      r5,#0
00008e  d104              BNE      |L33.154|
000090  4631              MOV      r1,r6
000092  6820              LDR      r0,[r4,#0]
000094  f7fffffe          BL       remove_chain
000098  4605              MOV      r5,r0
                  |L33.154|
;;;2749   				}
;;;2750   			}
;;;2751   		}
;;;2752   		if (res != FR_OK) fp->flag |= FA__ERROR;
00009a  2d00              CMP      r5,#0
00009c  d003              BEQ      |L33.166|
00009e  79a0              LDRB     r0,[r4,#6]
0000a0  2180              MOVS     r1,#0x80
0000a2  4308              ORRS     r0,r0,r1
0000a4  71a0              STRB     r0,[r4,#6]
                  |L33.166|
;;;2753   	}
;;;2754   
;;;2755   	LEAVE_FF(fp->fs, res);
0000a6  4628              MOV      r0,r5
;;;2756   }
0000a8  bd70              POP      {r4-r6,pc}
;;;2757   
                          ENDP

0000aa  0000              DCW      0x0000
                  |L33.172|
                          DCD      0x0fffffff

                          AREA ||i.f_unlink||, CODE, READONLY, ALIGN=1

                  f_unlink PROC
;;;2764   
;;;2765   FRESULT f_unlink (
000000  b571              PUSH     {r0,r4-r6,lr}
;;;2766   	const TCHAR *path		/* Pointer to the file or directory path */
;;;2767   )
;;;2768   {
000002  b091              SUB      sp,sp,#0x44
;;;2769   	FRESULT res;
;;;2770   	DIR dj, sdj;
;;;2771   	BYTE *dir;
;;;2772   	DWORD dclst;
;;;2773   	DEF_NAMEBUF;
;;;2774   
;;;2775   
;;;2776   	res = chk_mounted(&path, &dj.fs, 1);
000004  2201              MOVS     r2,#1
000006  a90a              ADD      r1,sp,#0x28
000008  a811              ADD      r0,sp,#0x44
00000a  f7fffffe          BL       chk_mounted
00000e  4604              MOV      r4,r0
;;;2777   	if (res == FR_OK) {
000010  2c00              CMP      r4,#0
000012  d161              BNE      |L34.216|
;;;2778   		INIT_BUF(dj);
000014  4668              MOV      r0,sp
000016  9010              STR      r0,[sp,#0x40]
;;;2779   		res = follow_path(&dj, path);		/* Follow the file path */
000018  a80a              ADD      r0,sp,#0x28
00001a  9911              LDR      r1,[sp,#0x44]
00001c  f7fffffe          BL       follow_path
000020  4604              MOV      r4,r0
;;;2780   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
000022  2c00              CMP      r4,#0
000024  d106              BNE      |L34.52|
000026  9810              LDR      r0,[sp,#0x40]
000028  7ac0              LDRB     r0,[r0,#0xb]
00002a  2120              MOVS     r1,#0x20
00002c  4008              ANDS     r0,r0,r1
00002e  2800              CMP      r0,#0
000030  d000              BEQ      |L34.52|
;;;2781   			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
000032  2406              MOVS     r4,#6
                  |L34.52|
;;;2782   #if _FS_SHARE
;;;2783   		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
;;;2784   #endif
;;;2785   		if (res == FR_OK) {					/* The object is accessible */
000034  2c00              CMP      r4,#0
000036  d14f              BNE      |L34.216|
;;;2786   			dir = dj.dir;
000038  9d0f              LDR      r5,[sp,#0x3c]
;;;2787   			if (!dir) {
00003a  2d00              CMP      r5,#0
00003c  d101              BNE      |L34.66|
;;;2788   				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
00003e  2406              MOVS     r4,#6
000040  e005              B        |L34.78|
                  |L34.66|
;;;2789   			} else {
;;;2790   				if (dir[DIR_Attr] & AM_RDO)
000042  7ae8              LDRB     r0,[r5,#0xb]
000044  07c0              LSLS     r0,r0,#31
000046  0fc0              LSRS     r0,r0,#31
000048  2800              CMP      r0,#0
00004a  d000              BEQ      |L34.78|
;;;2791   					res = FR_DENIED;		/* Cannot remove R/O object */
00004c  2407              MOVS     r4,#7
                  |L34.78|
;;;2792   			}
;;;2793   			dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
00004e  7d68              LDRB     r0,[r5,#0x15]
000050  0200              LSLS     r0,r0,#8
000052  7d29              LDRB     r1,[r5,#0x14]
000054  4308              ORRS     r0,r0,r1
000056  0406              LSLS     r6,r0,#16
000058  7ee9              LDRB     r1,[r5,#0x1b]
00005a  0209              LSLS     r1,r1,#8
00005c  7eaa              LDRB     r2,[r5,#0x1a]
00005e  4311              ORRS     r1,r1,r2
000060  430e              ORRS     r6,r6,r1
;;;2794   			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
000062  2c00              CMP      r4,#0
000064  d123              BNE      |L34.174|
000066  7ae8              LDRB     r0,[r5,#0xb]
000068  2110              MOVS     r1,#0x10
00006a  4008              ANDS     r0,r0,r1
00006c  2800              CMP      r0,#0
00006e  d01e              BEQ      |L34.174|
;;;2795   				if (dclst < 2) {
000070  2e02              CMP      r6,#2
000072  d201              BCS      |L34.120|
;;;2796   					res = FR_INT_ERR;
000074  2402              MOVS     r4,#2
000076  e01a              B        |L34.174|
                  |L34.120|
;;;2797   				} else {
;;;2798   					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
000078  221c              MOVS     r2,#0x1c
00007a  a90a              ADD      r1,sp,#0x28
00007c  a803              ADD      r0,sp,#0xc
00007e  f7fffffe          BL       mem_cpy
;;;2799   					sdj.sclust = dclst;
000082  9605              STR      r6,[sp,#0x14]
;;;2800   					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
000084  2102              MOVS     r1,#2
000086  a803              ADD      r0,sp,#0xc
000088  f7fffffe          BL       dir_sdi
00008c  4604              MOV      r4,r0
;;;2801   					if (res == FR_OK) {
00008e  2c00              CMP      r4,#0
000090  d10d              BNE      |L34.174|
;;;2802   						res = dir_read(&sdj);
000092  a803              ADD      r0,sp,#0xc
000094  f7fffffe          BL       dir_read
000098  4604              MOV      r4,r0
;;;2803   						if (res == FR_OK			/* Not empty dir */
00009a  2c00              CMP      r4,#0
00009c  d003              BEQ      |L34.166|
;;;2804   #if _FS_RPATH
;;;2805   						|| dclst == sdj.fs->cdir	/* Current dir */
00009e  9803              LDR      r0,[sp,#0xc]
0000a0  6980              LDR      r0,[r0,#0x18]
0000a2  42b0              CMP      r0,r6
0000a4  d100              BNE      |L34.168|
                  |L34.166|
;;;2806   #endif
;;;2807   						) res = FR_DENIED;
0000a6  2407              MOVS     r4,#7
                  |L34.168|
;;;2808   						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
0000a8  2c04              CMP      r4,#4
0000aa  d100              BNE      |L34.174|
0000ac  2400              MOVS     r4,#0
                  |L34.174|
;;;2809   					}
;;;2810   				}
;;;2811   			}
;;;2812   			if (res == FR_OK) {
0000ae  2c00              CMP      r4,#0
0000b0  d112              BNE      |L34.216|
;;;2813   				res = dir_remove(&dj);		/* Remove the directory entry */
0000b2  a80a              ADD      r0,sp,#0x28
0000b4  f7fffffe          BL       dir_remove
0000b8  4604              MOV      r4,r0
;;;2814   				if (res == FR_OK) {
0000ba  2c00              CMP      r4,#0
0000bc  d10c              BNE      |L34.216|
;;;2815   					if (dclst)				/* Remove the cluster chain if exist */
0000be  2e00              CMP      r6,#0
0000c0  d004              BEQ      |L34.204|
;;;2816   						res = remove_chain(dj.fs, dclst);
0000c2  4631              MOV      r1,r6
0000c4  980a              LDR      r0,[sp,#0x28]
0000c6  f7fffffe          BL       remove_chain
0000ca  4604              MOV      r4,r0
                  |L34.204|
;;;2817   					if (res == FR_OK) res = sync(dj.fs);
0000cc  2c00              CMP      r4,#0
0000ce  d103              BNE      |L34.216|
0000d0  980a              LDR      r0,[sp,#0x28]
0000d2  f7fffffe          BL       sync
0000d6  4604              MOV      r4,r0
                  |L34.216|
;;;2818   				}
;;;2819   			}
;;;2820   		}
;;;2821   		FREE_BUF();
;;;2822   	}
;;;2823   	LEAVE_FF(dj.fs, res);
0000d8  4620              MOV      r0,r4
;;;2824   }
0000da  b012              ADD      sp,sp,#0x48
0000dc  bd70              POP      {r4-r6,pc}
;;;2825   
                          ENDP


                          AREA ||i.f_utime||, CODE, READONLY, ALIGN=1

                  f_utime PROC
;;;2950   
;;;2951   FRESULT f_utime (
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;2952   	const TCHAR *path,	/* Pointer to the file/directory name */
;;;2953   	const FILINFO *fno	/* Pointer to the time stamp to be set */
;;;2954   )
;;;2955   {
000002  b08a              SUB      sp,sp,#0x28
000004  460d              MOV      r5,r1
;;;2956   	FRESULT res;
;;;2957   	DIR dj;
;;;2958   	BYTE *dir;
;;;2959   	DEF_NAMEBUF;
;;;2960   
;;;2961   
;;;2962   	res = chk_mounted(&path, &dj.fs, 1);
000006  2201              MOVS     r2,#1
000008  a903              ADD      r1,sp,#0xc
00000a  a80a              ADD      r0,sp,#0x28
00000c  f7fffffe          BL       chk_mounted
000010  4606              MOV      r6,r0
;;;2963   	if (res == FR_OK) {
000012  2e00              CMP      r6,#0
000014  d127              BNE      |L35.102|
;;;2964   		INIT_BUF(dj);
000016  4668              MOV      r0,sp
000018  9009              STR      r0,[sp,#0x24]
;;;2965   		res = follow_path(&dj, path);	/* Follow the file path */
00001a  a803              ADD      r0,sp,#0xc
00001c  990a              LDR      r1,[sp,#0x28]
00001e  f7fffffe          BL       follow_path
000022  4606              MOV      r6,r0
;;;2966   		FREE_BUF();
;;;2967   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
000024  2e00              CMP      r6,#0
000026  d106              BNE      |L35.54|
000028  9809              LDR      r0,[sp,#0x24]
00002a  7ac0              LDRB     r0,[r0,#0xb]
00002c  2120              MOVS     r1,#0x20
00002e  4008              ANDS     r0,r0,r1
000030  2800              CMP      r0,#0
000032  d000              BEQ      |L35.54|
;;;2968   			res = FR_INVALID_NAME;
000034  2606              MOVS     r6,#6
                  |L35.54|
;;;2969   		if (res == FR_OK) {
000036  2e00              CMP      r6,#0
000038  d115              BNE      |L35.102|
;;;2970   			dir = dj.dir;
00003a  9c08              LDR      r4,[sp,#0x20]
;;;2971   			if (!dir) {					/* Root directory */
00003c  2c00              CMP      r4,#0
00003e  d101              BNE      |L35.68|
;;;2972   				res = FR_INVALID_NAME;
000040  2606              MOVS     r6,#6
000042  e010              B        |L35.102|
                  |L35.68|
;;;2973   			} else {					/* File or sub-directory */
;;;2974   				ST_WORD(dir+DIR_WrtTime, fno->ftime);
000044  79a8              LDRB     r0,[r5,#6]
000046  75a0              STRB     r0,[r4,#0x16]
000048  88e8              LDRH     r0,[r5,#6]
00004a  1201              ASRS     r1,r0,#8
00004c  75e1              STRB     r1,[r4,#0x17]
;;;2975   				ST_WORD(dir+DIR_WrtDate, fno->fdate);
00004e  7928              LDRB     r0,[r5,#4]
000050  7620              STRB     r0,[r4,#0x18]
000052  88a8              LDRH     r0,[r5,#4]
000054  1201              ASRS     r1,r0,#8
000056  7661              STRB     r1,[r4,#0x19]
;;;2976   				dj.fs->wflag = 1;
000058  2001              MOVS     r0,#1
00005a  9903              LDR      r1,[sp,#0xc]
00005c  7108              STRB     r0,[r1,#4]
;;;2977   				res = sync(dj.fs);
00005e  9803              LDR      r0,[sp,#0xc]
000060  f7fffffe          BL       sync
000064  4606              MOV      r6,r0
                  |L35.102|
;;;2978   			}
;;;2979   		}
;;;2980   	}
;;;2981   
;;;2982   	LEAVE_FF(dj.fs, res);
000066  4630              MOV      r0,r6
;;;2983   }
000068  b00c              ADD      sp,sp,#0x30
00006a  bd70              POP      {r4-r6,pc}
;;;2984   
                          ENDP


                          AREA ||i.f_write||, CODE, READONLY, ALIGN=1

                  f_write PROC
;;;2112   
;;;2113   FRESULT f_write (
000000  b5ff              PUSH     {r0-r7,lr}
;;;2114   	FIL *fp,			/* Pointer to the file object */
;;;2115   	const void *buff,	/* Pointer to the data to be written */
;;;2116   	UINT btw,			/* Number of bytes to write */
;;;2117   	UINT *bw			/* Pointer to number of bytes written */
;;;2118   )
;;;2119   {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  4615              MOV      r5,r2
;;;2120   	FRESULT res;
;;;2121   	DWORD clst, sect;
;;;2122   	UINT wcnt, cc;
;;;2123   	const BYTE *wbuff = buff;
000008  9808              LDR      r0,[sp,#0x20]
00000a  9003              STR      r0,[sp,#0xc]
;;;2124   	BYTE csect;
;;;2125   
;;;2126   
;;;2127   	*bw = 0;	/* Initialize byte counter */
00000c  2100              MOVS     r1,#0
00000e  980a              LDR      r0,[sp,#0x28]
000010  6001              STR      r1,[r0,#0]
;;;2128   
;;;2129   	res = validate(fp->fs, fp->id);					/* Check validity of the object */
000012  88a1              LDRH     r1,[r4,#4]
000014  6820              LDR      r0,[r4,#0]
000016  f7fffffe          BL       validate
00001a  9006              STR      r0,[sp,#0x18]
;;;2130   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00001c  9806              LDR      r0,[sp,#0x18]
00001e  2800              CMP      r0,#0
000020  d002              BEQ      |L36.40|
000022  9806              LDR      r0,[sp,#0x18]
                  |L36.36|
;;;2131   	if (fp->flag & FA__ERROR)						/* Check abort flag */
;;;2132   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2133   	if (!(fp->flag & FA_WRITE))						/* Check access mode */
;;;2134   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2135   	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
;;;2136   
;;;2137   	for ( ;  btw;									/* Repeat until all data transferred */
;;;2138   		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
;;;2139   		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
;;;2140   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2141   			if (!csect) {							/* On the cluster boundary? */
;;;2142   				if (fp->fptr == 0) {				/* On the top of the file? */
;;;2143   					clst = fp->org_clust;			/* Follow from the origin */
;;;2144   					if (clst == 0)					/* When there is no cluster chain, */
;;;2145   						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
;;;2146   				} else {							/* Middle or end of the file */
;;;2147   					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or stretch cluster chain */
;;;2148   				}
;;;2149   				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
;;;2150   				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2151   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2152   				fp->curr_clust = clst;				/* Update current cluster */
;;;2153   			}
;;;2154   #if _FS_TINY
;;;2155   			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
;;;2156   				ABORT(fp->fs, FR_DISK_ERR);
;;;2157   #else
;;;2158   			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
;;;2159   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2160   					ABORT(fp->fs, FR_DISK_ERR);
;;;2161   				fp->flag &= ~FA__DIRTY;
;;;2162   			}
;;;2163   #endif
;;;2164   			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
;;;2165   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2166   			sect += csect;
;;;2167   			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
;;;2168   			if (cc) {								/* Write maximum contiguous sectors directly */
;;;2169   				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
;;;2170   					cc = fp->fs->csize - csect;
;;;2171   				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
;;;2172   					ABORT(fp->fs, FR_DISK_ERR);
;;;2173   #if _FS_TINY
;;;2174   				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
;;;2175   					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2176   					fp->fs->wflag = 0;
;;;2177   				}
;;;2178   #else
;;;2179   				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
;;;2180   					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2181   					fp->flag &= ~FA__DIRTY;
;;;2182   				}
;;;2183   #endif
;;;2184   				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
;;;2185   				continue;
;;;2186   			}
;;;2187   #if _FS_TINY
;;;2188   			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
;;;2189   				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
;;;2190   				fp->fs->winsect = sect;
;;;2191   			}
;;;2192   #else
;;;2193   			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
;;;2194   				if (fp->fptr < fp->fsize &&
;;;2195   					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
;;;2196   						ABORT(fp->fs, FR_DISK_ERR);
;;;2197   			}
;;;2198   #endif
;;;2199   			fp->dsect = sect;
;;;2200   		}
;;;2201   		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
;;;2202   		if (wcnt > btw) wcnt = btw;
;;;2203   #if _FS_TINY
;;;2204   		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
;;;2205   			ABORT(fp->fs, FR_DISK_ERR);
;;;2206   		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2207   		fp->fs->wflag = 1;
;;;2208   #else
;;;2209   		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2210   		fp->flag |= FA__DIRTY;
;;;2211   #endif
;;;2212   	}
;;;2213   
;;;2214   	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
;;;2215   	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
;;;2216   
;;;2217   	LEAVE_FF(fp->fs, FR_OK);
;;;2218   }
000024  b00b              ADD      sp,sp,#0x2c
000026  bdf0              POP      {r4-r7,pc}
                  |L36.40|
000028  79a0              LDRB     r0,[r4,#6]            ;2131
00002a  2180              MOVS     r1,#0x80              ;2131
00002c  4008              ANDS     r0,r0,r1              ;2131
00002e  2800              CMP      r0,#0                 ;2131
000030  d001              BEQ      |L36.54|
000032  2002              MOVS     r0,#2                 ;2132
000034  e7f6              B        |L36.36|
                  |L36.54|
000036  79a0              LDRB     r0,[r4,#6]            ;2133
000038  2102              MOVS     r1,#2                 ;2133
00003a  4008              ANDS     r0,r0,r1              ;2133
00003c  2800              CMP      r0,#0                 ;2133
00003e  d101              BNE      |L36.68|
000040  2007              MOVS     r0,#7                 ;2134
000042  e7ef              B        |L36.36|
                  |L36.68|
000044  68e0              LDR      r0,[r4,#0xc]          ;2135
000046  1940              ADDS     r0,r0,r5              ;2135
000048  68e1              LDR      r1,[r4,#0xc]          ;2135
00004a  4288              CMP      r0,r1                 ;2135
00004c  d200              BCS      |L36.80|
00004e  2500              MOVS     r5,#0                 ;2135
                  |L36.80|
000050  e0dd              B        |L36.526|
                  |L36.82|
000052  8920              LDRH     r0,[r4,#8]            ;2139
000054  05c0              LSLS     r0,r0,#23             ;2139
000056  0dc0              LSRS     r0,r0,#23             ;2139
000058  2800              CMP      r0,#0                 ;2139
00005a  d17d              BNE      |L36.344|
00005c  68a0              LDR      r0,[r4,#8]            ;2140
00005e  0a40              LSRS     r0,r0,#9              ;2140
000060  6821              LDR      r1,[r4,#0]            ;2140
000062  7889              LDRB     r1,[r1,#2]            ;2140
000064  1e49              SUBS     r1,r1,#1              ;2140
000066  4008              ANDS     r0,r0,r1              ;2140
000068  b2c0              UXTB     r0,r0                 ;2140
00006a  9002              STR      r0,[sp,#8]            ;2140
00006c  9802              LDR      r0,[sp,#8]            ;2141
00006e  2800              CMP      r0,#0                 ;2141
000070  d12c              BNE      |L36.204|
000072  68a0              LDR      r0,[r4,#8]            ;2142
000074  2800              CMP      r0,#0                 ;2142
000076  d10b              BNE      |L36.144|
000078  6920              LDR      r0,[r4,#0x10]         ;2143
00007a  9005              STR      r0,[sp,#0x14]         ;2143
00007c  9805              LDR      r0,[sp,#0x14]         ;2144
00007e  2800              CMP      r0,#0                 ;2144
000080  d10b              BNE      |L36.154|
000082  2100              MOVS     r1,#0                 ;2145
000084  6820              LDR      r0,[r4,#0]            ;2145
000086  f7fffffe          BL       create_chain
00008a  9005              STR      r0,[sp,#0x14]         ;2145
00008c  6120              STR      r0,[r4,#0x10]         ;2145
00008e  e004              B        |L36.154|
                  |L36.144|
000090  6961              LDR      r1,[r4,#0x14]         ;2147
000092  6820              LDR      r0,[r4,#0]            ;2147
000094  f7fffffe          BL       create_chain
000098  9005              STR      r0,[sp,#0x14]         ;2147
                  |L36.154|
00009a  9805              LDR      r0,[sp,#0x14]         ;2149
00009c  2800              CMP      r0,#0                 ;2149
00009e  d100              BNE      |L36.162|
0000a0  e0b8              B        |L36.532|
                  |L36.162|
0000a2  9805              LDR      r0,[sp,#0x14]         ;2150
0000a4  2801              CMP      r0,#1                 ;2150
0000a6  d105              BNE      |L36.180|
0000a8  79a0              LDRB     r0,[r4,#6]            ;2150
0000aa  2180              MOVS     r1,#0x80              ;2150
0000ac  4308              ORRS     r0,r0,r1              ;2150
0000ae  71a0              STRB     r0,[r4,#6]            ;2150
0000b0  2002              MOVS     r0,#2                 ;2150
0000b2  e7b7              B        |L36.36|
                  |L36.180|
0000b4  9805              LDR      r0,[sp,#0x14]         ;2151
0000b6  1c40              ADDS     r0,r0,#1              ;2151
0000b8  2800              CMP      r0,#0                 ;2151
0000ba  d105              BNE      |L36.200|
0000bc  79a0              LDRB     r0,[r4,#6]            ;2151
0000be  2180              MOVS     r1,#0x80              ;2151
0000c0  4308              ORRS     r0,r0,r1              ;2151
0000c2  71a0              STRB     r0,[r4,#6]            ;2151
0000c4  2001              MOVS     r0,#1                 ;2151
0000c6  e7ad              B        |L36.36|
                  |L36.200|
0000c8  9805              LDR      r0,[sp,#0x14]         ;2152
0000ca  6160              STR      r0,[r4,#0x14]         ;2152
                  |L36.204|
0000cc  79a0              LDRB     r0,[r4,#6]            ;2158
0000ce  2140              MOVS     r1,#0x40              ;2158
0000d0  4008              ANDS     r0,r0,r1              ;2158
0000d2  2800              CMP      r0,#0                 ;2158
0000d4  d014              BEQ      |L36.256|
0000d6  6820              LDR      r0,[r4,#0]            ;2159
0000d8  7840              LDRB     r0,[r0,#1]            ;2159
0000da  69a2              LDR      r2,[r4,#0x18]         ;2159
0000dc  2301              MOVS     r3,#1                 ;2159
0000de  4621              MOV      r1,r4                 ;2159
0000e0  3124              ADDS     r1,r1,#0x24           ;2159
0000e2  9001              STR      r0,[sp,#4]            ;2159
0000e4  f7fffffe          BL       disk_write
0000e8  2800              CMP      r0,#0                 ;2159
0000ea  d005              BEQ      |L36.248|
0000ec  79a0              LDRB     r0,[r4,#6]            ;2160
0000ee  2180              MOVS     r1,#0x80              ;2160
0000f0  4308              ORRS     r0,r0,r1              ;2160
0000f2  71a0              STRB     r0,[r4,#6]            ;2160
0000f4  2001              MOVS     r0,#1                 ;2160
0000f6  e795              B        |L36.36|
                  |L36.248|
0000f8  79a0              LDRB     r0,[r4,#6]            ;2161
0000fa  2140              MOVS     r1,#0x40              ;2161
0000fc  4388              BICS     r0,r0,r1              ;2161
0000fe  71a0              STRB     r0,[r4,#6]            ;2161
                  |L36.256|
000100  6961              LDR      r1,[r4,#0x14]         ;2164
000102  6820              LDR      r0,[r4,#0]            ;2164
000104  f7fffffe          BL       clust2sect
000108  4606              MOV      r6,r0                 ;2164
00010a  2e00              CMP      r6,#0                 ;2165
00010c  d105              BNE      |L36.282|
00010e  79a0              LDRB     r0,[r4,#6]            ;2165
000110  2180              MOVS     r1,#0x80              ;2165
000112  4308              ORRS     r0,r0,r1              ;2165
000114  71a0              STRB     r0,[r4,#6]            ;2165
000116  2002              MOVS     r0,#2                 ;2165
000118  e784              B        |L36.36|
                  |L36.282|
00011a  9802              LDR      r0,[sp,#8]            ;2166
00011c  1836              ADDS     r6,r6,r0              ;2166
00011e  0a68              LSRS     r0,r5,#9              ;2167
000120  9004              STR      r0,[sp,#0x10]         ;2167
000122  9804              LDR      r0,[sp,#0x10]         ;2168
000124  2800              CMP      r0,#0                 ;2168
000126  d035              BEQ      |L36.404|
000128  9904              LDR      r1,[sp,#0x10]         ;2169
00012a  9802              LDR      r0,[sp,#8]            ;2169
00012c  1840              ADDS     r0,r0,r1              ;2169
00012e  6821              LDR      r1,[r4,#0]            ;2169
000130  7889              LDRB     r1,[r1,#2]            ;2169
000132  4288              CMP      r0,r1                 ;2169
000134  d904              BLS      |L36.320|
000136  6820              LDR      r0,[r4,#0]            ;2170
000138  7881              LDRB     r1,[r0,#2]            ;2170
00013a  9802              LDR      r0,[sp,#8]            ;2170
00013c  1a08              SUBS     r0,r1,r0              ;2170
00013e  9004              STR      r0,[sp,#0x10]         ;2170
                  |L36.320|
000140  9804              LDR      r0,[sp,#0x10]         ;2171
000142  b2c3              UXTB     r3,r0                 ;2171
000144  6820              LDR      r0,[r4,#0]            ;2171
000146  7840              LDRB     r0,[r0,#1]            ;2171
000148  4632              MOV      r2,r6                 ;2171
00014a  9001              STR      r0,[sp,#4]            ;2171
00014c  9903              LDR      r1,[sp,#0xc]          ;2171
00014e  f7fffffe          BL       disk_write
000152  2800              CMP      r0,#0                 ;2171
000154  d007              BEQ      |L36.358|
000156  e000              B        |L36.346|
                  |L36.344|
000158  e035              B        |L36.454|
                  |L36.346|
00015a  79a0              LDRB     r0,[r4,#6]            ;2172
00015c  2180              MOVS     r1,#0x80              ;2172
00015e  4308              ORRS     r0,r0,r1              ;2172
000160  71a0              STRB     r0,[r4,#6]            ;2172
000162  2001              MOVS     r0,#1                 ;2172
000164  e75e              B        |L36.36|
                  |L36.358|
000166  69a0              LDR      r0,[r4,#0x18]         ;2179
000168  1b81              SUBS     r1,r0,r6              ;2179
00016a  9804              LDR      r0,[sp,#0x10]         ;2179
00016c  4281              CMP      r1,r0                 ;2179
00016e  d20e              BCS      |L36.398|
000170  69a0              LDR      r0,[r4,#0x18]         ;2180
000172  1b80              SUBS     r0,r0,r6              ;2180
000174  0242              LSLS     r2,r0,#9              ;2180
000176  9803              LDR      r0,[sp,#0xc]          ;2180
000178  1811              ADDS     r1,r2,r0              ;2180
00017a  2201              MOVS     r2,#1                 ;2180
00017c  0252              LSLS     r2,r2,#9              ;2180
00017e  4620              MOV      r0,r4                 ;2180
000180  3024              ADDS     r0,r0,#0x24           ;2180
000182  f7fffffe          BL       mem_cpy
000186  79a0              LDRB     r0,[r4,#6]            ;2181
000188  2140              MOVS     r1,#0x40              ;2181
00018a  4388              BICS     r0,r0,r1              ;2181
00018c  71a0              STRB     r0,[r4,#6]            ;2181
                  |L36.398|
00018e  9804              LDR      r0,[sp,#0x10]         ;2184
000190  0247              LSLS     r7,r0,#9              ;2184
000192  e030              B        |L36.502|
                  |L36.404|
000194  69a0              LDR      r0,[r4,#0x18]         ;2193
000196  42b0              CMP      r0,r6                 ;2193
000198  d014              BEQ      |L36.452|
00019a  68e1              LDR      r1,[r4,#0xc]          ;2194
00019c  68a0              LDR      r0,[r4,#8]            ;2194
00019e  4288              CMP      r0,r1                 ;2194
0001a0  d210              BCS      |L36.452|
0001a2  6820              LDR      r0,[r4,#0]            ;2195
0001a4  7840              LDRB     r0,[r0,#1]            ;2195
0001a6  2301              MOVS     r3,#1                 ;2195
0001a8  4632              MOV      r2,r6                 ;2195
0001aa  4621              MOV      r1,r4                 ;2195
0001ac  3124              ADDS     r1,r1,#0x24           ;2195
0001ae  9001              STR      r0,[sp,#4]            ;2195
0001b0  f7fffffe          BL       disk_read
0001b4  2800              CMP      r0,#0                 ;2195
0001b6  d005              BEQ      |L36.452|
0001b8  79a0              LDRB     r0,[r4,#6]            ;2196
0001ba  2180              MOVS     r1,#0x80              ;2196
0001bc  4308              ORRS     r0,r0,r1              ;2196
0001be  71a0              STRB     r0,[r4,#6]            ;2196
0001c0  2001              MOVS     r0,#1                 ;2196
0001c2  e72f              B        |L36.36|
                  |L36.452|
0001c4  61a6              STR      r6,[r4,#0x18]         ;2199
                  |L36.454|
0001c6  8920              LDRH     r0,[r4,#8]            ;2201
0001c8  05c0              LSLS     r0,r0,#23             ;2201
0001ca  0dc0              LSRS     r0,r0,#23             ;2201
0001cc  2101              MOVS     r1,#1                 ;2201
0001ce  0249              LSLS     r1,r1,#9              ;2201
0001d0  1a0f              SUBS     r7,r1,r0              ;2201
0001d2  42af              CMP      r7,r5                 ;2202
0001d4  d900              BLS      |L36.472|
0001d6  462f              MOV      r7,r5                 ;2202
                  |L36.472|
0001d8  8921              LDRH     r1,[r4,#8]            ;2209
0001da  05ca              LSLS     r2,r1,#23             ;2209
0001dc  0dd2              LSRS     r2,r2,#23             ;2209
0001de  4621              MOV      r1,r4                 ;2209
0001e0  3124              ADDS     r1,r1,#0x24           ;2209
0001e2  1850              ADDS     r0,r2,r1              ;2209
0001e4  463a              MOV      r2,r7                 ;2209
0001e6  9903              LDR      r1,[sp,#0xc]          ;2209
0001e8  f7fffffe          BL       mem_cpy
0001ec  79a0              LDRB     r0,[r4,#6]            ;2210
0001ee  2140              MOVS     r1,#0x40              ;2210
0001f0  4308              ORRS     r0,r0,r1              ;2210
0001f2  71a0              STRB     r0,[r4,#6]            ;2210
0001f4  bf00              NOP                            ;2185
                  |L36.502|
0001f6  9803              LDR      r0,[sp,#0xc]          ;2138
0001f8  19c0              ADDS     r0,r0,r7              ;2138
0001fa  9003              STR      r0,[sp,#0xc]          ;2138
0001fc  68a0              LDR      r0,[r4,#8]            ;2138
0001fe  19c0              ADDS     r0,r0,r7              ;2138
000200  60a0              STR      r0,[r4,#8]            ;2138
000202  980a              LDR      r0,[sp,#0x28]         ;2138
000204  6800              LDR      r0,[r0,#0]            ;2138
000206  19c1              ADDS     r1,r0,r7              ;2138
000208  980a              LDR      r0,[sp,#0x28]         ;2138
00020a  6001              STR      r1,[r0,#0]            ;2138
00020c  1bed              SUBS     r5,r5,r7              ;2138
                  |L36.526|
00020e  2d00              CMP      r5,#0                 ;2137
000210  d000              BEQ      |L36.532|
000212  e71e              B        |L36.82|
                  |L36.532|
000214  bf00              NOP                            ;2149
000216  68e1              LDR      r1,[r4,#0xc]          ;2214
000218  68a0              LDR      r0,[r4,#8]            ;2214
00021a  4288              CMP      r0,r1                 ;2214
00021c  d901              BLS      |L36.546|
00021e  68a0              LDR      r0,[r4,#8]            ;2214
000220  60e0              STR      r0,[r4,#0xc]          ;2214
                  |L36.546|
000222  79a0              LDRB     r0,[r4,#6]            ;2215
000224  2120              MOVS     r1,#0x20              ;2215
000226  4308              ORRS     r0,r0,r1              ;2215
000228  71a0              STRB     r0,[r4,#6]            ;2215
00022a  2000              MOVS     r0,#0                 ;2217
00022c  e6fa              B        |L36.36|
;;;2219   
                          ENDP


                          AREA ||i.follow_path||, CODE, READONLY, ALIGN=1

                  follow_path PROC
;;;1565   static
;;;1566   FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;1567   	DIR *dj,			/* Directory object to return last directory and found object */
;;;1568   	const TCHAR *path	/* Full-path string to find a file or directory */
;;;1569   )
;;;1570   {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
;;;1571   	FRESULT res;
;;;1572   	BYTE *dir, ns;
;;;1573   
;;;1574   
;;;1575   #if _FS_RPATH
;;;1576   	if (*path == '/' || *path == '\\') { /* There is a heading separator */
000006  9802              LDR      r0,[sp,#8]
000008  7800              LDRB     r0,[r0,#0]
00000a  282f              CMP      r0,#0x2f
00000c  d003              BEQ      |L37.22|
00000e  9802              LDR      r0,[sp,#8]
000010  7800              LDRB     r0,[r0,#0]
000012  285c              CMP      r0,#0x5c
000014  d105              BNE      |L37.34|
                  |L37.22|
;;;1577   		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
000016  9802              LDR      r0,[sp,#8]
000018  1c40              ADDS     r0,r0,#1
00001a  9002              STR      r0,[sp,#8]
00001c  2000              MOVS     r0,#0
00001e  60a0              STR      r0,[r4,#8]
000020  e002              B        |L37.40|
                  |L37.34|
;;;1578   	} else {							/* No heading separator */
;;;1579   		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
000022  6820              LDR      r0,[r4,#0]
000024  6980              LDR      r0,[r0,#0x18]
000026  60a0              STR      r0,[r4,#8]
                  |L37.40|
;;;1580   	}
;;;1581   #else
;;;1582   	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
;;;1583   		path++;
;;;1584   	dj->sclust = 0;						/* Start from the root dir */
;;;1585   #endif
;;;1586   
;;;1587   	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
000028  9802              LDR      r0,[sp,#8]
00002a  7800              LDRB     r0,[r0,#0]
00002c  2820              CMP      r0,#0x20
00002e  d207              BCS      |L37.64|
;;;1588   		res = dir_sdi(dj, 0);
000030  2100              MOVS     r1,#0
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       dir_sdi
000038  4606              MOV      r6,r0
;;;1589   		dj->dir = 0;
00003a  2000              MOVS     r0,#0
00003c  6160              STR      r0,[r4,#0x14]
00003e  e040              B        |L37.194|
                  |L37.64|
;;;1590   
;;;1591   	} else {							/* Follow path */
;;;1592   		for (;;) {
000040  bf00              NOP      
                  |L37.66|
;;;1593   			res = create_name(dj, &path);	/* Get a segment */
000042  a902              ADD      r1,sp,#8
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       create_name
00004a  4606              MOV      r6,r0
;;;1594   			if (res != FR_OK) break;
00004c  2e00              CMP      r6,#0
00004e  d000              BEQ      |L37.82|
000050  e036              B        |L37.192|
                  |L37.82|
;;;1595   			res = dir_find(dj);				/* Find it */
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       dir_find
000058  4606              MOV      r6,r0
;;;1596   			ns = *(dj->fn+NS);
00005a  69a0              LDR      r0,[r4,#0x18]
00005c  7ac7              LDRB     r7,[r0,#0xb]
;;;1597   			if (res != FR_OK) {				/* Failed to find the object */
00005e  2e00              CMP      r6,#0
000060  d015              BEQ      |L37.142|
;;;1598   				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
000062  2e04              CMP      r6,#4
000064  d000              BEQ      |L37.104|
000066  e02b              B        |L37.192|
                  |L37.104|
;;;1599   				/* Object not found */
;;;1600   				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
000068  2020              MOVS     r0,#0x20
00006a  4038              ANDS     r0,r0,r7
00006c  2800              CMP      r0,#0
00006e  d008              BEQ      |L37.130|
;;;1601   					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
000070  2000              MOVS     r0,#0
000072  60a0              STR      r0,[r4,#8]
000074  6160              STR      r0,[r4,#0x14]
;;;1602   					res = FR_OK;
000076  2600              MOVS     r6,#0
;;;1603   					if (!(ns & NS_LAST)) continue;
000078  2004              MOVS     r0,#4
00007a  4038              ANDS     r0,r0,r7
00007c  2800              CMP      r0,#0
00007e  d105              BNE      |L37.140|
000080  e7df              B        |L37.66|
                  |L37.130|
;;;1604   				} else {							/* Could not find the object */
;;;1605   					if (!(ns & NS_LAST)) res = FR_NO_PATH;
000082  2004              MOVS     r0,#4
000084  4038              ANDS     r0,r0,r7
000086  2800              CMP      r0,#0
000088  d100              BNE      |L37.140|
00008a  2605              MOVS     r6,#5
                  |L37.140|
;;;1606   				}
;;;1607   				break;
00008c  e018              B        |L37.192|
                  |L37.142|
;;;1608   			}
;;;1609   			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
00008e  2004              MOVS     r0,#4
000090  4038              ANDS     r0,r0,r7
000092  2800              CMP      r0,#0
000094  d000              BEQ      |L37.152|
000096  e013              B        |L37.192|
                  |L37.152|
;;;1610   			dir = dj->dir;						/* There is next segment. Follow the sub directory */
000098  6965              LDR      r5,[r4,#0x14]
;;;1611   			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
00009a  7ae8              LDRB     r0,[r5,#0xb]
00009c  2110              MOVS     r1,#0x10
00009e  4008              ANDS     r0,r0,r1
0000a0  2800              CMP      r0,#0
0000a2  d101              BNE      |L37.168|
;;;1612   				res = FR_NO_PATH; break;
0000a4  2605              MOVS     r6,#5
0000a6  e00b              B        |L37.192|
                  |L37.168|
;;;1613   			}
;;;1614   			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
0000a8  7d68              LDRB     r0,[r5,#0x15]
0000aa  0200              LSLS     r0,r0,#8
0000ac  7d29              LDRB     r1,[r5,#0x14]
0000ae  4308              ORRS     r0,r0,r1
0000b0  0400              LSLS     r0,r0,#16
0000b2  7ee9              LDRB     r1,[r5,#0x1b]
0000b4  0209              LSLS     r1,r1,#8
0000b6  7eaa              LDRB     r2,[r5,#0x1a]
0000b8  4311              ORRS     r1,r1,r2
0000ba  4308              ORRS     r0,r0,r1
0000bc  60a0              STR      r0,[r4,#8]
0000be  e7c0              B        |L37.66|
                  |L37.192|
0000c0  bf00              NOP                            ;1594
                  |L37.194|
;;;1615   		}
;;;1616   	}
;;;1617   
;;;1618   	return res;
0000c2  4630              MOV      r0,r6
;;;1619   }
0000c4  bdfe              POP      {r1-r7,pc}
;;;1620   
                          ENDP


                          AREA ||i.get_fat||, CODE, READONLY, ALIGN=1

                  get_fat PROC
;;;488    
;;;489    DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
000000  b5f8              PUSH     {r3-r7,lr}
;;;490    	FATFS *fs,	/* File system object */
;;;491    	DWORD clst	/* Cluster# to get the link information */
;;;492    )
;;;493    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;494    	UINT wc, bc;
;;;495    	BYTE *p;
;;;496    
;;;497    
;;;498    	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
000006  2d02              CMP      r5,#2
000008  d302              BCC      |L38.16|
00000a  69e0              LDR      r0,[r4,#0x1c]
00000c  42a8              CMP      r0,r5
00000e  d801              BHI      |L38.20|
                  |L38.16|
;;;499    		return 1;
000010  2001              MOVS     r0,#1
                  |L38.18|
;;;500    
;;;501    	switch (fs->fs_type) {
;;;502    	case FS_FAT12 :
;;;503    		bc = (UINT)clst; bc += bc / 2;
;;;504    		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
;;;505    		wc = fs->win[bc % SS(fs)]; bc++;
;;;506    		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
;;;507    		wc |= fs->win[bc % SS(fs)] << 8;
;;;508    		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
;;;509    
;;;510    	case FS_FAT16 :
;;;511    		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
;;;512    		p = &fs->win[clst * 2 % SS(fs)];
;;;513    		return LD_WORD(p);
;;;514    
;;;515    	case FS_FAT32 :
;;;516    		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
;;;517    		p = &fs->win[clst * 4 % SS(fs)];
;;;518    		return LD_DWORD(p) & 0x0FFFFFFF;
;;;519    	}
;;;520    
;;;521    	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
;;;522    }
000012  bdf8              POP      {r3-r7,pc}
                  |L38.20|
000014  7820              LDRB     r0,[r4,#0]            ;501
000016  2801              CMP      r0,#1                 ;501
000018  d004              BEQ      |L38.36|
00001a  2802              CMP      r0,#2                 ;501
00001c  d032              BEQ      |L38.132|
00001e  2803              CMP      r0,#3                 ;501
000020  d15e              BNE      |L38.224|
000022  e042              B        |L38.170|
                  |L38.36|
000024  462f              MOV      r7,r5                 ;503
000026  0878              LSRS     r0,r7,#1              ;503
000028  19c7              ADDS     r7,r0,r7              ;503
00002a  0a7a              LSRS     r2,r7,#9              ;504
00002c  6a60              LDR      r0,[r4,#0x24]         ;504
00002e  1881              ADDS     r1,r0,r2              ;504
000030  4620              MOV      r0,r4                 ;504
000032  f7fffffe          BL       move_window
000036  2800              CMP      r0,#0                 ;504
000038  d000              BEQ      |L38.60|
00003a  e051              B        |L38.224|
                  |L38.60|
00003c  05f9              LSLS     r1,r7,#23             ;505
00003e  0dc9              LSRS     r1,r1,#23             ;505
000040  4620              MOV      r0,r4                 ;505
000042  3034              ADDS     r0,r0,#0x34           ;505
000044  5c40              LDRB     r0,[r0,r1]            ;505
000046  9000              STR      r0,[sp,#0]            ;505
000048  1c7f              ADDS     r7,r7,#1              ;505
00004a  0a7a              LSRS     r2,r7,#9              ;506
00004c  6a60              LDR      r0,[r4,#0x24]         ;506
00004e  1881              ADDS     r1,r0,r2              ;506
000050  4620              MOV      r0,r4                 ;506
000052  f7fffffe          BL       move_window
000056  2800              CMP      r0,#0                 ;506
000058  d000              BEQ      |L38.92|
00005a  e041              B        |L38.224|
                  |L38.92|
00005c  05f9              LSLS     r1,r7,#23             ;507
00005e  0dc9              LSRS     r1,r1,#23             ;507
000060  4620              MOV      r0,r4                 ;507
000062  3034              ADDS     r0,r0,#0x34           ;507
000064  5c40              LDRB     r0,[r0,r1]            ;507
000066  0200              LSLS     r0,r0,#8              ;507
000068  9900              LDR      r1,[sp,#0]            ;507
00006a  4308              ORRS     r0,r0,r1              ;507
00006c  9000              STR      r0,[sp,#0]            ;507
00006e  07e8              LSLS     r0,r5,#31             ;508
000070  0fc0              LSRS     r0,r0,#31             ;508
000072  2800              CMP      r0,#0                 ;508
000074  d002              BEQ      |L38.124|
000076  9800              LDR      r0,[sp,#0]            ;508
000078  0900              LSRS     r0,r0,#4              ;508
00007a  e7ca              B        |L38.18|
                  |L38.124|
00007c  9800              LDR      r0,[sp,#0]            ;508
00007e  0500              LSLS     r0,r0,#20             ;508
000080  0d00              LSRS     r0,r0,#20             ;508
000082  e7c6              B        |L38.18|
                  |L38.132|
000084  0a2a              LSRS     r2,r5,#8              ;511
000086  6a60              LDR      r0,[r4,#0x24]         ;511
000088  1881              ADDS     r1,r0,r2              ;511
00008a  4620              MOV      r0,r4                 ;511
00008c  f7fffffe          BL       move_window
000090  2800              CMP      r0,#0                 ;511
000092  d000              BEQ      |L38.150|
000094  e024              B        |L38.224|
                  |L38.150|
000096  0628              LSLS     r0,r5,#24             ;512
000098  0dc1              LSRS     r1,r0,#23             ;512
00009a  4620              MOV      r0,r4                 ;512
00009c  3034              ADDS     r0,r0,#0x34           ;512
00009e  180e              ADDS     r6,r1,r0              ;512
0000a0  7870              LDRB     r0,[r6,#1]            ;513
0000a2  0200              LSLS     r0,r0,#8              ;513
0000a4  7831              LDRB     r1,[r6,#0]            ;513
0000a6  4308              ORRS     r0,r0,r1              ;513
0000a8  e7b3              B        |L38.18|
                  |L38.170|
0000aa  09ea              LSRS     r2,r5,#7              ;516
0000ac  6a60              LDR      r0,[r4,#0x24]         ;516
0000ae  1881              ADDS     r1,r0,r2              ;516
0000b0  4620              MOV      r0,r4                 ;516
0000b2  f7fffffe          BL       move_window
0000b6  2800              CMP      r0,#0                 ;516
0000b8  d000              BEQ      |L38.188|
0000ba  e011              B        |L38.224|
                  |L38.188|
0000bc  0668              LSLS     r0,r5,#25             ;517
0000be  0dc1              LSRS     r1,r0,#23             ;517
0000c0  4620              MOV      r0,r4                 ;517
0000c2  3034              ADDS     r0,r0,#0x34           ;517
0000c4  180e              ADDS     r6,r1,r0              ;517
0000c6  78f0              LDRB     r0,[r6,#3]            ;518
0000c8  0600              LSLS     r0,r0,#24             ;518
0000ca  78b1              LDRB     r1,[r6,#2]            ;518
0000cc  0409              LSLS     r1,r1,#16             ;518
0000ce  4308              ORRS     r0,r0,r1              ;518
0000d0  7871              LDRB     r1,[r6,#1]            ;518
0000d2  0209              LSLS     r1,r1,#8              ;518
0000d4  4308              ORRS     r0,r0,r1              ;518
0000d6  7831              LDRB     r1,[r6,#0]            ;518
0000d8  4308              ORRS     r0,r0,r1              ;518
0000da  0100              LSLS     r0,r0,#4              ;518
0000dc  0900              LSRS     r0,r0,#4              ;518
0000de  e798              B        |L38.18|
                  |L38.224|
0000e0  bf00              NOP                            ;504
0000e2  2000              MOVS     r0,#0                 ;521
0000e4  43c0              MVNS     r0,r0                 ;521
0000e6  e794              B        |L38.18|
;;;523    
                          ENDP


                          AREA ||i.get_fileinfo||, CODE, READONLY, ALIGN=1

                  get_fileinfo PROC
;;;1483   static
;;;1484   void get_fileinfo (		/* No return code */
000000  b5f8              PUSH     {r3-r7,lr}
;;;1485   	DIR *dj,			/* Pointer to the directory object */
;;;1486   	FILINFO *fno	 	/* Pointer to the file information to be filled */
;;;1487   )
;;;1488   {
000002  4605              MOV      r5,r0
000004  460b              MOV      r3,r1
;;;1489   	int i;
;;;1490   	BYTE nt, *dir;
;;;1491   	TCHAR *p, c;
;;;1492   
;;;1493   
;;;1494   	p = fno->fname;
000006  461a              MOV      r2,r3
000008  3209              ADDS     r2,r2,#9
;;;1495   	if (dj->sect) {
00000a  692e              LDR      r6,[r5,#0x10]
00000c  2e00              CMP      r6,#0
00000e  d03c              BEQ      |L39.138|
;;;1496   		dir = dj->dir;
000010  6968              LDR      r0,[r5,#0x14]
;;;1497   		nt = dir[DIR_NTres];		/* NT flag */
000012  7b06              LDRB     r6,[r0,#0xc]
000014  9600              STR      r6,[sp,#0]
;;;1498   		for (i = 0; i < 8; i++) {	/* Copy name body */
000016  2100              MOVS     r1,#0
000018  e00a              B        |L39.48|
                  |L39.26|
;;;1499   			c = dir[i];
00001a  5c44              LDRB     r4,[r0,r1]
;;;1500   			if (c == ' ') break;
00001c  2c20              CMP      r4,#0x20
00001e  d100              BNE      |L39.34|
000020  e008              B        |L39.52|
                  |L39.34|
;;;1501   			if (c == 0x05) c = (TCHAR)0xE5;
000022  2c05              CMP      r4,#5
000024  d100              BNE      |L39.40|
000026  24e5              MOVS     r4,#0xe5
                  |L39.40|
;;;1502   			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
000028  bf00              NOP      
;;;1503   #if _LFN_UNICODE
;;;1504   			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i + 1]))
;;;1505   				c = (c << 8) | dir[++i];
;;;1506   			c = ff_convert(c, 1);
;;;1507   			if (!c) c = '?';
;;;1508   #endif
;;;1509   			*p++ = c;
00002a  7014              STRB     r4,[r2,#0]
00002c  1c52              ADDS     r2,r2,#1
00002e  1c49              ADDS     r1,r1,#1              ;1498
                  |L39.48|
000030  2908              CMP      r1,#8                 ;1498
000032  dbf2              BLT      |L39.26|
                  |L39.52|
000034  bf00              NOP                            ;1500
;;;1510   		}
;;;1511   		if (dir[8] != ' ') {		/* Copy name extension */
000036  7a06              LDRB     r6,[r0,#8]
000038  2e20              CMP      r6,#0x20
00003a  d00f              BEQ      |L39.92|
;;;1512   			*p++ = '.';
00003c  262e              MOVS     r6,#0x2e
00003e  7016              STRB     r6,[r2,#0]
000040  1c52              ADDS     r2,r2,#1
;;;1513   			for (i = 8; i < 11; i++) {
000042  2108              MOVS     r1,#8
000044  e007              B        |L39.86|
                  |L39.70|
;;;1514   				c = dir[i];
000046  5c44              LDRB     r4,[r0,r1]
;;;1515   				if (c == ' ') break;
000048  2c20              CMP      r4,#0x20
00004a  d100              BNE      |L39.78|
00004c  e005              B        |L39.90|
                  |L39.78|
;;;1516   				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
00004e  bf00              NOP      
;;;1517   #if _LFN_UNICODE
;;;1518   				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i + 1]))
;;;1519   					c = (c << 8) | dir[++i];
;;;1520   				c = ff_convert(c, 1);
;;;1521   				if (!c) c = '?';
;;;1522   #endif
;;;1523   				*p++ = c;
000050  7014              STRB     r4,[r2,#0]
000052  1c52              ADDS     r2,r2,#1
000054  1c49              ADDS     r1,r1,#1              ;1513
                  |L39.86|
000056  290b              CMP      r1,#0xb               ;1513
000058  dbf5              BLT      |L39.70|
                  |L39.90|
00005a  bf00              NOP                            ;1515
                  |L39.92|
;;;1524   			}
;;;1525   		}
;;;1526   		fno->fattrib = dir[DIR_Attr];				/* Attribute */
00005c  7ac6              LDRB     r6,[r0,#0xb]
00005e  721e              STRB     r6,[r3,#8]
;;;1527   		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
000060  7fc6              LDRB     r6,[r0,#0x1f]
000062  0636              LSLS     r6,r6,#24
000064  7f87              LDRB     r7,[r0,#0x1e]
000066  043f              LSLS     r7,r7,#16
000068  433e              ORRS     r6,r6,r7
00006a  7f47              LDRB     r7,[r0,#0x1d]
00006c  023f              LSLS     r7,r7,#8
00006e  433e              ORRS     r6,r6,r7
000070  7f07              LDRB     r7,[r0,#0x1c]
000072  433e              ORRS     r6,r6,r7
000074  601e              STR      r6,[r3,#0]
;;;1528   		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
000076  7e46              LDRB     r6,[r0,#0x19]
000078  0236              LSLS     r6,r6,#8
00007a  7e07              LDRB     r7,[r0,#0x18]
00007c  433e              ORRS     r6,r6,r7
00007e  809e              STRH     r6,[r3,#4]
;;;1529   		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
000080  7dc6              LDRB     r6,[r0,#0x17]
000082  0236              LSLS     r6,r6,#8
000084  7d87              LDRB     r7,[r0,#0x16]
000086  433e              ORRS     r6,r6,r7
000088  80de              STRH     r6,[r3,#6]
                  |L39.138|
;;;1530   	}
;;;1531   	*p = 0;
00008a  2600              MOVS     r6,#0
00008c  7016              STRB     r6,[r2,#0]
;;;1532   
;;;1533   #if _USE_LFN
;;;1534   	if (fno->lfname) {
;;;1535   		TCHAR *tp = fno->lfname;
;;;1536   		WCHAR w, *lfn;
;;;1537   
;;;1538   		i = 0;
;;;1539   		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
;;;1540   			lfn = dj->lfn;
;;;1541   			while ((w = *lfn++) != 0) {			/* Get an LFN char */
;;;1542   #if !_LFN_UNICODE
;;;1543   				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
;;;1544   				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
;;;1545   				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC */
;;;1546   					tp[i++] = (TCHAR)(w >> 8);
;;;1547   #endif
;;;1548   				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overrun, no LFN */
;;;1549   				tp[i++] = (TCHAR)w;
;;;1550   			}
;;;1551   		}
;;;1552   		tp[i] = 0;	/* Terminator */
;;;1553   	}
;;;1554   #endif
;;;1555   }
00008e  bdf8              POP      {r3-r7,pc}
;;;1556   #endif /* _FS_MINIMIZE <= 1 */
                          ENDP


                          AREA ||i.mem_cmp||, CODE, READONLY, ALIGN=1

                  mem_cmp PROC
;;;257    static
;;;258    int mem_cmp (const void* dst, const void* src, int cnt) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4603              MOV      r3,r0
;;;259    	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
000004  461c              MOV      r4,r3
000006  460d              MOV      r5,r1
;;;260    	int r = 0;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;261    
;;;262    	while (cnt-- && (r = *d++ - *s++) == 0) ;
00000c  bf00              NOP      
                  |L40.14|
00000e  4610              MOV      r0,r2
000010  1e52              SUBS     r2,r2,#1
000012  2800              CMP      r0,#0
000014  d007              BEQ      |L40.38|
000016  7820              LDRB     r0,[r4,#0]
000018  1c64              ADDS     r4,r4,#1
00001a  782e              LDRB     r6,[r5,#0]
00001c  1c6d              ADDS     r5,r5,#1
00001e  1b80              SUBS     r0,r0,r6
000020  9000              STR      r0,[sp,#0]
000022  2800              CMP      r0,#0
000024  d0f3              BEQ      |L40.14|
                  |L40.38|
;;;263    	return r;
000026  9800              LDR      r0,[sp,#0]
;;;264    }
000028  bdf8              POP      {r3-r7,pc}
;;;265    
                          ENDP


                          AREA ||i.mem_cpy||, CODE, READONLY, ALIGN=1

                  mem_cpy PROC
;;;231    static
;;;232    void mem_cpy (void* dst, const void* src, int cnt) {
000000  b570              PUSH     {r4-r6,lr}
;;;233    	BYTE *d = (BYTE*)dst;
000002  4603              MOV      r3,r0
;;;234    	const BYTE *s = (const BYTE*)src;
000004  460c              MOV      r4,r1
;;;235    
;;;236    #if _WORD_ACCESS == 1
;;;237    	while (cnt >= sizeof(int)) {
;;;238    		*(int*)d = *(int*)s;
;;;239    		d += sizeof(int); s += sizeof(int);
;;;240    		cnt -= sizeof(int);
;;;241    	}
;;;242    #endif
;;;243    	while (cnt--)
000006  e003              B        |L41.16|
                  |L41.8|
;;;244    		*d++ = *s++;
000008  7825              LDRB     r5,[r4,#0]
00000a  701d              STRB     r5,[r3,#0]
00000c  1c64              ADDS     r4,r4,#1
00000e  1c5b              ADDS     r3,r3,#1
                  |L41.16|
000010  4615              MOV      r5,r2                 ;243
000012  1e52              SUBS     r2,r2,#1              ;243
000014  2d00              CMP      r5,#0                 ;243
000016  d1f7              BNE      |L41.8|
;;;245    }
000018  bd70              POP      {r4-r6,pc}
;;;246    
                          ENDP


                          AREA ||i.mem_set||, CODE, READONLY, ALIGN=1

                  mem_set PROC
;;;248    static
;;;249    void mem_set (void* dst, int val, int cnt) {
000000  b530              PUSH     {r4,r5,lr}
;;;250    	BYTE *d = (BYTE*)dst;
000002  4603              MOV      r3,r0
;;;251    
;;;252    	while (cnt--)
000004  e001              B        |L42.10|
                  |L42.6|
;;;253    		*d++ = (BYTE)val;
000006  7019              STRB     r1,[r3,#0]
000008  1c5b              ADDS     r3,r3,#1
                  |L42.10|
00000a  4614              MOV      r4,r2                 ;252
00000c  1e52              SUBS     r2,r2,#1              ;252
00000e  2c00              CMP      r4,#0                 ;252
000010  d1f9              BNE      |L42.6|
;;;254    }
000012  bd30              POP      {r4,r5,pc}
;;;255    
                          ENDP


                          AREA ||i.move_window||, CODE, READONLY, ALIGN=1

                  move_window PROC
;;;408    static
;;;409    FRESULT move_window (
000000  b5f8              PUSH     {r3-r7,lr}
;;;410    	FATFS *fs,		/* File system object */
;;;411    	DWORD sector	/* Sector number to make appearance in the fs->win[] */
;;;412    )					/* Move to zero only writes back dirty window */
;;;413    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;414    	DWORD wsect;
;;;415    
;;;416    
;;;417    	wsect = fs->winsect;
000006  6b26              LDR      r6,[r4,#0x30]
;;;418    	if (wsect != sector) {	/* Changed current window */
000008  42ae              CMP      r6,r5
00000a  d032              BEQ      |L43.114|
;;;419    #if !_FS_READONLY
;;;420    		if (fs->wflag) {	/* Write back dirty window if needed */
00000c  7920              LDRB     r0,[r4,#4]
00000e  2800              CMP      r0,#0
000010  d021              BEQ      |L43.86|
;;;421    			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
000012  7860              LDRB     r0,[r4,#1]
000014  2301              MOVS     r3,#1
000016  4632              MOV      r2,r6
000018  4621              MOV      r1,r4
00001a  3134              ADDS     r1,r1,#0x34
00001c  f7fffffe          BL       disk_write
000020  2800              CMP      r0,#0
000022  d001              BEQ      |L43.40|
;;;422    				return FR_DISK_ERR;
000024  2001              MOVS     r0,#1
                  |L43.38|
;;;423    			fs->wflag = 0;
;;;424    			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
;;;425    				BYTE nf;
;;;426    				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
;;;427    					wsect += fs->fsize;
;;;428    					disk_write(fs->drv, fs->win, wsect, 1);
;;;429    				}
;;;430    			}
;;;431    		}
;;;432    #endif
;;;433    		if (sector) {
;;;434    			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
;;;435    				return FR_DISK_ERR;
;;;436    			fs->winsect = sector;
;;;437    		}
;;;438    	}
;;;439    
;;;440    	return FR_OK;
;;;441    }
000026  bdf8              POP      {r3-r7,pc}
                  |L43.40|
000028  2000              MOVS     r0,#0                 ;423
00002a  7120              STRB     r0,[r4,#4]            ;423
00002c  6a21              LDR      r1,[r4,#0x20]         ;424
00002e  6a60              LDR      r0,[r4,#0x24]         ;424
000030  1840              ADDS     r0,r0,r1              ;424
000032  42b0              CMP      r0,r6                 ;424
000034  d90f              BLS      |L43.86|
000036  78e7              LDRB     r7,[r4,#3]            ;426
000038  e00a              B        |L43.80|
                  |L43.58|
00003a  6a20              LDR      r0,[r4,#0x20]         ;427
00003c  1986              ADDS     r6,r0,r6              ;427
00003e  7860              LDRB     r0,[r4,#1]            ;428
000040  2301              MOVS     r3,#1                 ;428
000042  4632              MOV      r2,r6                 ;428
000044  4621              MOV      r1,r4                 ;428
000046  3134              ADDS     r1,r1,#0x34           ;428
000048  f7fffffe          BL       disk_write
00004c  1e78              SUBS     r0,r7,#1              ;426
00004e  b2c7              UXTB     r7,r0                 ;426
                  |L43.80|
000050  2f01              CMP      r7,#1                 ;426
000052  dcf2              BGT      |L43.58|
000054  bf00              NOP                            ;430
                  |L43.86|
000056  2d00              CMP      r5,#0                 ;433
000058  d00b              BEQ      |L43.114|
00005a  7860              LDRB     r0,[r4,#1]            ;434
00005c  2301              MOVS     r3,#1                 ;434
00005e  462a              MOV      r2,r5                 ;434
000060  4621              MOV      r1,r4                 ;434
000062  3134              ADDS     r1,r1,#0x34           ;434
000064  f7fffffe          BL       disk_read
000068  2800              CMP      r0,#0                 ;434
00006a  d001              BEQ      |L43.112|
00006c  2001              MOVS     r0,#1                 ;435
00006e  e7da              B        |L43.38|
                  |L43.112|
000070  6325              STR      r5,[r4,#0x30]         ;436
                  |L43.114|
000072  2000              MOVS     r0,#0                 ;440
000074  e7d7              B        |L43.38|
;;;442    
                          ENDP


                          AREA ||i.put_fat||, CODE, READONLY, ALIGN=1

                  put_fat PROC
;;;531    
;;;532    FRESULT put_fat (
000000  b5fe              PUSH     {r1-r7,lr}
;;;533    	FATFS *fs,	/* File system object */
;;;534    	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
;;;535    	DWORD val	/* New value to mark the cluster */
;;;536    )
;;;537    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;538    	UINT bc;
;;;539    	BYTE *p;
;;;540    	FRESULT res;
;;;541    
;;;542    
;;;543    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
000008  2e02              CMP      r6,#2
00000a  d302              BCC      |L44.18|
00000c  69e8              LDR      r0,[r5,#0x1c]
00000e  42b0              CMP      r0,r6
000010  d802              BHI      |L44.24|
                  |L44.18|
;;;544    		res = FR_INT_ERR;
000012  2002              MOVS     r0,#2
000014  9000              STR      r0,[sp,#0]
000016  e094              B        |L44.322|
                  |L44.24|
;;;545    
;;;546    	} else {
;;;547    		switch (fs->fs_type) {
000018  7828              LDRB     r0,[r5,#0]
00001a  2801              CMP      r0,#1
00001c  d004              BEQ      |L44.40|
00001e  2802              CMP      r0,#2
000020  d04b              BEQ      |L44.186|
000022  2803              CMP      r0,#3
000024  d17e              BNE      |L44.292|
000026  e05d              B        |L44.228|
                  |L44.40|
;;;548    		case FS_FAT12 :
;;;549    			bc = clst; bc += bc / 2;
000028  9601              STR      r6,[sp,#4]
00002a  9e01              LDR      r6,[sp,#4]
00002c  0870              LSRS     r0,r6,#1
00002e  1980              ADDS     r0,r0,r6
000030  9001              STR      r0,[sp,#4]
;;;550    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
000032  6a6a              LDR      r2,[r5,#0x24]
000034  9801              LDR      r0,[sp,#4]
000036  0a40              LSRS     r0,r0,#9
000038  1811              ADDS     r1,r2,r0
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       move_window
000040  9000              STR      r0,[sp,#0]
;;;551    			if (res != FR_OK) break;
000042  9800              LDR      r0,[sp,#0]
000044  2800              CMP      r0,#0
000046  d000              BEQ      |L44.74|
000048  e078              B        |L44.316|
                  |L44.74|
;;;552    			p = &fs->win[bc % SS(fs)];
00004a  9801              LDR      r0,[sp,#4]
00004c  05c1              LSLS     r1,r0,#23
00004e  0dc9              LSRS     r1,r1,#23
000050  4628              MOV      r0,r5
000052  3034              ADDS     r0,r0,#0x34
000054  180c              ADDS     r4,r1,r0
;;;553    			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
000056  07f0              LSLS     r0,r6,#31
000058  0fc0              LSRS     r0,r0,#31
00005a  2800              CMP      r0,#0
00005c  d005              BEQ      |L44.106|
00005e  7820              LDRB     r0,[r4,#0]
000060  0700              LSLS     r0,r0,#28
000062  0f00              LSRS     r0,r0,#28
000064  0139              LSLS     r1,r7,#4
000066  4308              ORRS     r0,r0,r1
000068  e000              B        |L44.108|
                  |L44.106|
00006a  4638              MOV      r0,r7
                  |L44.108|
00006c  7020              STRB     r0,[r4,#0]
;;;554    			bc++;
00006e  9801              LDR      r0,[sp,#4]
000070  1c40              ADDS     r0,r0,#1
000072  9001              STR      r0,[sp,#4]
;;;555    			fs->wflag = 1;
000074  2001              MOVS     r0,#1
000076  7128              STRB     r0,[r5,#4]
;;;556    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
000078  6a6a              LDR      r2,[r5,#0x24]
00007a  9801              LDR      r0,[sp,#4]
00007c  0a40              LSRS     r0,r0,#9
00007e  1811              ADDS     r1,r2,r0
000080  4628              MOV      r0,r5
000082  f7fffffe          BL       move_window
000086  9000              STR      r0,[sp,#0]
;;;557    			if (res != FR_OK) break;
000088  9800              LDR      r0,[sp,#0]
00008a  2800              CMP      r0,#0
00008c  d000              BEQ      |L44.144|
00008e  e055              B        |L44.316|
                  |L44.144|
;;;558    			p = &fs->win[bc % SS(fs)];
000090  9801              LDR      r0,[sp,#4]
000092  05c1              LSLS     r1,r0,#23
000094  0dc9              LSRS     r1,r1,#23
000096  4628              MOV      r0,r5
000098  3034              ADDS     r0,r0,#0x34
00009a  180c              ADDS     r4,r1,r0
;;;559    			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
00009c  07f0              LSLS     r0,r6,#31
00009e  0fc0              LSRS     r0,r0,#31
0000a0  2800              CMP      r0,#0
0000a2  d002              BEQ      |L44.170|
0000a4  0538              LSLS     r0,r7,#20
0000a6  0e00              LSRS     r0,r0,#24
0000a8  e005              B        |L44.182|
                  |L44.170|
0000aa  7820              LDRB     r0,[r4,#0]
0000ac  21f0              MOVS     r1,#0xf0
0000ae  4008              ANDS     r0,r0,r1
0000b0  0539              LSLS     r1,r7,#20
0000b2  0f09              LSRS     r1,r1,#28
0000b4  4308              ORRS     r0,r0,r1
                  |L44.182|
0000b6  7020              STRB     r0,[r4,#0]
;;;560    			break;
0000b8  e040              B        |L44.316|
                  |L44.186|
;;;561    
;;;562    		case FS_FAT16 :
;;;563    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
0000ba  0a32              LSRS     r2,r6,#8
0000bc  6a68              LDR      r0,[r5,#0x24]
0000be  1881              ADDS     r1,r0,r2
0000c0  4628              MOV      r0,r5
0000c2  f7fffffe          BL       move_window
0000c6  9000              STR      r0,[sp,#0]
;;;564    			if (res != FR_OK) break;
0000c8  9800              LDR      r0,[sp,#0]
0000ca  2800              CMP      r0,#0
0000cc  d000              BEQ      |L44.208|
0000ce  e035              B        |L44.316|
                  |L44.208|
;;;565    			p = &fs->win[clst * 2 % SS(fs)];
0000d0  0630              LSLS     r0,r6,#24
0000d2  0dc1              LSRS     r1,r0,#23
0000d4  4628              MOV      r0,r5
0000d6  3034              ADDS     r0,r0,#0x34
0000d8  180c              ADDS     r4,r1,r0
;;;566    			ST_WORD(p, (WORD)val);
0000da  7027              STRB     r7,[r4,#0]
0000dc  0438              LSLS     r0,r7,#16
0000de  0e00              LSRS     r0,r0,#24
0000e0  7060              STRB     r0,[r4,#1]
;;;567    			break;
0000e2  e02b              B        |L44.316|
                  |L44.228|
;;;568    
;;;569    		case FS_FAT32 :
;;;570    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
0000e4  09f2              LSRS     r2,r6,#7
0000e6  6a68              LDR      r0,[r5,#0x24]
0000e8  1881              ADDS     r1,r0,r2
0000ea  4628              MOV      r0,r5
0000ec  f7fffffe          BL       move_window
0000f0  9000              STR      r0,[sp,#0]
;;;571    			if (res != FR_OK) break;
0000f2  9800              LDR      r0,[sp,#0]
0000f4  2800              CMP      r0,#0
0000f6  d000              BEQ      |L44.250|
0000f8  e020              B        |L44.316|
                  |L44.250|
;;;572    			p = &fs->win[clst * 4 % SS(fs)];
0000fa  0670              LSLS     r0,r6,#25
0000fc  0dc1              LSRS     r1,r0,#23
0000fe  4628              MOV      r0,r5
000100  3034              ADDS     r0,r0,#0x34
000102  180c              ADDS     r4,r1,r0
;;;573    			val |= LD_DWORD(p) & 0xF0000000;
000104  78e0              LDRB     r0,[r4,#3]
000106  0600              LSLS     r0,r0,#24
000108  78a1              LDRB     r1,[r4,#2]
00010a  0409              LSLS     r1,r1,#16
00010c  4308              ORRS     r0,r0,r1
00010e  7861              LDRB     r1,[r4,#1]
000110  0209              LSLS     r1,r1,#8
000112  4308              ORRS     r0,r0,r1
000114  7821              LDRB     r1,[r4,#0]
000116  4308              ORRS     r0,r0,r1
000118  0f00              LSRS     r0,r0,#28
00011a  0700              LSLS     r0,r0,#28
00011c  4307              ORRS     r7,r7,r0
;;;574    			ST_DWORD(p, val);
00011e  7027              STRB     r7,[r4,#0]
000120  0438              LSLS     r0,r7,#16
000122  e000              B        |L44.294|
                  |L44.292|
000124  e007              B        |L44.310|
                  |L44.294|
000126  0e00              LSRS     r0,r0,#24
000128  7060              STRB     r0,[r4,#1]
00012a  0238              LSLS     r0,r7,#8
00012c  0e00              LSRS     r0,r0,#24
00012e  70a0              STRB     r0,[r4,#2]
000130  0e38              LSRS     r0,r7,#24
000132  70e0              STRB     r0,[r4,#3]
;;;575    			break;
000134  e002              B        |L44.316|
                  |L44.310|
;;;576    
;;;577    		default :
;;;578    			res = FR_INT_ERR;
000136  2002              MOVS     r0,#2
000138  9000              STR      r0,[sp,#0]
00013a  bf00              NOP                            ;547
                  |L44.316|
00013c  bf00              NOP                            ;551
;;;579    		}
;;;580    		fs->wflag = 1;
00013e  2001              MOVS     r0,#1
000140  7128              STRB     r0,[r5,#4]
                  |L44.322|
;;;581    	}
;;;582    
;;;583    	return res;
000142  9800              LDR      r0,[sp,#0]
;;;584    }
000144  bdfe              POP      {r1-r7,pc}
;;;585    #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.remove_chain||, CODE, READONLY, ALIGN=1

                  remove_chain PROC
;;;594    static
;;;595    FRESULT remove_chain (
000000  b5f8              PUSH     {r3-r7,lr}
;;;596    	FATFS *fs,			/* File system object */
;;;597    	DWORD clst			/* Cluster# to remove a chain from */
;;;598    )
;;;599    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;600    	FRESULT res;
;;;601    	DWORD nxt;
;;;602    
;;;603    
;;;604    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
000006  2e02              CMP      r6,#2
000008  d302              BCC      |L45.16|
00000a  69e0              LDR      r0,[r4,#0x1c]
00000c  42b0              CMP      r0,r6
00000e  d801              BHI      |L45.20|
                  |L45.16|
;;;605    		res = FR_INT_ERR;
000010  2702              MOVS     r7,#2
000012  e029              B        |L45.104|
                  |L45.20|
;;;606    
;;;607    	} else {
;;;608    		res = FR_OK;
000014  2700              MOVS     r7,#0
;;;609    		while (clst < fs->n_fatent) {			/* Not a last link? */
000016  e023              B        |L45.96|
                  |L45.24|
;;;610    			nxt = get_fat(fs, clst);			/* Get cluster status */
000018  4631              MOV      r1,r6
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       get_fat
000020  4605              MOV      r5,r0
;;;611    			if (nxt == 0) break;				/* Empty cluster? */
000022  2d00              CMP      r5,#0
000024  d100              BNE      |L45.40|
000026  e01e              B        |L45.102|
                  |L45.40|
;;;612    			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
000028  2d01              CMP      r5,#1
00002a  d101              BNE      |L45.48|
00002c  2702              MOVS     r7,#2
00002e  e01a              B        |L45.102|
                  |L45.48|
;;;613    			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
000030  1c68              ADDS     r0,r5,#1
000032  2800              CMP      r0,#0
000034  d101              BNE      |L45.58|
000036  2701              MOVS     r7,#1
000038  e015              B        |L45.102|
                  |L45.58|
;;;614    			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
00003a  2200              MOVS     r2,#0
00003c  4631              MOV      r1,r6
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       put_fat
000044  4607              MOV      r7,r0
;;;615    			if (res != FR_OK) break;
000046  2f00              CMP      r7,#0
000048  d000              BEQ      |L45.76|
00004a  e00c              B        |L45.102|
                  |L45.76|
;;;616    			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
00004c  6920              LDR      r0,[r4,#0x10]
00004e  1c40              ADDS     r0,r0,#1
000050  2800              CMP      r0,#0
000052  d004              BEQ      |L45.94|
;;;617    				fs->free_clust++;
000054  6920              LDR      r0,[r4,#0x10]
000056  1c40              ADDS     r0,r0,#1
000058  6120              STR      r0,[r4,#0x10]
;;;618    				fs->fsi_flag = 1;
00005a  2001              MOVS     r0,#1
00005c  7160              STRB     r0,[r4,#5]
                  |L45.94|
;;;619    			}
;;;620    			clst = nxt;	/* Next cluster */
00005e  462e              MOV      r6,r5
                  |L45.96|
000060  69e0              LDR      r0,[r4,#0x1c]         ;609
000062  42b0              CMP      r0,r6                 ;609
000064  d8d8              BHI      |L45.24|
                  |L45.102|
000066  bf00              NOP                            ;611
                  |L45.104|
;;;621    		}
;;;622    	}
;;;623    
;;;624    	return res;
000068  4638              MOV      r0,r7
;;;625    }
00006a  bdf8              POP      {r3-r7,pc}
;;;626    #endif
                          ENDP


                          AREA ||i.sync||, CODE, READONLY, ALIGN=1

                  sync PROC
;;;450    static
;;;451    FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
000000  b570              PUSH     {r4-r6,lr}
;;;452    	FATFS *fs	/* File system object */
;;;453    )
;;;454    {
000002  4604              MOV      r4,r0
;;;455    	FRESULT res;
;;;456    
;;;457    
;;;458    	res = move_window(fs, 0);
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       move_window
00000c  4605              MOV      r5,r0
;;;459    	if (res == FR_OK) {
00000e  2d00              CMP      r5,#0
000010  d17e              BNE      |L46.272|
;;;460    		/* Update FSInfo sector if needed */
;;;461    		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
000012  7820              LDRB     r0,[r4,#0]
000014  2803              CMP      r0,#3
000016  d17f              BNE      |L46.280|
000018  7960              LDRB     r0,[r4,#5]
00001a  2800              CMP      r0,#0
00001c  d07c              BEQ      |L46.280|
;;;462    			fs->winsect = 0;
00001e  2000              MOVS     r0,#0
000020  6320              STR      r0,[r4,#0x30]
;;;463    			mem_set(fs->win, 0, 512);
000022  2201              MOVS     r2,#1
000024  0252              LSLS     r2,r2,#9
000026  2100              MOVS     r1,#0
000028  4620              MOV      r0,r4
00002a  3034              ADDS     r0,r0,#0x34
00002c  f7fffffe          BL       mem_set
;;;464    			ST_WORD(fs->win+BS_55AA, 0xAA55);
000030  2155              MOVS     r1,#0x55
000032  4620              MOV      r0,r4
000034  3034              ADDS     r0,r0,#0x34
000036  30ff              ADDS     r0,r0,#0xff
000038  30e1              ADDS     r0,r0,#0xe1
00003a  7781              STRB     r1,[r0,#0x1e]
00003c  21aa              MOVS     r1,#0xaa
00003e  4620              MOV      r0,r4
000040  3034              ADDS     r0,r0,#0x34
000042  30ff              ADDS     r0,r0,#0xff
000044  30ff              ADDS     r0,r0,#0xff
000046  7041              STRB     r1,[r0,#1]
;;;465    			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
000048  2152              MOVS     r1,#0x52
00004a  2034              MOVS     r0,#0x34
00004c  5501              STRB     r1,[r0,r4]
00004e  2035              MOVS     r0,#0x35
000050  5501              STRB     r1,[r0,r4]
000052  2161              MOVS     r1,#0x61
000054  2036              MOVS     r0,#0x36
000056  5501              STRB     r1,[r0,r4]
000058  2141              MOVS     r1,#0x41
00005a  2037              MOVS     r0,#0x37
00005c  5501              STRB     r1,[r0,r4]
;;;466    			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
00005e  2172              MOVS     r1,#0x72
000060  4620              MOV      r0,r4
000062  3034              ADDS     r0,r0,#0x34
000064  30ff              ADDS     r0,r0,#0xff
000066  30e1              ADDS     r0,r0,#0xe1
000068  7101              STRB     r1,[r0,#4]
00006a  4620              MOV      r0,r4
00006c  3034              ADDS     r0,r0,#0x34
00006e  30ff              ADDS     r0,r0,#0xff
000070  30e5              ADDS     r0,r0,#0xe5
000072  7041              STRB     r1,[r0,#1]
000074  2141              MOVS     r1,#0x41
000076  4620              MOV      r0,r4
000078  3034              ADDS     r0,r0,#0x34
00007a  30ff              ADDS     r0,r0,#0xff
00007c  30e5              ADDS     r0,r0,#0xe5
00007e  7081              STRB     r1,[r0,#2]
000080  2161              MOVS     r1,#0x61
000082  4620              MOV      r0,r4
000084  3034              ADDS     r0,r0,#0x34
000086  30ff              ADDS     r0,r0,#0xff
000088  30e5              ADDS     r0,r0,#0xe5
00008a  70c1              STRB     r1,[r0,#3]
;;;467    			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
00008c  7c21              LDRB     r1,[r4,#0x10]
00008e  4620              MOV      r0,r4
000090  3034              ADDS     r0,r0,#0x34
000092  30ff              ADDS     r0,r0,#0xff
000094  30e1              ADDS     r0,r0,#0xe1
000096  7201              STRB     r1,[r0,#8]
000098  8a20              LDRH     r0,[r4,#0x10]
00009a  0400              LSLS     r0,r0,#16
00009c  0e01              LSRS     r1,r0,#24
00009e  4620              MOV      r0,r4
0000a0  3034              ADDS     r0,r0,#0x34
0000a2  30ff              ADDS     r0,r0,#0xff
0000a4  30e9              ADDS     r0,r0,#0xe9
0000a6  7041              STRB     r1,[r0,#1]
0000a8  6920              LDR      r0,[r4,#0x10]
0000aa  0200              LSLS     r0,r0,#8
0000ac  0e01              LSRS     r1,r0,#24
0000ae  4620              MOV      r0,r4
0000b0  3034              ADDS     r0,r0,#0x34
0000b2  30ff              ADDS     r0,r0,#0xff
0000b4  30e9              ADDS     r0,r0,#0xe9
0000b6  7081              STRB     r1,[r0,#2]
0000b8  6920              LDR      r0,[r4,#0x10]
0000ba  0e01              LSRS     r1,r0,#24
0000bc  4620              MOV      r0,r4
0000be  3034              ADDS     r0,r0,#0x34
0000c0  30ff              ADDS     r0,r0,#0xff
0000c2  30e9              ADDS     r0,r0,#0xe9
0000c4  70c1              STRB     r1,[r0,#3]
;;;468    			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
0000c6  7b21              LDRB     r1,[r4,#0xc]
0000c8  4620              MOV      r0,r4
0000ca  3034              ADDS     r0,r0,#0x34
0000cc  30ff              ADDS     r0,r0,#0xff
0000ce  30e1              ADDS     r0,r0,#0xe1
0000d0  7301              STRB     r1,[r0,#0xc]
0000d2  89a0              LDRH     r0,[r4,#0xc]
0000d4  0400              LSLS     r0,r0,#16
0000d6  0e01              LSRS     r1,r0,#24
0000d8  4620              MOV      r0,r4
0000da  3034              ADDS     r0,r0,#0x34
0000dc  30ff              ADDS     r0,r0,#0xff
0000de  30ed              ADDS     r0,r0,#0xed
0000e0  7041              STRB     r1,[r0,#1]
0000e2  68e0              LDR      r0,[r4,#0xc]
0000e4  0200              LSLS     r0,r0,#8
0000e6  0e01              LSRS     r1,r0,#24
0000e8  4620              MOV      r0,r4
0000ea  3034              ADDS     r0,r0,#0x34
0000ec  30ff              ADDS     r0,r0,#0xff
0000ee  30ed              ADDS     r0,r0,#0xed
0000f0  7081              STRB     r1,[r0,#2]
0000f2  68e0              LDR      r0,[r4,#0xc]
0000f4  0e01              LSRS     r1,r0,#24
0000f6  4620              MOV      r0,r4
0000f8  3034              ADDS     r0,r0,#0x34
0000fa  30ff              ADDS     r0,r0,#0xff
0000fc  30ed              ADDS     r0,r0,#0xed
0000fe  70c1              STRB     r1,[r0,#3]
;;;469    			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
000100  7860              LDRB     r0,[r4,#1]
000102  2301              MOVS     r3,#1
000104  4621              MOV      r1,r4
000106  3134              ADDS     r1,r1,#0x34
000108  6962              LDR      r2,[r4,#0x14]
00010a  f7fffffe          BL       disk_write
;;;470    			fs->fsi_flag = 0;
00010e  e001              B        |L46.276|
                  |L46.272|
000110  e00a              B        |L46.296|
000112  e001              B        |L46.280|
                  |L46.276|
000114  2000              MOVS     r0,#0
000116  7160              STRB     r0,[r4,#5]
                  |L46.280|
;;;471    		}
;;;472    		/* Make sure that no pending write process in the physical drive */
;;;473    		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
000118  7860              LDRB     r0,[r4,#1]
00011a  2200              MOVS     r2,#0
00011c  4611              MOV      r1,r2
00011e  f7fffffe          BL       disk_ioctl
000122  2800              CMP      r0,#0
000124  d000              BEQ      |L46.296|
;;;474    			res = FR_DISK_ERR;
000126  2501              MOVS     r5,#1
                  |L46.296|
;;;475    	}
;;;476    
;;;477    	return res;
000128  4628              MOV      r0,r5
;;;478    }
00012a  bd70              POP      {r4-r6,pc}
;;;479    #endif
                          ENDP


                          AREA ||i.validate||, CODE, READONLY, ALIGN=1

                  validate PROC
;;;1819   static
;;;1820   FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
000000  b570              PUSH     {r4-r6,lr}
;;;1821   	FATFS *fs,		/* Pointer to the file system object */
;;;1822   	WORD id			/* Member id of the target object to be checked */
;;;1823   )
;;;1824   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1825   	if (!fs || !fs->fs_type || fs->id != id)
000006  2c00              CMP      r4,#0
000008  d005              BEQ      |L47.22|
00000a  7820              LDRB     r0,[r4,#0]
00000c  2800              CMP      r0,#0
00000e  d002              BEQ      |L47.22|
000010  88e0              LDRH     r0,[r4,#6]
000012  42a8              CMP      r0,r5
000014  d001              BEQ      |L47.26|
                  |L47.22|
;;;1826   		return FR_INVALID_OBJECT;
000016  2009              MOVS     r0,#9
                  |L47.24|
;;;1827   
;;;1828   	ENTER_FF(fs);		/* Lock file system */
;;;1829   
;;;1830   	if (disk_status(fs->drv) & STA_NOINIT)
;;;1831   		return FR_NOT_READY;
;;;1832   
;;;1833   	return FR_OK;
;;;1834   }
000018  bd70              POP      {r4-r6,pc}
                  |L47.26|
00001a  7860              LDRB     r0,[r4,#1]            ;1830
00001c  f7fffffe          BL       disk_status
000020  07c0              LSLS     r0,r0,#31             ;1830
000022  0fc0              LSRS     r0,r0,#31             ;1830
000024  2800              CMP      r0,#0                 ;1830
000026  d001              BEQ      |L47.44|
000028  2003              MOVS     r0,#3                 ;1831
00002a  e7f5              B        |L47.24|
                  |L47.44|
00002c  2000              MOVS     r0,#0                 ;1833
00002e  e7f3              B        |L47.24|
;;;1835   
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  excvt
000000  809a90b6          DCB      0x80,0x9a,0x90,0xb6
000004  8eb78f80          DCB      0x8e,0xb7,0x8f,0x80
000008  d2d3d4d8          DCB      0xd2,0xd3,0xd4,0xd8
00000c  d7de8e8f          DCB      0xd7,0xde,0x8e,0x8f
000010  909292e2          DCB      0x90,0x92,0x92,0xe2
000014  99e3eaeb          DCB      0x99,0xe3,0xea,0xeb
000018  59999a9d          DCB      0x59,0x99,0x9a,0x9d
00001c  9c9d9e9f          DCB      0x9c,0x9d,0x9e,0x9f
000020  b5d6e0e9          DCB      0xb5,0xd6,0xe0,0xe9
000024  a5a5a6a7          DCB      0xa5,0xa5,0xa6,0xa7
000028  a8a9aaab          DCB      0xa8,0xa9,0xaa,0xab
00002c  ac21aeaf          DCB      0xac,0x21,0xae,0xaf
000030  b0b1b2b3          DCB      0xb0,0xb1,0xb2,0xb3
000034  b4b5b6b7          DCB      0xb4,0xb5,0xb6,0xb7
000038  b8b9babb          DCB      0xb8,0xb9,0xba,0xbb
00003c  bcbdbebf          DCB      0xbc,0xbd,0xbe,0xbf
000040  c0c1c2c3          DCB      0xc0,0xc1,0xc2,0xc3
000044  c4c5c7c7          DCB      0xc4,0xc5,0xc7,0xc7
000048  c8c9cacb          DCB      0xc8,0xc9,0xca,0xcb
00004c  cccdcecf          DCB      0xcc,0xcd,0xce,0xcf
000050  d0d1d2d3          DCB      0xd0,0xd1,0xd2,0xd3
000054  d4d5d6d7          DCB      0xd4,0xd5,0xd6,0xd7
000058  d8d9dadb          DCB      0xd8,0xd9,0xda,0xdb
00005c  dcdddedf          DCB      0xdc,0xdd,0xde,0xdf
000060  e0e1e2e3          DCB      0xe0,0xe1,0xe2,0xe3
000064  e5e5e6e7          DCB      0xe5,0xe5,0xe6,0xe7
000068  e7e9eaeb          DCB      0xe7,0xe9,0xea,0xeb
00006c  ededeeef          DCB      0xed,0xed,0xee,0xef
000070  f0f1f2f3          DCB      0xf0,0xf1,0xf2,0xf3
000074  f4f5f6f7          DCB      0xf4,0xf5,0xf6,0xf7
000078  f8f9fafb          DCB      0xf8,0xf9,0xfa,0xfb
00007c  fcfdfeff          DCB      0xfc,0xfd,0xfe,0xff
                  vst
000080  04000200          DCW      0x0400,0x0200
000084  01000080          DCW      0x0100,0x0080
000088  00400020          DCW      0x0040,0x0020
00008c  00100008          DCW      0x0010,0x0008
000090  00040002          DCW      0x0004,0x0002
000094  0000              DCW      0x0000
                  ||cst||
000096  8000              DCW      0x8000
000098  40002000          DCW      0x4000,0x2000
00009c  10000800          DCW      0x1000,0x0800
0000a0  40002000          DCW      0x4000,0x2000
0000a4  10000800          DCW      0x1000,0x0800
0000a8  04000200          DCW      0x0400,0x0200

                          AREA ||.data||, DATA, ALIGN=2

                  Fsid
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  FatFs
                          DCD      0x00000000
                  Drive
000008  00                DCB      0x00
