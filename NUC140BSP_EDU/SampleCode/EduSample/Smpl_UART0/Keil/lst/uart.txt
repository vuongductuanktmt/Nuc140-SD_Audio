; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC1xx\Include -I..\..\..\..\Library\Device\Nuvoton\NUC1xx\Source -I..\..\..\..\Library\ -I..\..\..\..\Library\NUC1xx\Include -I..\..\..\..\Library\NUC1xx-LB_002\Include -IF:\Keil\ARM\RV31\INC -IF:\Keil\ARM\CMSIS\Include -IF:\Keil\ARM\INC\Nuvoton\NUC1xx -D__UVISION_VERSION=524 --omf_browse=.\obj\uart.crf ..\..\..\..\Library\NUC1xx\Source\UART.c]
                          THUMB

                          AREA ||i.BaudRateCalculator||, CODE, READONLY, ALIGN=2

                  BaudRateCalculator PROC
;;;91     
;;;92     static void BaudRateCalculator(uint32_t clk, uint32_t baudRate, E_UART_PORT u32Port)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;93     {
000002  b082              SUB      sp,sp,#8
000004  4617              MOV      r7,r2
;;;94       	int32_t tmp;
;;;95     	int32_t div;
;;;96       
;;;97       	UART_T * tUART;
;;;98     	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000006  4831              LDR      r0,|L1.204|
000008  183c              ADDS     r4,r7,r0
;;;99     
;;;100    	if(((clk / baudRate)%16)<3)	      /* Source Clock mod 16 <3 => Using Divider X =16 (MODE#0) */ 
00000a  9903              LDR      r1,[sp,#0xc]
00000c  9802              LDR      r0,[sp,#8]
00000e  f7fffffe          BL       __aeabi_uidivmod
000012  0700              LSLS     r0,r0,#28
000014  0f00              LSRS     r0,r0,#28
000016  2803              CMP      r0,#3
000018  d20f              BCS      |L1.58|
;;;101    	{								  
;;;102    		tUART->BAUD.DIV_X_EN = 0;
00001a  6a60              LDR      r0,[r4,#0x24]
00001c  2101              MOVS     r1,#1
00001e  0749              LSLS     r1,r1,#29
000020  4388              BICS     r0,r0,r1
000022  6260              STR      r0,[r4,#0x24]
;;;103    	    tUART->BAUD.DIV_X_ONE   = 0;
000024  6a60              LDR      r0,[r4,#0x24]
000026  1049              ASRS     r1,r1,#1
000028  4388              BICS     r0,r0,r1
00002a  6260              STR      r0,[r4,#0x24]
;;;104    		tmp = clk / baudRate/16  -2;
00002c  9903              LDR      r1,[sp,#0xc]
00002e  9802              LDR      r0,[sp,#8]
000030  f7fffffe          BL       __aeabi_uidivmod
000034  0900              LSRS     r0,r0,#4
000036  1e86              SUBS     r6,r0,#2
000038  e040              B        |L1.188|
                  |L1.58|
;;;105    	}
;;;106    	else							  /* Source Clock mod 16 >3 => Up 5% Error BaudRate */
;;;107    	{
;;;108    	    tUART->BAUD.DIV_X_EN = 1;			  /* Try to Set Divider X = 1 (MODE#2)*/
00003a  6a60              LDR      r0,[r4,#0x24]
00003c  2101              MOVS     r1,#1
00003e  0749              LSLS     r1,r1,#29
000040  4388              BICS     r0,r0,r1
000042  1840              ADDS     r0,r0,r1
000044  6260              STR      r0,[r4,#0x24]
;;;109    	    tUART->BAUD.DIV_X_ONE   = 1;
000046  6a60              LDR      r0,[r4,#0x24]
000048  1049              ASRS     r1,r1,#1
00004a  4388              BICS     r0,r0,r1
00004c  1840              ADDS     r0,r0,r1
00004e  6260              STR      r0,[r4,#0x24]
;;;110    		tmp = clk / baudRate  -2;
000050  9903              LDR      r1,[sp,#0xc]
000052  9802              LDR      r0,[sp,#8]
000054  f7fffffe          BL       __aeabi_uidivmod
000058  1e86              SUBS     r6,r0,#2
;;;111    
;;;112    		if(tmp > 0xFFFF)			  /* If Divider > Range  */
00005a  481d              LDR      r0,|L1.208|
00005c  4286              CMP      r6,r0
00005e  dd2d              BLE      |L1.188|
;;;113    		{
;;;114    			tUART->BAUD.DIV_X_EN = 1;		  /* Try to Set Divider X up 10 (MODE#1) */
000060  6a60              LDR      r0,[r4,#0x24]
000062  2101              MOVS     r1,#1
000064  0749              LSLS     r1,r1,#29
000066  4388              BICS     r0,r0,r1
000068  1840              ADDS     r0,r0,r1
00006a  6260              STR      r0,[r4,#0x24]
;;;115    			tUART->BAUD.DIV_X_ONE   = 0;
00006c  6a60              LDR      r0,[r4,#0x24]
00006e  1049              ASRS     r1,r1,#1
000070  4388              BICS     r0,r0,r1
000072  6260              STR      r0,[r4,#0x24]
;;;116    
;;;117    			for(div = 8; div <16;div++)
000074  2508              MOVS     r5,#8
000076  e01e              B        |L1.182|
                  |L1.120|
;;;118    			{
;;;119    				if(((clk / baudRate)%(div+1))<3)
000078  9903              LDR      r1,[sp,#0xc]
00007a  9802              LDR      r0,[sp,#8]
00007c  f7fffffe          BL       __aeabi_uidivmod
000080  1c69              ADDS     r1,r5,#1
000082  9001              STR      r0,[sp,#4]
000084  f7fffffe          BL       __aeabi_uidivmod
000088  2903              CMP      r1,#3
00008a  d213              BCS      |L1.180|
;;;120    				{
;;;121    					tUART->BAUD.DIVIDER_X   = div;
00008c  6a60              LDR      r0,[r4,#0x24]
00008e  210f              MOVS     r1,#0xf
000090  0609              LSLS     r1,r1,#24
000092  4388              BICS     r0,r0,r1
000094  0629              LSLS     r1,r5,#24
000096  220f              MOVS     r2,#0xf
000098  0612              LSLS     r2,r2,#24
00009a  4011              ANDS     r1,r1,r2
00009c  4308              ORRS     r0,r0,r1
00009e  6260              STR      r0,[r4,#0x24]
;;;122    					tmp = clk / baudRate / (div+1) -2;
0000a0  9903              LDR      r1,[sp,#0xc]
0000a2  9802              LDR      r0,[sp,#8]
0000a4  f7fffffe          BL       __aeabi_uidivmod
0000a8  1c69              ADDS     r1,r5,#1
0000aa  9001              STR      r0,[sp,#4]
0000ac  f7fffffe          BL       __aeabi_uidivmod
0000b0  1e86              SUBS     r6,r0,#2
;;;123    					break;
0000b2  e002              B        |L1.186|
                  |L1.180|
0000b4  1c6d              ADDS     r5,r5,#1              ;117
                  |L1.182|
0000b6  2d10              CMP      r5,#0x10              ;117
0000b8  dbde              BLT      |L1.120|
                  |L1.186|
0000ba  bf00              NOP      
                  |L1.188|
;;;124    				}
;;;125    			}
;;;126    		}
;;;127    	}
;;;128    
;;;129    	tUART->BAUD.BRD = tmp; 
0000bc  6a60              LDR      r0,[r4,#0x24]
0000be  0c00              LSRS     r0,r0,#16
0000c0  0400              LSLS     r0,r0,#16
0000c2  b2b1              UXTH     r1,r6
0000c4  4308              ORRS     r0,r0,r1
0000c6  6260              STR      r0,[r4,#0x24]
;;;130    
;;;131    }
0000c8  b005              ADD      sp,sp,#0x14
0000ca  bdf0              POP      {r4-r7,pc}
;;;132    
                          ENDP

                  |L1.204|
                          DCD      0x40050000
                  |L1.208|
                          DCD      0x0000ffff

                          AREA ||i.DrvUART_ClearIntFlag||, CODE, READONLY, ALIGN=2

                  DrvUART_ClearIntFlag PROC
;;;530    /*---------------------------------------------------------------------------------------------------------*/
;;;531    uint32_t DrvUART_ClearIntFlag(E_UART_PORT u32Port,uint32_t u32InterruptFlag)
000000  b510              PUSH     {r4,lr}
;;;532    {
000002  4603              MOV      r3,r0
000004  460a              MOV      r2,r1
;;;533    	UART_T * tUART;
;;;534    
;;;535    	tUART = (UART_T *)((uint32_t)UART0 + u32Port); 
000006  4825              LDR      r0,|L2.156|
000008  1819              ADDS     r1,r3,r0
;;;536    
;;;537        if((u32InterruptFlag & DRVUART_RDAINT_FLAG) ||
00000a  1580              ASRS     r0,r0,#22
00000c  4010              ANDS     r0,r0,r2
00000e  2800              CMP      r0,#0
000010  d109              BNE      |L2.38|
;;;538           (u32InterruptFlag & DRVUART_THREINT_FLAG)||
000012  2001              MOVS     r0,#1
000014  0240              LSLS     r0,r0,#9
000016  4010              ANDS     r0,r0,r2
000018  2800              CMP      r0,#0
00001a  d104              BNE      |L2.38|
;;;539           (u32InterruptFlag & DRVUART_TOUTINT_FLAG))
00001c  2001              MOVS     r0,#1
00001e  0300              LSLS     r0,r0,#12
000020  4010              ANDS     r0,r0,r2
000022  2800              CMP      r0,#0
000024  d001              BEQ      |L2.42|
                  |L2.38|
;;;540            return E_DRVUART_ARGUMENT;
000026  481e              LDR      r0,|L2.160|
                  |L2.40|
;;;541    
;;;542    	if(u32InterruptFlag & DRVUART_RLSINT)			        	/* clear Receive Line Status Interrupt */	   
;;;543    	{
;;;544    		tUART->FSR.BIF = 1;
;;;545    		tUART->FSR.FEF = 1;
;;;546    		tUART->FSR.PEF = 1;
;;;547    	}
;;;548    
;;;549    	if(u32InterruptFlag & DRVUART_MOSINT_FLAG)				    /* clear Modem Interrupt */	   
;;;550    		tUART->MSR.DCTSF = 1;
;;;551    
;;;552    
;;;553      	if(u32InterruptFlag & DRVUART_LININT_FLAG)      			/* clear LIN break Interrupt */	   
;;;554    		tUART->ISR.LIN_RX_BREAK_IF = 1;
;;;555    
;;;556    	if(u32InterruptFlag & DRVUART_BUFERRINT_FLAG)       		/* clear Buffer ErrorInterrupt */	   
;;;557    	{
;;;558    		tUART->FSR.TX_OVER_IF = 1;
;;;559    		tUART->FSR.RX_OVER_IF = 1;
;;;560    	}
;;;561    	return E_SUCCESS;
;;;562    }
000028  bd10              POP      {r4,pc}
                  |L2.42|
00002a  2004              MOVS     r0,#4                 ;542
00002c  4010              ANDS     r0,r0,r2              ;542
00002e  2800              CMP      r0,#0                 ;542
000030  d00e              BEQ      |L2.80|
000032  6988              LDR      r0,[r1,#0x18]         ;544
000034  2440              MOVS     r4,#0x40              ;544
000036  43a0              BICS     r0,r0,r4              ;544
000038  3040              ADDS     r0,r0,#0x40           ;544
00003a  6188              STR      r0,[r1,#0x18]         ;544
00003c  6988              LDR      r0,[r1,#0x18]         ;545
00003e  2420              MOVS     r4,#0x20              ;545
000040  43a0              BICS     r0,r0,r4              ;545
000042  3020              ADDS     r0,r0,#0x20           ;545
000044  6188              STR      r0,[r1,#0x18]         ;545
000046  6988              LDR      r0,[r1,#0x18]         ;546
000048  2410              MOVS     r4,#0x10              ;546
00004a  43a0              BICS     r0,r0,r4              ;546
00004c  3010              ADDS     r0,r0,#0x10           ;546
00004e  6188              STR      r0,[r1,#0x18]         ;546
                  |L2.80|
000050  2001              MOVS     r0,#1                 ;549
000052  02c0              LSLS     r0,r0,#11             ;549
000054  4010              ANDS     r0,r0,r2              ;549
000056  2800              CMP      r0,#0                 ;549
000058  d004              BEQ      |L2.100|
00005a  6948              LDR      r0,[r1,#0x14]         ;550
00005c  0840              LSRS     r0,r0,#1              ;550
00005e  0040              LSLS     r0,r0,#1              ;550
000060  1c40              ADDS     r0,r0,#1              ;550
000062  6148              STR      r0,[r1,#0x14]         ;550
                  |L2.100|
000064  2001              MOVS     r0,#1                 ;553
000066  03c0              LSLS     r0,r0,#15             ;553
000068  4010              ANDS     r0,r0,r2              ;553
00006a  2800              CMP      r0,#0                 ;553
00006c  d004              BEQ      |L2.120|
00006e  69c8              LDR      r0,[r1,#0x1c]         ;554
000070  2480              MOVS     r4,#0x80              ;554
000072  43a0              BICS     r0,r0,r4              ;554
000074  3080              ADDS     r0,r0,#0x80           ;554
000076  61c8              STR      r0,[r1,#0x1c]         ;554
                  |L2.120|
000078  2001              MOVS     r0,#1                 ;556
00007a  0340              LSLS     r0,r0,#13             ;556
00007c  4010              ANDS     r0,r0,r2              ;556
00007e  2800              CMP      r0,#0                 ;556
000080  d00a              BEQ      |L2.152|
000082  6988              LDR      r0,[r1,#0x18]         ;558
000084  2401              MOVS     r4,#1                 ;558
000086  0624              LSLS     r4,r4,#24             ;558
000088  43a0              BICS     r0,r0,r4              ;558
00008a  1900              ADDS     r0,r0,r4              ;558
00008c  6188              STR      r0,[r1,#0x18]         ;558
00008e  6988              LDR      r0,[r1,#0x18]         ;559
000090  0840              LSRS     r0,r0,#1              ;559
000092  0040              LSLS     r0,r0,#1              ;559
000094  1c40              ADDS     r0,r0,#1              ;559
000096  6188              STR      r0,[r1,#0x18]         ;559
                  |L2.152|
000098  2000              MOVS     r0,#0                 ;561
00009a  e7c5              B        |L2.40|
;;;563    
                          ENDP

                  |L2.156|
                          DCD      0x40050000
                  |L2.160|
                          DCD      0xffff9807

                          AREA ||i.DrvUART_Close||, CODE, READONLY, ALIGN=2

                  DrvUART_Close PROC
;;;380    
;;;381    void DrvUART_Close(E_UART_PORT u32Port)
000000  b510              PUSH     {r4,lr}
;;;382    {
000002  4604              MOV      r4,r0
;;;383    	if(u32Port == UART_PORT1)	
000004  2001              MOVS     r0,#1
000006  0500              LSLS     r0,r0,#20
000008  4284              CMP      r4,r0
00000a  d114              BNE      |L3.54|
;;;384    	{
;;;385    		while(!UART1->FSR.TE_FLAG);
00000c  bf00              NOP      
                  |L3.14|
00000e  4821              LDR      r0,|L3.148|
000010  6980              LDR      r0,[r0,#0x18]
000012  00c0              LSLS     r0,r0,#3
000014  0fc0              LSRS     r0,r0,#31
000016  2800              CMP      r0,#0
000018  d0f9              BEQ      |L3.14|
;;;386    		SYSCLK->APBCLK.UART1_EN = 0;
00001a  481f              LDR      r0,|L3.152|
00001c  6880              LDR      r0,[r0,#8]
00001e  2101              MOVS     r1,#1
000020  0449              LSLS     r1,r1,#17
000022  4388              BICS     r0,r0,r1
000024  491c              LDR      r1,|L3.152|
000026  6088              STR      r0,[r1,#8]
;;;387    		g_pfnUART1callback = NULL;
000028  2000              MOVS     r0,#0
00002a  491c              LDR      r1,|L3.156|
00002c  6008              STR      r0,[r1,#0]  ; g_pfnUART1callback
;;;388            NVIC_DisableIRQ (UART1_IRQn); 
00002e  200d              MOVS     r0,#0xd
000030  f7fffffe          BL       NVIC_DisableIRQ
000034  e02c              B        |L3.144|
                  |L3.54|
;;;389    	}
;;;390    	else if(u32Port == UART_PORT2)	
000036  2041              MOVS     r0,#0x41
000038  0380              LSLS     r0,r0,#14
00003a  4284              CMP      r4,r0
00003c  d114              BNE      |L3.104|
;;;391    	{
;;;392    		while(!UART2->FSR.TE_FLAG);
00003e  bf00              NOP      
                  |L3.64|
000040  4817              LDR      r0,|L3.160|
000042  6980              LDR      r0,[r0,#0x18]
000044  00c0              LSLS     r0,r0,#3
000046  0fc0              LSRS     r0,r0,#31
000048  2800              CMP      r0,#0
00004a  d0f9              BEQ      |L3.64|
;;;393    		SYSCLK->APBCLK.UART2_EN = 0;
00004c  4812              LDR      r0,|L3.152|
00004e  6880              LDR      r0,[r0,#8]
000050  2101              MOVS     r1,#1
000052  0489              LSLS     r1,r1,#18
000054  4388              BICS     r0,r0,r1
000056  4910              LDR      r1,|L3.152|
000058  6088              STR      r0,[r1,#8]
;;;394    		g_pfnUART2callback = NULL;
00005a  2000              MOVS     r0,#0
00005c  4911              LDR      r1,|L3.164|
00005e  6008              STR      r0,[r1,#0]  ; g_pfnUART2callback
;;;395            NVIC_DisableIRQ (UART0_IRQn); 
000060  200c              MOVS     r0,#0xc
000062  f7fffffe          BL       NVIC_DisableIRQ
000066  e013              B        |L3.144|
                  |L3.104|
;;;396    	}
;;;397    	else
;;;398    	{
;;;399    		while(!UART0->FSR.TE_FLAG);
000068  bf00              NOP      
                  |L3.106|
00006a  480f              LDR      r0,|L3.168|
00006c  6980              LDR      r0,[r0,#0x18]
00006e  00c0              LSLS     r0,r0,#3
000070  0fc0              LSRS     r0,r0,#31
000072  2800              CMP      r0,#0
000074  d0f9              BEQ      |L3.106|
;;;400    		SYSCLK->APBCLK.UART0_EN = 0;
000076  4808              LDR      r0,|L3.152|
000078  6880              LDR      r0,[r0,#8]
00007a  2101              MOVS     r1,#1
00007c  0409              LSLS     r1,r1,#16
00007e  4388              BICS     r0,r0,r1
000080  4905              LDR      r1,|L3.152|
000082  6088              STR      r0,[r1,#8]
;;;401    		g_pfnUART0callback = NULL;
000084  2000              MOVS     r0,#0
000086  4909              LDR      r1,|L3.172|
000088  6008              STR      r0,[r1,#0]  ; g_pfnUART0callback
;;;402            NVIC_DisableIRQ(UART0_IRQn);      
00008a  200c              MOVS     r0,#0xc
00008c  f7fffffe          BL       NVIC_DisableIRQ
                  |L3.144|
;;;403    	}
;;;404    }
000090  bd10              POP      {r4,pc}
;;;405    
                          ENDP

000092  0000              DCW      0x0000
                  |L3.148|
                          DCD      0x40150000
                  |L3.152|
                          DCD      0x50000200
                  |L3.156|
                          DCD      g_pfnUART1callback
                  |L3.160|
                          DCD      0x40154000
                  |L3.164|
                          DCD      g_pfnUART2callback
                  |L3.168|
                          DCD      0x40050000
                  |L3.172|
                          DCD      g_pfnUART0callback

                          AREA ||i.DrvUART_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvUART_DisableInt PROC
;;;476    /*---------------------------------------------------------------------------------------------------------*/
;;;477    void DrvUART_DisableInt(E_UART_PORT u32Port,uint32_t u32InterruptFlag)
000000  b570              PUSH     {r4-r6,lr}
;;;478    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;479    	if(u32Port == UART_PORT0)			   
000006  2c00              CMP      r4,#0
000008  d106              BNE      |L4.24|
;;;480    	{
;;;481    		outpw(&UART0->IER + u32Port,inpw(&UART0->IER + u32Port) &~u32InterruptFlag);	   /* Disable INT  */
00000a  4825              LDR      r0,|L4.160|
00000c  00a1              LSLS     r1,r4,#2
00000e  5840              LDR      r0,[r0,r1]
000010  43a8              BICS     r0,r0,r5
000012  4923              LDR      r1,|L4.160|
000014  00a2              LSLS     r2,r4,#2
000016  5088              STR      r0,[r1,r2]
                  |L4.24|
;;;482    	}
;;;483    	
;;;484    	if(u32InterruptFlag & DRVUART_TOUTINT)			  							 /* Disable Counter Enable */
000018  2010              MOVS     r0,#0x10
00001a  4028              ANDS     r0,r0,r5
00001c  2800              CMP      r0,#0
00001e  d01b              BEQ      |L4.88|
;;;485    	{
;;;486    		if(u32Port == UART_PORT0)
000020  2c00              CMP      r4,#0
000022  d108              BNE      |L4.54|
;;;487    			UART0->IER.RTO_IEN = 0;
000024  481e              LDR      r0,|L4.160|
000026  1f00              SUBS     r0,r0,#4
000028  6840              LDR      r0,[r0,#4]
00002a  2110              MOVS     r1,#0x10
00002c  4388              BICS     r0,r0,r1
00002e  491c              LDR      r1,|L4.160|
000030  1f09              SUBS     r1,r1,#4
000032  6048              STR      r0,[r1,#4]
000034  e010              B        |L4.88|
                  |L4.54|
;;;488    		else if(u32Port == UART_PORT1)
000036  2001              MOVS     r0,#1
000038  0500              LSLS     r0,r0,#20
00003a  4284              CMP      r4,r0
00003c  d106              BNE      |L4.76|
;;;489    			UART1->IER.RTO_IEN = 0;
00003e  4819              LDR      r0,|L4.164|
000040  6840              LDR      r0,[r0,#4]
000042  2110              MOVS     r1,#0x10
000044  4388              BICS     r0,r0,r1
000046  4917              LDR      r1,|L4.164|
000048  6048              STR      r0,[r1,#4]
00004a  e005              B        |L4.88|
                  |L4.76|
;;;490    		else
;;;491    			UART2->IER.RTO_IEN = 0;
00004c  4816              LDR      r0,|L4.168|
00004e  6840              LDR      r0,[r0,#4]
000050  2110              MOVS     r1,#0x10
000052  4388              BICS     r0,r0,r1
000054  4914              LDR      r1,|L4.168|
000056  6048              STR      r0,[r1,#4]
                  |L4.88|
;;;492    			
;;;493    	}
;;;494    	
;;;495    	switch (u32Port)									   			 /* Disable Callback function and NVIC */
000058  2c00              CMP      r4,#0
00005a  d008              BEQ      |L4.110|
00005c  2001              MOVS     r0,#1
00005e  0500              LSLS     r0,r0,#20
000060  1a20              SUBS     r0,r4,r0
000062  d00b              BEQ      |L4.124|
000064  2101              MOVS     r1,#1
000066  0389              LSLS     r1,r1,#14
000068  1a40              SUBS     r0,r0,r1
00006a  d115              BNE      |L4.152|
00006c  e00d              B        |L4.138|
                  |L4.110|
;;;496        {
;;;497            case UART_PORT0:
;;;498    			g_pfnUART0callback = NULL;
00006e  2000              MOVS     r0,#0
000070  490e              LDR      r1,|L4.172|
000072  6008              STR      r0,[r1,#0]  ; g_pfnUART0callback
;;;499                NVIC_DisableIRQ(UART0_IRQn);   
000074  200c              MOVS     r0,#0xc
000076  f7fffffe          BL       NVIC_DisableIRQ
;;;500                break;
00007a  e00e              B        |L4.154|
                  |L4.124|
;;;501    
;;;502            case UART_PORT1:
;;;503    			g_pfnUART1callback = NULL;
00007c  2000              MOVS     r0,#0
00007e  490c              LDR      r1,|L4.176|
000080  6008              STR      r0,[r1,#0]  ; g_pfnUART1callback
;;;504               	NVIC_DisableIRQ(UART1_IRQn);    
000082  200d              MOVS     r0,#0xd
000084  f7fffffe          BL       NVIC_DisableIRQ
;;;505                break;
000088  e007              B        |L4.154|
                  |L4.138|
;;;506            
;;;507    		case UART_PORT2:
;;;508    			g_pfnUART2callback = NULL;
00008a  2000              MOVS     r0,#0
00008c  4909              LDR      r1,|L4.180|
00008e  6008              STR      r0,[r1,#0]  ; g_pfnUART2callback
;;;509               	NVIC_DisableIRQ(UART0_IRQn);    
000090  200c              MOVS     r0,#0xc
000092  f7fffffe          BL       NVIC_DisableIRQ
;;;510                break;
000096  e000              B        |L4.154|
                  |L4.152|
;;;511    
;;;512            default:
;;;513                break;
000098  bf00              NOP      
                  |L4.154|
00009a  bf00              NOP                            ;500
;;;514        }
;;;515    
;;;516    }
00009c  bd70              POP      {r4-r6,pc}
;;;517    
                          ENDP

00009e  0000              DCW      0x0000
                  |L4.160|
                          DCD      0x40050004
                  |L4.164|
                          DCD      0x40150000
                  |L4.168|
                          DCD      0x40154000
                  |L4.172|
                          DCD      g_pfnUART0callback
                  |L4.176|
                          DCD      g_pfnUART1callback
                  |L4.180|
                          DCD      g_pfnUART2callback

                          AREA ||i.DrvUART_DisablePDMA||, CODE, READONLY, ALIGN=2

                  DrvUART_DisablePDMA PROC
;;;738    /*---------------------------------------------------------------------------------------------------------*/
;;;739    void DrvUART_DisablePDMA(E_UART_PORT u32Port)
000000  2800              CMP      r0,#0
;;;740    {
;;;741    	
;;;742    	if(u32Port == UART_PORT0)
000002  d10e              BNE      |L5.34|
;;;743    	{
;;;744    		UART0->IER.DMA_TX_EN 	= 0;
000004  490f              LDR      r1,|L5.68|
000006  6849              LDR      r1,[r1,#4]
000008  2201              MOVS     r2,#1
00000a  0392              LSLS     r2,r2,#14
00000c  4391              BICS     r1,r1,r2
00000e  4a0d              LDR      r2,|L5.68|
000010  6051              STR      r1,[r2,#4]
;;;745    		UART0->IER.DMA_RX_EN	= 0;	
000012  4611              MOV      r1,r2
000014  6849              LDR      r1,[r1,#4]
000016  2201              MOVS     r2,#1
000018  03d2              LSLS     r2,r2,#15
00001a  4391              BICS     r1,r1,r2
00001c  4a09              LDR      r2,|L5.68|
00001e  6051              STR      r1,[r2,#4]
000020  e00f              B        |L5.66|
                  |L5.34|
;;;746    	}
;;;747    	else if(u32Port == UART_PORT1)
000022  2101              MOVS     r1,#1
000024  0509              LSLS     r1,r1,#20
000026  4288              CMP      r0,r1
000028  d10b              BNE      |L5.66|
;;;748    	{
;;;749    		UART1->IER.DMA_TX_EN 	= 0;
00002a  4907              LDR      r1,|L5.72|
00002c  6849              LDR      r1,[r1,#4]
00002e  1182              ASRS     r2,r0,#6
000030  4391              BICS     r1,r1,r2
000032  4a05              LDR      r2,|L5.72|
000034  6051              STR      r1,[r2,#4]
;;;750    		UART1->IER.DMA_RX_EN	= 0;
000036  4611              MOV      r1,r2
000038  6849              LDR      r1,[r1,#4]
00003a  1142              ASRS     r2,r0,#5
00003c  4391              BICS     r1,r1,r2
00003e  4a02              LDR      r2,|L5.72|
000040  6051              STR      r1,[r2,#4]
                  |L5.66|
;;;751    	}
;;;752    
;;;753    }
000042  4770              BX       lr
;;;754    
                          ENDP

                  |L5.68|
                          DCD      0x40050000
                  |L5.72|
                          DCD      0x40150000

                          AREA ||i.DrvUART_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvUART_EnableInt PROC
;;;421    /*---------------------------------------------------------------------------------------------------------*/
;;;422    void DrvUART_EnableInt(
000000  b5f8              PUSH     {r3-r7,lr}
;;;423    	E_UART_PORT   u32Port,
;;;424    	uint32_t  u32InterruptFlag,
;;;425    	PFN_DRVUART_CALLBACK pfncallback
;;;426    )
;;;427    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4617              MOV      r7,r2
;;;428    	UART_T * tUART;
;;;429        
;;;430    	tUART = (UART_T *)((uint32_t)UART0 + u32Port); 
000008  4839              LDR      r0,|L6.240|
00000a  1834              ADDS     r4,r6,r0
;;;431    
;;;432    	tUART->IER.RDA_IEN		=(u32InterruptFlag & DRVUART_RDAINT)?1:0 ;
00000c  6860              LDR      r0,[r4,#4]
00000e  0840              LSRS     r0,r0,#1
000010  0040              LSLS     r0,r0,#1
000012  07e9              LSLS     r1,r5,#31
000014  0fc9              LSRS     r1,r1,#31
000016  4308              ORRS     r0,r0,r1
000018  6060              STR      r0,[r4,#4]
;;;433    	tUART->IER.THRE_IEN		=(u32InterruptFlag & DRVUART_THREINT)?1:0;
00001a  6860              LDR      r0,[r4,#4]
00001c  2102              MOVS     r1,#2
00001e  4388              BICS     r0,r0,r1
000020  4029              ANDS     r1,r1,r5
000022  0849              LSRS     r1,r1,#1
000024  0049              LSLS     r1,r1,#1
000026  2202              MOVS     r2,#2
000028  4011              ANDS     r1,r1,r2
00002a  4308              ORRS     r0,r0,r1
00002c  6060              STR      r0,[r4,#4]
;;;434    	tUART->IER.RLS_IEN		=(u32InterruptFlag & DRVUART_RLSINT)?1:0;
00002e  6860              LDR      r0,[r4,#4]
000030  2104              MOVS     r1,#4
000032  4388              BICS     r0,r0,r1
000034  4029              ANDS     r1,r1,r5
000036  0889              LSRS     r1,r1,#2
000038  0089              LSLS     r1,r1,#2
00003a  2204              MOVS     r2,#4
00003c  4011              ANDS     r1,r1,r2
00003e  4308              ORRS     r0,r0,r1
000040  6060              STR      r0,[r4,#4]
;;;435    	tUART->IER.MODEM_IEN	=(u32InterruptFlag & DRVUART_MOSINT)?1:0;
000042  6860              LDR      r0,[r4,#4]
000044  2108              MOVS     r1,#8
000046  4388              BICS     r0,r0,r1
000048  4029              ANDS     r1,r1,r5
00004a  08c9              LSRS     r1,r1,#3
00004c  00c9              LSLS     r1,r1,#3
00004e  2208              MOVS     r2,#8
000050  4011              ANDS     r1,r1,r2
000052  4308              ORRS     r0,r0,r1
000054  6060              STR      r0,[r4,#4]
;;;436    		
;;;437    	tUART->IER.TIME_OUT_EN		=(u32InterruptFlag & DRVUART_TOUTINT)?1:0;   	/* Time-out count enable */
000056  6860              LDR      r0,[r4,#4]
000058  0211              LSLS     r1,r2,#8
00005a  4388              BICS     r0,r0,r1
00005c  2110              MOVS     r1,#0x10
00005e  4029              ANDS     r1,r1,r5
000060  0909              LSRS     r1,r1,#4
000062  02c9              LSLS     r1,r1,#11
000064  0212              LSLS     r2,r2,#8
000066  4011              ANDS     r1,r1,r2
000068  4308              ORRS     r0,r0,r1
00006a  6060              STR      r0,[r4,#4]
;;;438    	tUART->IER.RTO_IEN		=(u32InterruptFlag & DRVUART_TOUTINT)?1:0;		/* Time-out INT enable */
00006c  6860              LDR      r0,[r4,#4]
00006e  2110              MOVS     r1,#0x10
000070  4388              BICS     r0,r0,r1
000072  4029              ANDS     r1,r1,r5
000074  0909              LSRS     r1,r1,#4
000076  0109              LSLS     r1,r1,#4
000078  2210              MOVS     r2,#0x10
00007a  4011              ANDS     r1,r1,r2
00007c  4308              ORRS     r0,r0,r1
00007e  6060              STR      r0,[r4,#4]
;;;439    
;;;440    	tUART->IER.BUF_ERR_IEN	=(u32InterruptFlag & DRVUART_BUFERRINT)?1:0;
000080  6860              LDR      r0,[r4,#4]
000082  2120              MOVS     r1,#0x20
000084  4388              BICS     r0,r0,r1
000086  4029              ANDS     r1,r1,r5
000088  0949              LSRS     r1,r1,#5
00008a  0149              LSLS     r1,r1,#5
00008c  2220              MOVS     r2,#0x20
00008e  4011              ANDS     r1,r1,r2
000090  4308              ORRS     r0,r0,r1
000092  6060              STR      r0,[r4,#4]
;;;441    	tUART->IER.WAKE_EN		=(u32InterruptFlag & DRVUART_WAKEUPINT)?1:0;
000094  6860              LDR      r0,[r4,#4]
000096  2140              MOVS     r1,#0x40
000098  4388              BICS     r0,r0,r1
00009a  2180              MOVS     r1,#0x80
00009c  4029              ANDS     r1,r1,r5
00009e  09c9              LSRS     r1,r1,#7
0000a0  0189              LSLS     r1,r1,#6
0000a2  2240              MOVS     r2,#0x40
0000a4  4011              ANDS     r1,r1,r2
0000a6  4308              ORRS     r0,r0,r1
0000a8  6060              STR      r0,[r4,#4]
;;;442    	tUART->IER.LIN_RX_BRK_IEN=(u32InterruptFlag & DRVUART_LININT)?1:0;
0000aa  6860              LDR      r0,[r4,#4]
0000ac  0091              LSLS     r1,r2,#2
0000ae  4388              BICS     r0,r0,r1
0000b0  4029              ANDS     r1,r1,r5
0000b2  0a09              LSRS     r1,r1,#8
0000b4  0209              LSLS     r1,r1,#8
0000b6  0092              LSLS     r2,r2,#2
0000b8  4011              ANDS     r1,r1,r2
0000ba  4308              ORRS     r0,r0,r1
0000bc  6060              STR      r0,[r4,#4]
;;;443    
;;;444    
;;;445        if(u32Port == UART_PORT0)											   	/* Install Callback function */
0000be  2e00              CMP      r6,#0
0000c0  d105              BNE      |L6.206|
;;;446        {
;;;447    		g_pfnUART0callback = pfncallback;        
0000c2  480c              LDR      r0,|L6.244|
0000c4  6007              STR      r7,[r0,#0]  ; g_pfnUART0callback
;;;448    		NVIC_EnableIRQ(UART0_IRQn); 
0000c6  200c              MOVS     r0,#0xc
0000c8  f7fffffe          BL       NVIC_EnableIRQ
0000cc  e00e              B        |L6.236|
                  |L6.206|
;;;449        }
;;;450    	else if(u32Port == UART_PORT1)										   	/* Install Callback function */
0000ce  2001              MOVS     r0,#1
0000d0  0500              LSLS     r0,r0,#20
0000d2  4286              CMP      r6,r0
0000d4  d105              BNE      |L6.226|
;;;451    	{
;;;452    		g_pfnUART1callback = pfncallback;
0000d6  4808              LDR      r0,|L6.248|
0000d8  6007              STR      r7,[r0,#0]  ; g_pfnUART1callback
;;;453    		NVIC_EnableIRQ(UART1_IRQn); 
0000da  200d              MOVS     r0,#0xd
0000dc  f7fffffe          BL       NVIC_EnableIRQ
0000e0  e004              B        |L6.236|
                  |L6.226|
;;;454    	}
;;;455    	else															    	/* Install Callback function */
;;;456        {
;;;457    		g_pfnUART2callback = pfncallback;
0000e2  4806              LDR      r0,|L6.252|
0000e4  6007              STR      r7,[r0,#0]  ; g_pfnUART2callback
;;;458    		NVIC_EnableIRQ(UART0_IRQn); 
0000e6  200c              MOVS     r0,#0xc
0000e8  f7fffffe          BL       NVIC_EnableIRQ
                  |L6.236|
;;;459        }
;;;460    
;;;461    }
0000ec  bdf8              POP      {r3-r7,pc}
;;;462    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L6.240|
                          DCD      0x40050000
                  |L6.244|
                          DCD      g_pfnUART0callback
                  |L6.248|
                          DCD      g_pfnUART1callback
                  |L6.252|
                          DCD      g_pfnUART2callback

                          AREA ||i.DrvUART_EnablePDMA||, CODE, READONLY, ALIGN=2

                  DrvUART_EnablePDMA PROC
;;;710    /*---------------------------------------------------------------------------------------------------------*/
;;;711    void DrvUART_EnablePDMA(E_UART_PORT u32Port)
000000  2800              CMP      r0,#0
;;;712    {
;;;713    	
;;;714    	if(u32Port == UART_PORT0)
000002  d110              BNE      |L7.38|
;;;715    	{
;;;716    		UART0->IER.DMA_TX_EN 	= 1;
000004  4911              LDR      r1,|L7.76|
000006  6849              LDR      r1,[r1,#4]
000008  2201              MOVS     r2,#1
00000a  0392              LSLS     r2,r2,#14
00000c  4391              BICS     r1,r1,r2
00000e  1889              ADDS     r1,r1,r2
000010  4a0e              LDR      r2,|L7.76|
000012  6051              STR      r1,[r2,#4]
;;;717    		UART0->IER.DMA_RX_EN	= 1;	
000014  4611              MOV      r1,r2
000016  6849              LDR      r1,[r1,#4]
000018  2201              MOVS     r2,#1
00001a  03d2              LSLS     r2,r2,#15
00001c  4391              BICS     r1,r1,r2
00001e  1889              ADDS     r1,r1,r2
000020  4a0a              LDR      r2,|L7.76|
000022  6051              STR      r1,[r2,#4]
000024  e011              B        |L7.74|
                  |L7.38|
;;;718    	}
;;;719    	else if(u32Port == UART_PORT1)
000026  2101              MOVS     r1,#1
000028  0509              LSLS     r1,r1,#20
00002a  4288              CMP      r0,r1
00002c  d10d              BNE      |L7.74|
;;;720    	{
;;;721    		UART1->IER.DMA_TX_EN 	= 1;
00002e  4908              LDR      r1,|L7.80|
000030  6849              LDR      r1,[r1,#4]
000032  1182              ASRS     r2,r0,#6
000034  4391              BICS     r1,r1,r2
000036  1889              ADDS     r1,r1,r2
000038  4a05              LDR      r2,|L7.80|
00003a  6051              STR      r1,[r2,#4]
;;;722    		UART1->IER.DMA_RX_EN	= 1;
00003c  4611              MOV      r1,r2
00003e  6849              LDR      r1,[r1,#4]
000040  1142              ASRS     r2,r0,#5
000042  4391              BICS     r1,r1,r2
000044  1889              ADDS     r1,r1,r2
000046  4a02              LDR      r2,|L7.80|
000048  6051              STR      r1,[r2,#4]
                  |L7.74|
;;;723    	}
;;;724    
;;;725    }
00004a  4770              BX       lr
;;;726    
                          ENDP

                  |L7.76|
                          DCD      0x40050000
                  |L7.80|
                          DCD      0x40150000

                          AREA ||i.DrvUART_GetCTSInfo||, CODE, READONLY, ALIGN=2

                  DrvUART_GetCTSInfo PROC
;;;607    /*---------------------------------------------------------------------------------------------------------*/
;;;608    void DrvUART_GetCTSInfo(E_UART_PORT u32Port,uint8_t *pu8CTSValue,	uint8_t	*pu8CTSChangeState)
000000  b510              PUSH     {r4,lr}
;;;609    {
;;;610    	UART_T * tUART;
;;;611    
;;;612    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000002  4c05              LDR      r4,|L8.24|
000004  1903              ADDS     r3,r0,r4
;;;613    
;;;614     	*pu8CTSValue 		= tUART->MSR.CTS_ST;
000006  695c              LDR      r4,[r3,#0x14]
000008  06e4              LSLS     r4,r4,#27
00000a  0fe4              LSRS     r4,r4,#31
00000c  700c              STRB     r4,[r1,#0]
;;;615    	*pu8CTSChangeState 	= tUART->MSR.DCTSF;
00000e  695c              LDR      r4,[r3,#0x14]
000010  07e4              LSLS     r4,r4,#31
000012  0fe4              LSRS     r4,r4,#31
000014  7014              STRB     r4,[r2,#0]
;;;616    }	
000016  bd10              POP      {r4,pc}
;;;617    
                          ENDP

                  |L8.24|
                          DCD      0x40050000

                          AREA ||i.DrvUART_GetIntStatus||, CODE, READONLY, ALIGN=2

                  DrvUART_GetIntStatus PROC
;;;581    /*---------------------------------------------------------------------------------------------------------*/
;;;582    int32_t DrvUART_GetIntStatus(E_UART_PORT u32Port,uint32_t u32InterruptFlag)
000000  4602              MOV      r2,r0
;;;583    {
;;;584    
;;;585    	UART_T * tUART;
;;;586    
;;;587    	tUART = (UART_T *)((uint32_t)UART0 + u32Port); 
000002  4803              LDR      r0,|L9.16|
000004  1813              ADDS     r3,r2,r0
;;;588       
;;;589        return (tUART->u32ISR & u32InterruptFlag)>>u32InterruptFlag ;
000006  69d8              LDR      r0,[r3,#0x1c]
000008  4008              ANDS     r0,r0,r1
00000a  40c8              LSRS     r0,r0,r1
;;;590    
;;;591    }
00000c  4770              BX       lr
;;;592    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40050000

                          AREA ||i.DrvUART_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvUART_GetVersion PROC
;;;864    /*---------------------------------------------------------------------------------------------------------*/
;;;865    int32_t	DrvUART_GetVersion(void)
000000  4800              LDR      r0,|L10.4|
;;;866    {
;;;867    	return DRVUART_VERSION_NUM;
;;;868    	
;;;869    }
000002  4770              BX       lr
;;;870    
                          ENDP

                  |L10.4|
                          DCD      0x00010204

                          AREA ||i.DrvUART_Open||, CODE, READONLY, ALIGN=2

                  DrvUART_Open PROC
;;;232    /*---------------------------------------------------------------------------------------------------------*/
;;;233    int32_t DrvUART_Open(E_UART_PORT u32Port, STR_UART_T *sParam)
000000  b5f8              PUSH     {r3-r7,lr}
;;;234    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;235    
;;;236    	UART_T * tUART;
;;;237       
;;;238        /*-----------------------------------------------------------------------------------------------------*/
;;;239        /* Check UART port                                                                                     */
;;;240        /*-----------------------------------------------------------------------------------------------------*/
;;;241        if ((u32Port != UART_PORT0) &&
000006  2e00              CMP      r6,#0
000008  d009              BEQ      |L11.30|
;;;242            (u32Port != UART_PORT1) &&
00000a  2001              MOVS     r0,#1
00000c  0500              LSLS     r0,r0,#20
00000e  4286              CMP      r6,r0
000010  d005              BEQ      |L11.30|
;;;243    		(u32Port != UART_PORT2))
000012  2041              MOVS     r0,#0x41
000014  0380              LSLS     r0,r0,#14
000016  4286              CMP      r6,r0
000018  d001              BEQ      |L11.30|
;;;244        {
;;;245    
;;;246    		return E_DRVUART_ERR_PORT_INVALID;
00001a  4890              LDR      r0,|L11.604|
                  |L11.28|
;;;247        }
;;;248    
;;;249    
;;;250        /*-----------------------------------------------------------------------------------------------------*/
;;;251        /* Check the supplied parity                                                                           */
;;;252        /*-----------------------------------------------------------------------------------------------------*/
;;;253        if ((sParam->u8cParity != DRVUART_PARITY_NONE) &&
;;;254            (sParam->u8cParity != DRVUART_PARITY_EVEN) &&
;;;255            (sParam->u8cParity != DRVUART_PARITY_ODD)  &&
;;;256            (sParam->u8cParity != DRVUART_PARITY_MARK) &&
;;;257            (sParam->u8cParity != DRVUART_PARITY_SPACE))
;;;258        {
;;;259     		return E_DRVUART_ERR_PARITY_INVALID;		
;;;260        }
;;;261        /*-----------------------------------------------------------------------------------------------------*/
;;;262        /* Check the supplied number of data bits                                                              */
;;;263        /*-----------------------------------------------------------------------------------------------------*/
;;;264        else if ((sParam->u8cDataBits != DRVUART_DATABITS_5) &&
;;;265                 (sParam->u8cDataBits != DRVUART_DATABITS_6) &&
;;;266                 (sParam->u8cDataBits != DRVUART_DATABITS_7) &&
;;;267                 (sParam->u8cDataBits != DRVUART_DATABITS_8))
;;;268        {
;;;269     		return E_DRVUART_ERR_DATA_BITS_INVALID;	 
;;;270        }
;;;271        /*-----------------------------------------------------------------------------------------------------*/
;;;272        /* Check the supplied number of stop bits                                                              */
;;;273        /*-----------------------------------------------------------------------------------------------------*/
;;;274        else if ((sParam->u8cStopBits != DRVUART_STOPBITS_1) &&
;;;275                 (sParam->u8cStopBits != DRVUART_STOPBITS_2) &&
;;;276                 (sParam->u8cStopBits != DRVUART_STOPBITS_1_5)
;;;277                 )
;;;278        {
;;;279          	return E_DRVUART_ERR_STOP_BITS_INVALID;	 
;;;280        }
;;;281    
;;;282    
;;;283        /*-----------------------------------------------------------------------------------------------------*/
;;;284        /* Check the supplied nember of trigger level bytes                                                    */
;;;285        /*-----------------------------------------------------------------------------------------------------*/
;;;286        else if ((sParam->u8cRxTriggerLevel != DRVUART_FIFO_1BYTES) &&
;;;287                 (sParam->u8cRxTriggerLevel != DRVUART_FIFO_4BYTES) &&
;;;288                 (sParam->u8cRxTriggerLevel != DRVUART_FIFO_8BYTES) &&
;;;289                 (sParam->u8cRxTriggerLevel != DRVUART_FIFO_14BYTES)&&
;;;290                 (sParam->u8cRxTriggerLevel != DRVUART_FIFO_30BYTES)&&
;;;291                 (sParam->u8cRxTriggerLevel != DRVUART_FIFO_46BYTES)&&
;;;292                 (sParam->u8cRxTriggerLevel != DRVUART_FIFO_62BYTES))
;;;293        {
;;;294    		return E_DRVUART_ERR_TRIGGERLEVEL_INVALID;		 
;;;295        }				
;;;296    
;;;297    	if(u32Port == UART_PORT0)
;;;298    	{
;;;299    		/* Reset IP */
;;;300    		SYS->IPRSTC2.UART0_RST = 1;
;;;301    		SYS->IPRSTC2.UART0_RST = 0;
;;;302    		
;;;303    		/* Enable UART clock */
;;;304    	    SYSCLK->APBCLK.UART0_EN = 1;
;;;305    	}
;;;306    	else if(u32Port == UART_PORT1)
;;;307    	{
;;;308    		/* Reset IP */
;;;309    		SYS->IPRSTC2.UART1_RST = 1;
;;;310    		SYS->IPRSTC2.UART1_RST = 0;
;;;311    		
;;;312    		/* Enable UART clock */
;;;313    	    SYSCLK->APBCLK.UART1_EN = 1;
;;;314    	}
;;;315    	else
;;;316    	{
;;;317    		/* Reset IP */
;;;318    		SYS->IPRSTC2.UART2_RST = 1;
;;;319    		SYS->IPRSTC2.UART2_RST = 0;
;;;320    		
;;;321    		/* Enable UART clock */
;;;322    	    SYSCLK->APBCLK.UART2_EN = 1;
;;;323    	}
;;;324    	
;;;325    	tUART = (UART_T *)((uint32_t)UART0 + u32Port); 
;;;326    
;;;327    
;;;328    	/* Tx FIFO Reset & Rx FIFO Reset & FIFO Mode Enable */
;;;329      	tUART->FCR.TFR =1;
;;;330      	tUART->FCR.RFR =1;
;;;331    
;;;332    	/* Set Rx Trigger Level */
;;;333    	tUART->FCR.RFITL = sParam->u8cRxTriggerLevel;  
;;;334    	
;;;335    	/* Set Parity & Data bits & Stop bits */
;;;336    	tUART->LCR.SPE	=((sParam->u8cParity)&0x4)?1:0;
;;;337    	tUART->LCR.EPE	=((sParam->u8cParity)&0x2)?1:0;
;;;338    	tUART->LCR.PBE	=((sParam->u8cParity)&0x1)?1:0;
;;;339    		
;;;340    	tUART->LCR.WLS	=sParam->u8cDataBits;
;;;341    	tUART->LCR.NSB	=sParam->u8cStopBits;
;;;342    		
;;;343    	/* Set Time-Out */
;;;344    	tUART->TOR.TOIC	=sParam->u8TimeOut;
;;;345    
;;;346        /* Check Clock Source */
;;;347        if(SYSCLK->PWRCON.XTL12M_EN)
;;;348            SYSCLK->CLKSEL1.UART_S = 0;
;;;349        else
;;;350        {
;;;351            if(SYSCLK->PLLCON.PD==0)
;;;352                SYSCLK->CLKSEL1.UART_S = 1;
;;;353            else
;;;354                if(SYSCLK->PWRCON.OSC22M_EN)
;;;355                    SYSCLK->CLKSEL1.UART_S = 3;
;;;356                else
;;;357                    return E_DRVUART_ERR_OPEN;
;;;358        }
;;;359     
;;;360    	/* Set BaudRate */
;;;361        BaudRateCalculator(GetUartClk(), sParam->u32BaudRate, u32Port);
;;;362        
;;;363    
;;;364    	return E_SUCCESS;
;;;365    }
00001c  bdf8              POP      {r3-r7,pc}
                  |L11.30|
00001e  79a0              LDRB     r0,[r4,#6]            ;253
000020  2800              CMP      r0,#0                 ;253
000022  d00e              BEQ      |L11.66|
000024  79a0              LDRB     r0,[r4,#6]            ;254
000026  2803              CMP      r0,#3                 ;254
000028  d00b              BEQ      |L11.66|
00002a  79a0              LDRB     r0,[r4,#6]            ;255
00002c  2801              CMP      r0,#1                 ;255
00002e  d008              BEQ      |L11.66|
000030  79a0              LDRB     r0,[r4,#6]            ;256
000032  2805              CMP      r0,#5                 ;256
000034  d005              BEQ      |L11.66|
000036  79a0              LDRB     r0,[r4,#6]            ;257
000038  2807              CMP      r0,#7                 ;257
00003a  d002              BEQ      |L11.66|
00003c  4887              LDR      r0,|L11.604|
00003e  1c40              ADDS     r0,r0,#1              ;259
000040  e7ec              B        |L11.28|
                  |L11.66|
000042  7920              LDRB     r0,[r4,#4]            ;264
000044  2800              CMP      r0,#0                 ;264
000046  d00b              BEQ      |L11.96|
000048  7920              LDRB     r0,[r4,#4]            ;265
00004a  2801              CMP      r0,#1                 ;265
00004c  d008              BEQ      |L11.96|
00004e  7920              LDRB     r0,[r4,#4]            ;266
000050  2802              CMP      r0,#2                 ;266
000052  d005              BEQ      |L11.96|
000054  7920              LDRB     r0,[r4,#4]            ;267
000056  2803              CMP      r0,#3                 ;267
000058  d002              BEQ      |L11.96|
00005a  4880              LDR      r0,|L11.604|
00005c  1c80              ADDS     r0,r0,#2              ;269
00005e  e7dd              B        |L11.28|
                  |L11.96|
000060  7960              LDRB     r0,[r4,#5]            ;274
000062  2800              CMP      r0,#0                 ;274
000064  d008              BEQ      |L11.120|
000066  7960              LDRB     r0,[r4,#5]            ;275
000068  2801              CMP      r0,#1                 ;275
00006a  d005              BEQ      |L11.120|
00006c  7960              LDRB     r0,[r4,#5]            ;276
00006e  2801              CMP      r0,#1                 ;276
000070  d002              BEQ      |L11.120|
000072  487a              LDR      r0,|L11.604|
000074  1cc0              ADDS     r0,r0,#3              ;279
000076  e7d1              B        |L11.28|
                  |L11.120|
000078  79e0              LDRB     r0,[r4,#7]            ;286
00007a  2800              CMP      r0,#0                 ;286
00007c  d014              BEQ      |L11.168|
00007e  79e0              LDRB     r0,[r4,#7]            ;287
000080  2801              CMP      r0,#1                 ;287
000082  d011              BEQ      |L11.168|
000084  79e0              LDRB     r0,[r4,#7]            ;288
000086  2802              CMP      r0,#2                 ;288
000088  d00e              BEQ      |L11.168|
00008a  79e0              LDRB     r0,[r4,#7]            ;289
00008c  2803              CMP      r0,#3                 ;289
00008e  d00b              BEQ      |L11.168|
000090  79e0              LDRB     r0,[r4,#7]            ;290
000092  2804              CMP      r0,#4                 ;290
000094  d008              BEQ      |L11.168|
000096  79e0              LDRB     r0,[r4,#7]            ;291
000098  2805              CMP      r0,#5                 ;291
00009a  d005              BEQ      |L11.168|
00009c  79e0              LDRB     r0,[r4,#7]            ;292
00009e  2806              CMP      r0,#6                 ;292
0000a0  d002              BEQ      |L11.168|
0000a2  486e              LDR      r0,|L11.604|
0000a4  1d00              ADDS     r0,r0,#4              ;294
0000a6  e7b9              B        |L11.28|
                  |L11.168|
0000a8  2e00              CMP      r6,#0                 ;297
0000aa  d11a              BNE      |L11.226|
0000ac  2005              MOVS     r0,#5                 ;300
0000ae  0700              LSLS     r0,r0,#28             ;300
0000b0  68c0              LDR      r0,[r0,#0xc]          ;300
0000b2  2101              MOVS     r1,#1                 ;300
0000b4  0409              LSLS     r1,r1,#16             ;300
0000b6  4388              BICS     r0,r0,r1              ;300
0000b8  1840              ADDS     r0,r0,r1              ;300
0000ba  2105              MOVS     r1,#5                 ;300
0000bc  0709              LSLS     r1,r1,#28             ;300
0000be  60c8              STR      r0,[r1,#0xc]          ;300
0000c0  4608              MOV      r0,r1                 ;301
0000c2  68c0              LDR      r0,[r0,#0xc]          ;301
0000c4  2101              MOVS     r1,#1                 ;301
0000c6  0409              LSLS     r1,r1,#16             ;301
0000c8  4388              BICS     r0,r0,r1              ;301
0000ca  2105              MOVS     r1,#5                 ;301
0000cc  0709              LSLS     r1,r1,#28             ;301
0000ce  60c8              STR      r0,[r1,#0xc]          ;301
0000d0  4863              LDR      r0,|L11.608|
0000d2  6880              LDR      r0,[r0,#8]            ;304
0000d4  2101              MOVS     r1,#1                 ;304
0000d6  0409              LSLS     r1,r1,#16             ;304
0000d8  4388              BICS     r0,r0,r1              ;304
0000da  1840              ADDS     r0,r0,r1              ;304
0000dc  4960              LDR      r1,|L11.608|
0000de  6088              STR      r0,[r1,#8]            ;304
0000e0  e035              B        |L11.334|
                  |L11.226|
0000e2  2001              MOVS     r0,#1                 ;306
0000e4  0500              LSLS     r0,r0,#20             ;306
0000e6  4286              CMP      r6,r0                 ;306
0000e8  d117              BNE      |L11.282|
0000ea  2005              MOVS     r0,#5                 ;309
0000ec  0700              LSLS     r0,r0,#28             ;309
0000ee  68c0              LDR      r0,[r0,#0xc]          ;309
0000f0  10f1              ASRS     r1,r6,#3              ;309
0000f2  4388              BICS     r0,r0,r1              ;309
0000f4  1840              ADDS     r0,r0,r1              ;309
0000f6  2105              MOVS     r1,#5                 ;309
0000f8  0709              LSLS     r1,r1,#28             ;309
0000fa  60c8              STR      r0,[r1,#0xc]          ;309
0000fc  4608              MOV      r0,r1                 ;310
0000fe  68c0              LDR      r0,[r0,#0xc]          ;310
000100  10f1              ASRS     r1,r6,#3              ;310
000102  4388              BICS     r0,r0,r1              ;310
000104  2105              MOVS     r1,#5                 ;310
000106  0709              LSLS     r1,r1,#28             ;310
000108  60c8              STR      r0,[r1,#0xc]          ;310
00010a  4855              LDR      r0,|L11.608|
00010c  6880              LDR      r0,[r0,#8]            ;313
00010e  10f1              ASRS     r1,r6,#3              ;313
000110  4388              BICS     r0,r0,r1              ;313
000112  1840              ADDS     r0,r0,r1              ;313
000114  4952              LDR      r1,|L11.608|
000116  6088              STR      r0,[r1,#8]            ;313
000118  e019              B        |L11.334|
                  |L11.282|
00011a  2005              MOVS     r0,#5                 ;318
00011c  0700              LSLS     r0,r0,#28             ;318
00011e  68c0              LDR      r0,[r0,#0xc]          ;318
000120  2101              MOVS     r1,#1                 ;318
000122  0489              LSLS     r1,r1,#18             ;318
000124  4388              BICS     r0,r0,r1              ;318
000126  1840              ADDS     r0,r0,r1              ;318
000128  2105              MOVS     r1,#5                 ;318
00012a  0709              LSLS     r1,r1,#28             ;318
00012c  60c8              STR      r0,[r1,#0xc]          ;318
00012e  4608              MOV      r0,r1                 ;319
000130  68c0              LDR      r0,[r0,#0xc]          ;319
000132  2101              MOVS     r1,#1                 ;319
000134  0489              LSLS     r1,r1,#18             ;319
000136  4388              BICS     r0,r0,r1              ;319
000138  2105              MOVS     r1,#5                 ;319
00013a  0709              LSLS     r1,r1,#28             ;319
00013c  60c8              STR      r0,[r1,#0xc]          ;319
00013e  4848              LDR      r0,|L11.608|
000140  6880              LDR      r0,[r0,#8]            ;322
000142  2101              MOVS     r1,#1                 ;322
000144  0489              LSLS     r1,r1,#18             ;322
000146  4388              BICS     r0,r0,r1              ;322
000148  1840              ADDS     r0,r0,r1              ;322
00014a  4945              LDR      r1,|L11.608|
00014c  6088              STR      r0,[r1,#8]            ;322
                  |L11.334|
00014e  4845              LDR      r0,|L11.612|
000150  1835              ADDS     r5,r6,r0              ;325
000152  68a8              LDR      r0,[r5,#8]            ;329
000154  2104              MOVS     r1,#4                 ;329
000156  4388              BICS     r0,r0,r1              ;329
000158  1d00              ADDS     r0,r0,#4              ;329
00015a  60a8              STR      r0,[r5,#8]            ;329
00015c  68a8              LDR      r0,[r5,#8]            ;330
00015e  2102              MOVS     r1,#2                 ;330
000160  4388              BICS     r0,r0,r1              ;330
000162  1c80              ADDS     r0,r0,#2              ;330
000164  60a8              STR      r0,[r5,#8]            ;330
000166  68a8              LDR      r0,[r5,#8]            ;333
000168  21f0              MOVS     r1,#0xf0              ;333
00016a  4388              BICS     r0,r0,r1              ;333
00016c  79e1              LDRB     r1,[r4,#7]            ;333
00016e  0109              LSLS     r1,r1,#4              ;333
000170  22f0              MOVS     r2,#0xf0              ;333
000172  4011              ANDS     r1,r1,r2              ;333
000174  4308              ORRS     r0,r0,r1              ;333
000176  60a8              STR      r0,[r5,#8]            ;333
000178  68e8              LDR      r0,[r5,#0xc]          ;336
00017a  2120              MOVS     r1,#0x20              ;336
00017c  4388              BICS     r0,r0,r1              ;336
00017e  79a1              LDRB     r1,[r4,#6]            ;336
000180  2204              MOVS     r2,#4                 ;336
000182  4011              ANDS     r1,r1,r2              ;336
000184  0889              LSRS     r1,r1,#2              ;336
000186  0149              LSLS     r1,r1,#5              ;336
000188  2220              MOVS     r2,#0x20              ;336
00018a  4011              ANDS     r1,r1,r2              ;336
00018c  4308              ORRS     r0,r0,r1              ;336
00018e  60e8              STR      r0,[r5,#0xc]          ;336
000190  68e8              LDR      r0,[r5,#0xc]          ;337
000192  2110              MOVS     r1,#0x10              ;337
000194  4388              BICS     r0,r0,r1              ;337
000196  79a1              LDRB     r1,[r4,#6]            ;337
000198  2202              MOVS     r2,#2                 ;337
00019a  4011              ANDS     r1,r1,r2              ;337
00019c  0849              LSRS     r1,r1,#1              ;337
00019e  0109              LSLS     r1,r1,#4              ;337
0001a0  2210              MOVS     r2,#0x10              ;337
0001a2  4011              ANDS     r1,r1,r2              ;337
0001a4  4308              ORRS     r0,r0,r1              ;337
0001a6  60e8              STR      r0,[r5,#0xc]          ;337
0001a8  68e8              LDR      r0,[r5,#0xc]          ;338
0001aa  2108              MOVS     r1,#8                 ;338
0001ac  4388              BICS     r0,r0,r1              ;338
0001ae  79a1              LDRB     r1,[r4,#6]            ;338
0001b0  00c9              LSLS     r1,r1,#3              ;338
0001b2  2208              MOVS     r2,#8                 ;338
0001b4  4011              ANDS     r1,r1,r2              ;338
0001b6  4308              ORRS     r0,r0,r1              ;338
0001b8  60e8              STR      r0,[r5,#0xc]          ;338
0001ba  68e8              LDR      r0,[r5,#0xc]          ;340
0001bc  0880              LSRS     r0,r0,#2              ;340
0001be  0080              LSLS     r0,r0,#2              ;340
0001c0  7921              LDRB     r1,[r4,#4]            ;340
0001c2  0789              LSLS     r1,r1,#30             ;340
0001c4  0f89              LSRS     r1,r1,#30             ;340
0001c6  4308              ORRS     r0,r0,r1              ;340
0001c8  60e8              STR      r0,[r5,#0xc]          ;340
0001ca  68e8              LDR      r0,[r5,#0xc]          ;341
0001cc  2104              MOVS     r1,#4                 ;341
0001ce  4388              BICS     r0,r0,r1              ;341
0001d0  7961              LDRB     r1,[r4,#5]            ;341
0001d2  0089              LSLS     r1,r1,#2              ;341
0001d4  2204              MOVS     r2,#4                 ;341
0001d6  4011              ANDS     r1,r1,r2              ;341
0001d8  4308              ORRS     r0,r0,r1              ;341
0001da  60e8              STR      r0,[r5,#0xc]          ;341
0001dc  6a28              LDR      r0,[r5,#0x20]         ;344
0001de  0a00              LSRS     r0,r0,#8              ;344
0001e0  0200              LSLS     r0,r0,#8              ;344
0001e2  7a21              LDRB     r1,[r4,#8]            ;344
0001e4  4308              ORRS     r0,r0,r1              ;344
0001e6  6228              STR      r0,[r5,#0x20]         ;344
0001e8  481d              LDR      r0,|L11.608|
0001ea  6800              LDR      r0,[r0,#0]            ;347
0001ec  07c0              LSLS     r0,r0,#31             ;347
0001ee  0fc0              LSRS     r0,r0,#31             ;347
0001f0  2800              CMP      r0,#0                 ;347
0001f2  d007              BEQ      |L11.516|
0001f4  481a              LDR      r0,|L11.608|
0001f6  6940              LDR      r0,[r0,#0x14]         ;348
0001f8  2103              MOVS     r1,#3                 ;348
0001fa  0609              LSLS     r1,r1,#24             ;348
0001fc  4388              BICS     r0,r0,r1              ;348
0001fe  4918              LDR      r1,|L11.608|
000200  6148              STR      r0,[r1,#0x14]         ;348
000202  e022              B        |L11.586|
                  |L11.516|
000204  4816              LDR      r0,|L11.608|
000206  6a00              LDR      r0,[r0,#0x20]         ;351
000208  03c0              LSLS     r0,r0,#15             ;351
00020a  0fc0              LSRS     r0,r0,#31             ;351
00020c  2800              CMP      r0,#0                 ;351
00020e  d10a              BNE      |L11.550|
000210  4813              LDR      r0,|L11.608|
000212  6940              LDR      r0,[r0,#0x14]         ;352
000214  2103              MOVS     r1,#3                 ;352
000216  0609              LSLS     r1,r1,#24             ;352
000218  4388              BICS     r0,r0,r1              ;352
00021a  2101              MOVS     r1,#1                 ;352
00021c  0609              LSLS     r1,r1,#24             ;352
00021e  1840              ADDS     r0,r0,r1              ;352
000220  490f              LDR      r1,|L11.608|
000222  6148              STR      r0,[r1,#0x14]         ;352
000224  e011              B        |L11.586|
                  |L11.550|
000226  480e              LDR      r0,|L11.608|
000228  6800              LDR      r0,[r0,#0]            ;354
00022a  0740              LSLS     r0,r0,#29             ;354
00022c  0fc0              LSRS     r0,r0,#31             ;354
00022e  2800              CMP      r0,#0                 ;354
000230  d008              BEQ      |L11.580|
000232  480b              LDR      r0,|L11.608|
000234  6940              LDR      r0,[r0,#0x14]         ;355
000236  2103              MOVS     r1,#3                 ;355
000238  0609              LSLS     r1,r1,#24             ;355
00023a  4388              BICS     r0,r0,r1              ;355
00023c  1840              ADDS     r0,r0,r1              ;355
00023e  4908              LDR      r1,|L11.608|
000240  6148              STR      r0,[r1,#0x14]         ;355
000242  e002              B        |L11.586|
                  |L11.580|
000244  4805              LDR      r0,|L11.604|
000246  1d80              ADDS     r0,r0,#6              ;357
000248  e6e8              B        |L11.28|
                  |L11.586|
00024a  f7fffffe          BL       GetUartClk
00024e  4607              MOV      r7,r0                 ;361
000250  4632              MOV      r2,r6                 ;361
000252  6821              LDR      r1,[r4,#0]            ;361
000254  f7fffffe          BL       BaudRateCalculator
000258  2000              MOVS     r0,#0                 ;364
00025a  e6df              B        |L11.28|
;;;366    
                          ENDP

                  |L11.604|
                          DCD      0xffff9802
                  |L11.608|
                          DCD      0x50000200
                  |L11.612|
                          DCD      0x40050000

                          AREA ||i.DrvUART_Read||, CODE, READONLY, ALIGN=2

                  DrvUART_Read PROC
;;;630    /*---------------------------------------------------------------------------------------------------------*/
;;;631    int32_t DrvUART_Read(E_UART_PORT	u32Port,uint8_t	*pu8RxBuf, uint32_t	u32ReadBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;632    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;633        uint32_t  u32Count, u32delayno;
;;;634    
;;;635    	UART_T * tUART;
;;;636    
;;;637    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000006  480c              LDR      r0,|L12.56|
000008  181d              ADDS     r5,r3,r0
;;;638    
;;;639        for (u32Count=0; u32Count < u32ReadBytes; u32Count++)
00000a  2100              MOVS     r1,#0
00000c  e010              B        |L12.48|
                  |L12.14|
;;;640        {
;;;641    		 u32delayno = 0;
00000e  2600              MOVS     r6,#0
;;;642    	     while (tUART->FSR.RX_EMPTY ==1)					    /* Check RX empty => failed */	   
000010  e006              B        |L12.32|
                  |L12.18|
;;;643    	     {
;;;644    	     	u32delayno++;        
000012  1c76              ADDS     r6,r6,#1
;;;645    	        if ( u32delayno >= 0x40000000 )        
000014  2001              MOVS     r0,#1
000016  0780              LSLS     r0,r0,#30
000018  4286              CMP      r6,r0
00001a  d301              BCC      |L12.32|
;;;646    	        	return E_DRVUART_ERR_TIMEOUT;               
00001c  4807              LDR      r0,|L12.60|
                  |L12.30|
;;;647             }
;;;648             pu8RxBuf[u32Count] = tUART->DATA;					    /* Get Data from UART RX  */
;;;649        }
;;;650    
;;;651        return E_SUCCESS;
;;;652    	
;;;653    }
00001e  bd70              POP      {r4-r6,pc}
                  |L12.32|
000020  69a8              LDR      r0,[r5,#0x18]         ;642
000022  0440              LSLS     r0,r0,#17             ;642
000024  0fc0              LSRS     r0,r0,#31             ;642
000026  2800              CMP      r0,#0                 ;642
000028  d1f3              BNE      |L12.18|
00002a  6828              LDR      r0,[r5,#0]            ;648
00002c  5460              STRB     r0,[r4,r1]            ;648
00002e  1c49              ADDS     r1,r1,#1              ;639
                  |L12.48|
000030  4291              CMP      r1,r2                 ;639
000032  d3ec              BCC      |L12.14|
000034  2000              MOVS     r0,#0                 ;651
000036  e7f2              B        |L12.30|
;;;654    
                          ENDP

                  |L12.56|
                          DCD      0x40050000
                  |L12.60|
                          DCD      0xffff9801

                          AREA ||i.DrvUART_SetFnIRDA||, CODE, READONLY, ALIGN=2

                  DrvUART_SetFnIRDA PROC
;;;774    /*---------------------------------------------------------------------------------------------------------*/
;;;775    void DrvUART_SetFnIRDA(E_UART_PORT u32Port,STR_IRCR_T *str_IRCR )
000000  b530              PUSH     {r4,r5,lr}
;;;776    {
000002  4602              MOV      r2,r0
;;;777    	UART_T * tUART;
;;;778    
;;;779    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000004  4b13              LDR      r3,|L13.84|
000006  18d0              ADDS     r0,r2,r3
;;;780    
;;;781    	tUART->FUNSEL.FUN_SEL 	= FUN_IRCR;							   	/* Enable IrDA function and configure */
000008  6b03              LDR      r3,[r0,#0x30]
00000a  089b              LSRS     r3,r3,#2
00000c  009b              LSLS     r3,r3,#2
00000e  1c9b              ADDS     r3,r3,#2
000010  6303              STR      r3,[r0,#0x30]
;;;782    	tUART->IRCR.TX_SELECT	= (str_IRCR->u8cTXSelect) ?1:0;
000012  6a83              LDR      r3,[r0,#0x28]
000014  2402              MOVS     r4,#2
000016  43a3              BICS     r3,r3,r4
000018  780c              LDRB     r4,[r1,#0]
00001a  2c00              CMP      r4,#0
00001c  d001              BEQ      |L13.34|
00001e  2401              MOVS     r4,#1
000020  e000              B        |L13.36|
                  |L13.34|
000022  2400              MOVS     r4,#0
                  |L13.36|
000024  0064              LSLS     r4,r4,#1
000026  2502              MOVS     r5,#2
000028  402c              ANDS     r4,r4,r5
00002a  4323              ORRS     r3,r3,r4
00002c  6283              STR      r3,[r0,#0x28]
;;;783    	tUART->IRCR.INV_TX		= str_IRCR->u8cInvTX ;
00002e  6a83              LDR      r3,[r0,#0x28]
000030  2420              MOVS     r4,#0x20
000032  43a3              BICS     r3,r3,r4
000034  784c              LDRB     r4,[r1,#1]
000036  0164              LSLS     r4,r4,#5
000038  2520              MOVS     r5,#0x20
00003a  402c              ANDS     r4,r4,r5
00003c  4323              ORRS     r3,r3,r4
00003e  6283              STR      r3,[r0,#0x28]
;;;784    	tUART->IRCR.INV_RX		= str_IRCR->u8cInvRX ;
000040  6a83              LDR      r3,[r0,#0x28]
000042  2440              MOVS     r4,#0x40
000044  43a3              BICS     r3,r3,r4
000046  788c              LDRB     r4,[r1,#2]
000048  01a4              LSLS     r4,r4,#6
00004a  2540              MOVS     r5,#0x40
00004c  402c              ANDS     r4,r4,r5
00004e  4323              ORRS     r3,r3,r4
000050  6283              STR      r3,[r0,#0x28]
;;;785    }
000052  bd30              POP      {r4,r5,pc}
;;;786    
                          ENDP

                  |L13.84|
                          DCD      0x40050000

                          AREA ||i.DrvUART_SetFnLIN||, CODE, READONLY, ALIGN=2

                  DrvUART_SetFnLIN PROC
;;;800    /*---------------------------------------------------------------------------------------------------------*/
;;;801    void DrvUART_SetFnLIN(E_UART_PORT u32Port,uint16_t u16Mode,uint16_t u16BreakLength)
000000  b570              PUSH     {r4-r6,lr}
;;;802    {
000002  4603              MOV      r3,r0
;;;803    	UART_T * tUART;
;;;804    
;;;805    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000004  4c10              LDR      r4,|L14.72|
000006  1918              ADDS     r0,r3,r4
;;;806    
;;;807    	tUART->FUNSEL.FUN_SEL 	= FUN_LIN;
000008  6b04              LDR      r4,[r0,#0x30]
00000a  08a4              LSRS     r4,r4,#2
00000c  00a4              LSLS     r4,r4,#2
00000e  1c64              ADDS     r4,r4,#1
000010  6304              STR      r4,[r0,#0x30]
;;;808    	
;;;809    	tUART->ALTCON.LIN_BKFL  = u16BreakLength;
000012  6ac4              LDR      r4,[r0,#0x2c]
000014  0924              LSRS     r4,r4,#4
000016  0124              LSLS     r4,r4,#4
000018  0715              LSLS     r5,r2,#28
00001a  0f2d              LSRS     r5,r5,#28
00001c  432c              ORRS     r4,r4,r5
00001e  62c4              STR      r4,[r0,#0x2c]
;;;810    	tUART->ALTCON.LIN_TX_EN	= (u16Mode & MODE_TX) ?1:0;
000020  6ac4              LDR      r4,[r0,#0x2c]
000022  2580              MOVS     r5,#0x80
000024  43ac              BICS     r4,r4,r5
000026  01cd              LSLS     r5,r1,#7
000028  2680              MOVS     r6,#0x80
00002a  4035              ANDS     r5,r5,r6
00002c  432c              ORRS     r4,r4,r5
00002e  62c4              STR      r4,[r0,#0x2c]
;;;811    	tUART->ALTCON.LIN_RX_EN	= (u16Mode & MODE_RX) ?1:0;
000030  6ac4              LDR      r4,[r0,#0x2c]
000032  2540              MOVS     r5,#0x40
000034  43ac              BICS     r4,r4,r5
000036  2502              MOVS     r5,#2
000038  400d              ANDS     r5,r5,r1
00003a  086d              LSRS     r5,r5,#1
00003c  01ad              LSLS     r5,r5,#6
00003e  2640              MOVS     r6,#0x40
000040  4035              ANDS     r5,r5,r6
000042  432c              ORRS     r4,r4,r5
000044  62c4              STR      r4,[r0,#0x2c]
;;;812    
;;;813    }
000046  bd70              POP      {r4-r6,pc}
;;;814    
                          ENDP

                  |L14.72|
                          DCD      0x40050000

                          AREA ||i.DrvUART_SetFnRS485||, CODE, READONLY, ALIGN=2

                  DrvUART_SetFnRS485 PROC
;;;834    /*---------------------------------------------------------------------------------------------------------*/
;;;835    void DrvUART_SetFnRS485(E_UART_PORT u32Port,STR_RS485_T *str_RS485)
000000  b530              PUSH     {r4,r5,lr}
;;;836    {
000002  4602              MOV      r2,r0
;;;837    					 
;;;838    	UART_T * tUART;
;;;839    
;;;840    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000004  4b2e              LDR      r3,|L15.192|
000006  18d0              ADDS     r0,r2,r3
;;;841    
;;;842    	tUART->FUNSEL.FUN_SEL 			= FUN_RS485;					
000008  6b03              LDR      r3,[r0,#0x30]
00000a  089b              LSRS     r3,r3,#2
00000c  009b              LSLS     r3,r3,#2
00000e  1cdb              ADDS     r3,r3,#3
000010  6303              STR      r3,[r0,#0x30]
;;;843    	tUART->ALTCON.RS485_ADD_EN	    = (str_RS485-> u8cAddrEnable) ?1:0;
000012  6ac3              LDR      r3,[r0,#0x2c]
000014  2401              MOVS     r4,#1
000016  03e4              LSLS     r4,r4,#15
000018  43a3              BICS     r3,r3,r4
00001a  784c              LDRB     r4,[r1,#1]
00001c  2c00              CMP      r4,#0
00001e  d001              BEQ      |L15.36|
000020  2401              MOVS     r4,#1
000022  e000              B        |L15.38|
                  |L15.36|
000024  2400              MOVS     r4,#0
                  |L15.38|
000026  03e4              LSLS     r4,r4,#15
000028  2501              MOVS     r5,#1
00002a  03ed              LSLS     r5,r5,#15
00002c  402c              ANDS     r4,r4,r5
00002e  4323              ORRS     r3,r3,r4
000030  62c3              STR      r3,[r0,#0x2c]
;;;844    	tUART->ALTCON.ADDR_MATCH		= str_RS485-> u8cAddrValue ;
000032  6ac3              LDR      r3,[r0,#0x2c]
000034  021b              LSLS     r3,r3,#8
000036  0a1b              LSRS     r3,r3,#8
000038  788c              LDRB     r4,[r1,#2]
00003a  0624              LSLS     r4,r4,#24
00003c  0e24              LSRS     r4,r4,#24
00003e  0624              LSLS     r4,r4,#24
000040  4323              ORRS     r3,r3,r4
000042  62c3              STR      r3,[r0,#0x2c]
;;;845    	tUART->ALTCON.RS485_NMM		    = (str_RS485-> u8cModeSelect & MODE_RS485_NMM)?1:0;	
000044  6ac3              LDR      r3,[r0,#0x2c]
000046  11ec              ASRS     r4,r5,#7
000048  43a3              BICS     r3,r3,r4
00004a  780c              LDRB     r4,[r1,#0]
00004c  0224              LSLS     r4,r4,#8
00004e  11ed              ASRS     r5,r5,#7
000050  402c              ANDS     r4,r4,r5
000052  4323              ORRS     r3,r3,r4
000054  62c3              STR      r3,[r0,#0x2c]
;;;846    	tUART->ALTCON.RS485_AAD		    = (str_RS485-> u8cModeSelect & MODE_RS485_AAD)?1:0;	
000056  6ac3              LDR      r3,[r0,#0x2c]
000058  006c              LSLS     r4,r5,#1
00005a  43a3              BICS     r3,r3,r4
00005c  780c              LDRB     r4,[r1,#0]
00005e  2502              MOVS     r5,#2
000060  402c              ANDS     r4,r4,r5
000062  0864              LSRS     r4,r4,#1
000064  0264              LSLS     r4,r4,#9
000066  022d              LSLS     r5,r5,#8
000068  402c              ANDS     r4,r4,r5
00006a  4323              ORRS     r3,r3,r4
00006c  62c3              STR      r3,[r0,#0x2c]
;;;847    	tUART->ALTCON.RS485_AUD		    = (str_RS485-> u8cModeSelect & MODE_RS485_AUD)?1:0;	
00006e  6ac3              LDR      r3,[r0,#0x2c]
000070  006c              LSLS     r4,r5,#1
000072  43a3              BICS     r3,r3,r4
000074  780c              LDRB     r4,[r1,#0]
000076  2504              MOVS     r5,#4
000078  402c              ANDS     r4,r4,r5
00007a  08a4              LSRS     r4,r4,#2
00007c  02a4              LSLS     r4,r4,#10
00007e  022d              LSLS     r5,r5,#8
000080  402c              ANDS     r4,r4,r5
000082  4323              ORRS     r3,r3,r4
000084  62c3              STR      r3,[r0,#0x2c]
;;;848    	tUART->TOR.DLY                  = str_RS485-> u8cDelayTime;
000086  6a03              LDR      r3,[r0,#0x20]
000088  24ff              MOVS     r4,#0xff
00008a  0224              LSLS     r4,r4,#8
00008c  43a3              BICS     r3,r3,r4
00008e  78cc              LDRB     r4,[r1,#3]
000090  0224              LSLS     r4,r4,#8
000092  25ff              MOVS     r5,#0xff
000094  022d              LSLS     r5,r5,#8
000096  402c              ANDS     r4,r4,r5
000098  4323              ORRS     r3,r3,r4
00009a  6203              STR      r3,[r0,#0x20]
;;;849    	tUART->FCR.RX_DIS               = (str_RS485-> u8cRxDisable) ?1:0;
00009c  6883              LDR      r3,[r0,#8]
00009e  24ff              MOVS     r4,#0xff
0000a0  3401              ADDS     r4,#1
0000a2  43a3              BICS     r3,r3,r4
0000a4  790c              LDRB     r4,[r1,#4]
0000a6  2c00              CMP      r4,#0
0000a8  d001              BEQ      |L15.174|
0000aa  2401              MOVS     r4,#1
0000ac  e000              B        |L15.176|
                  |L15.174|
0000ae  2400              MOVS     r4,#0
                  |L15.176|
0000b0  0224              LSLS     r4,r4,#8
0000b2  25ff              MOVS     r5,#0xff
0000b4  3501              ADDS     r5,#1
0000b6  402c              ANDS     r4,r4,r5
0000b8  4323              ORRS     r3,r3,r4
0000ba  6083              STR      r3,[r0,#8]
;;;850    	
;;;851    
;;;852    } 
0000bc  bd30              POP      {r4,r5,pc}
;;;853    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP

0000be  0000              DCW      0x0000
                  |L15.192|
                          DCD      0x40050000

                          AREA ||i.DrvUART_SetRTS||, CODE, READONLY, ALIGN=2

                  DrvUART_SetRTS PROC
;;;183    /*---------------------------------------------------------------------------------------------------------*/
;;;184    void DrvUART_SetRTS(E_UART_PORT u32Port,uint8_t u8Value,uint16_t u16TriggerLevel)
000000  b570              PUSH     {r4-r6,lr}
;;;185    {
000002  4603              MOV      r3,r0
;;;186    	
;;;187    	UART_T * tUART;
;;;188    
;;;189    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000004  4c0a              LDR      r4,|L16.48|
000006  1918              ADDS     r0,r3,r4
;;;190    
;;;191    	tUART->MCR.RTS = u8Value;
000008  6904              LDR      r4,[r0,#0x10]
00000a  2502              MOVS     r5,#2
00000c  43ac              BICS     r4,r4,r5
00000e  004d              LSLS     r5,r1,#1
000010  2602              MOVS     r6,#2
000012  4035              ANDS     r5,r5,r6
000014  432c              ORRS     r4,r4,r5
000016  6104              STR      r4,[r0,#0x10]
;;;192    
;;;193    	tUART->FCR.RTS_TRI_LEV = u16TriggerLevel;
000018  6884              LDR      r4,[r0,#8]
00001a  250f              MOVS     r5,#0xf
00001c  042d              LSLS     r5,r5,#16
00001e  43ac              BICS     r4,r4,r5
000020  0415              LSLS     r5,r2,#16
000022  260f              MOVS     r6,#0xf
000024  0436              LSLS     r6,r6,#16
000026  4035              ANDS     r5,r5,r6
000028  432c              ORRS     r4,r4,r5
00002a  6084              STR      r4,[r0,#8]
;;;194    }	
00002c  bd70              POP      {r4-r6,pc}
;;;195    
                          ENDP

00002e  0000              DCW      0x0000
                  |L16.48|
                          DCD      0x40050000

                          AREA ||i.DrvUART_Write||, CODE, READONLY, ALIGN=2

                  DrvUART_Write PROC
;;;671    /*---------------------------------------------------------------------------------------------------------*/
;;;672    int32_t DrvUART_Write(E_UART_PORT	u32Port,uint8_t	*pu8TxBuf, 	uint32_t u32WriteBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;673    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;674        uint32_t  u32Count, u32delayno;
;;;675    
;;;676    	UART_T * tUART;
;;;677    
;;;678    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000006  480c              LDR      r0,|L17.56|
000008  181d              ADDS     r5,r3,r0
;;;679    
;;;680        for (u32Count=0; u32Count<u32WriteBytes; u32Count++)
00000a  2100              MOVS     r1,#0
00000c  e010              B        |L17.48|
                  |L17.14|
;;;681        {
;;;682           u32delayno = 0;
00000e  2600              MOVS     r6,#0
;;;683    	   while (tUART->FSR.TE_FLAG !=1)						    	/* Wait Tx empty and Time-out manner */
000010  e006              B        |L17.32|
                  |L17.18|
;;;684           {
;;;685           	    u32delayno++;
000012  1c76              ADDS     r6,r6,#1
;;;686           	    if ( u32delayno >= 0x40000000 )     	    
000014  2001              MOVS     r0,#1
000016  0780              LSLS     r0,r0,#30
000018  4286              CMP      r6,r0
00001a  d301              BCC      |L17.32|
;;;687           	       return E_DRVUART_ERR_TIMEOUT;     	       
00001c  4807              LDR      r0,|L17.60|
                  |L17.30|
;;;688    				   
;;;689           }
;;;690    	   tUART->DATA = pu8TxBuf[u32Count];						/* Send UART Data from buffer */
;;;691        }
;;;692    
;;;693        return E_SUCCESS;
;;;694    	
;;;695      
;;;696    }
00001e  bd70              POP      {r4-r6,pc}
                  |L17.32|
000020  69a8              LDR      r0,[r5,#0x18]         ;683
000022  00c0              LSLS     r0,r0,#3              ;683
000024  0fc0              LSRS     r0,r0,#31             ;683
000026  2800              CMP      r0,#0                 ;683
000028  d0f3              BEQ      |L17.18|
00002a  5c60              LDRB     r0,[r4,r1]            ;690
00002c  6028              STR      r0,[r5,#0]            ;690
00002e  1c49              ADDS     r1,r1,#1              ;680
                  |L17.48|
000030  4291              CMP      r1,r2                 ;680
000032  d3ec              BCC      |L17.14|
000034  2000              MOVS     r0,#0                 ;693
000036  e7f2              B        |L17.30|
;;;697    
                          ENDP

                  |L17.56|
                          DCD      0x40050000
                  |L17.60|
                          DCD      0xffff9801

                          AREA ||i.GetUartClk||, CODE, READONLY, ALIGN=2

                  GetUartClk PROC
;;;142    /*---------------------------------------------------------------------------------------------------------*/
;;;143    static uint32_t GetUartClk(void)
000000  b570              PUSH     {r4-r6,lr}
;;;144    {
;;;145    	uint32_t clk =0 , div;
000002  2400              MOVS     r4,#0
;;;146    
;;;147        div = SYSCLK->CLKDIV.UART_N;				/* According PLL Clock and UART_Divider to get clock */
000004  480e              LDR      r0,|L18.64|
000006  6980              LDR      r0,[r0,#0x18]
000008  0500              LSLS     r0,r0,#20
00000a  0f05              LSRS     r5,r0,#28
;;;148    													
;;;149    	if(SYSCLK->CLKSEL1.UART_S == 0)			    /* Check UART Clock Source Setting */
00000c  480c              LDR      r0,|L18.64|
00000e  6940              LDR      r0,[r0,#0x14]
000010  0180              LSLS     r0,r0,#6
000012  0f80              LSRS     r0,r0,#30
000014  2800              CMP      r0,#0
000016  d103              BNE      |L18.32|
;;;150    	{
;;;151    		clk = DrvSYS_GetExtClockFreq();			/* Get External Clock From DrvSYS Setting */
000018  f7fffffe          BL       DrvSYS_GetExtClockFreq
00001c  4604              MOV      r4,r0
00001e  e00a              B        |L18.54|
                  |L18.32|
;;;152    	}
;;;153    	else if(SYSCLK->CLKSEL1.UART_S == 1)
000020  4807              LDR      r0,|L18.64|
000022  6940              LDR      r0,[r0,#0x14]
000024  0180              LSLS     r0,r0,#6
000026  0f80              LSRS     r0,r0,#30
000028  2801              CMP      r0,#1
00002a  d103              BNE      |L18.52|
;;;154    	{
;;;155    		clk = DrvSYS_GetPLLClockFreq();
00002c  f7fffffe          BL       DrvSYS_GetPLLClockFreq
000030  4604              MOV      r4,r0
000032  e000              B        |L18.54|
                  |L18.52|
;;;156    	}
;;;157    	else
;;;158    		clk = __IRC22M;								/* Clock 22Mhz  */
000034  4c03              LDR      r4,|L18.68|
                  |L18.54|
;;;159    
;;;160    	return (clk/(div+1));
000036  1c69              ADDS     r1,r5,#1
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       __aeabi_uidivmod
;;;161    }
00003e  bd70              POP      {r4-r6,pc}
;;;162    
                          ENDP

                  |L18.64|
                          DCD      0x50000200
                  |L18.68|
                          DCD      0x01518000

                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_DisableIRQ PROC
;;;809     */
;;;810    static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;811    {
;;;812      NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L19.16|
00000a  6011              STR      r1,[r2,#0]
;;;813    }
00000c  4770              BX       lr
;;;814    
                          ENDP

00000e  0000              DCW      0x0000
                  |L19.16|
                          DCD      0xe000e180

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;796     */
;;;797    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;798    {
;;;799      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L20.16|
00000a  6011              STR      r1,[r2,#0]
;;;800    }
00000c  4770              BX       lr
;;;801    
                          ENDP

00000e  0000              DCW      0x0000
                  |L20.16|
                          DCD      0xe000e100

                          AREA ||i.UART02_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART02_IRQHandler PROC
;;;31     /*---------------------------------------------------------------------------------------------------------*/
;;;32     void UART02_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;33     {
;;;34         uint32_t u32uart0IntStatus,u32uart2IntStatus;
;;;35     
;;;36         u32uart0IntStatus = inpw(&UART0->ISR) ;
000002  480a              LDR      r0,|L21.44|
000004  69c4              LDR      r4,[r0,#0x1c]
;;;37     	
;;;38     	u32uart2IntStatus = inpw(&UART2->ISR) ;
000006  480a              LDR      r0,|L21.48|
000008  69c5              LDR      r5,[r0,#0x1c]
;;;39     	
;;;40         if(g_pfnUART0callback != NULL)
00000a  480a              LDR      r0,|L21.52|
00000c  6800              LDR      r0,[r0,#0]  ; g_pfnUART0callback
00000e  2800              CMP      r0,#0
000010  d003              BEQ      |L21.26|
;;;41     	{
;;;42             g_pfnUART0callback(u32uart0IntStatus);
000012  4620              MOV      r0,r4
000014  4907              LDR      r1,|L21.52|
000016  6809              LDR      r1,[r1,#0]  ; g_pfnUART0callback
000018  4788              BLX      r1
                  |L21.26|
;;;43         }
;;;44     	if(g_pfnUART2callback != NULL)
00001a  4807              LDR      r0,|L21.56|
00001c  6800              LDR      r0,[r0,#0]  ; g_pfnUART2callback
00001e  2800              CMP      r0,#0
000020  d003              BEQ      |L21.42|
;;;45         {
;;;46             g_pfnUART2callback(u32uart2IntStatus);
000022  4628              MOV      r0,r5
000024  4904              LDR      r1,|L21.56|
000026  6809              LDR      r1,[r1,#0]  ; g_pfnUART2callback
000028  4788              BLX      r1
                  |L21.42|
;;;47         }
;;;48     }
00002a  bd70              POP      {r4-r6,pc}
;;;49     
                          ENDP

                  |L21.44|
                          DCD      0x40050000
                  |L21.48|
                          DCD      0x40154000
                  |L21.52|
                          DCD      g_pfnUART0callback
                  |L21.56|
                          DCD      g_pfnUART2callback

                          AREA ||i.UART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART1_IRQHandler PROC
;;;50     
;;;51     void UART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;52     {
;;;53         uint32_t u32IntStatus;
;;;54     
;;;55     	u32IntStatus = inpw(&UART1->ISR) ;
000002  4805              LDR      r0,|L22.24|
000004  69c4              LDR      r4,[r0,#0x1c]
;;;56     
;;;57         if(g_pfnUART1callback != NULL)
000006  4805              LDR      r0,|L22.28|
000008  6800              LDR      r0,[r0,#0]  ; g_pfnUART1callback
00000a  2800              CMP      r0,#0
00000c  d003              BEQ      |L22.22|
;;;58         {
;;;59            g_pfnUART1callback(u32IntStatus);
00000e  4620              MOV      r0,r4
000010  4902              LDR      r1,|L22.28|
000012  6809              LDR      r1,[r1,#0]  ; g_pfnUART1callback
000014  4788              BLX      r1
                  |L22.22|
;;;60         }
;;;61     
;;;62     }
000016  bd10              POP      {r4,pc}
;;;63     
                          ENDP

                  |L22.24|
                          DCD      0x40150000
                  |L22.28|
                          DCD      g_pfnUART1callback

                          AREA ||.data||, DATA, ALIGN=2

                  g_pfnUART0callback
                          DCD      0x00000000
                  g_pfnUART1callback
                          DCD      0x00000000
                  g_pfnUART2callback
                          DCD      0x00000000
